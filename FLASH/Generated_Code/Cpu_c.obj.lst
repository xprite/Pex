   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"Cpu.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	SR_reg,1,1
  19              		.global	SR_lock
  20              		.section	.bss.SR_lock,"aw",%nobits
  23              	SR_lock:
  24 0000 00       		.space	1
  25              		.section	.text.Cpu_INT_NMIInterrupt,"ax",%progbits
  26              		.align	2
  27              		.global	Cpu_INT_NMIInterrupt
  28              		.thumb
  29              		.thumb_func
  31              	Cpu_INT_NMIInterrupt:
  32              	.LFB0:
  33              		.file 1 "../Generated_Code/Cpu.c"
   1:../Generated_Code/Cpu.c **** /** ###################################################################
   2:../Generated_Code/Cpu.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/Cpu.c **** **     Filename    : Cpu.c
   4:../Generated_Code/Cpu.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/Cpu.c **** **     Processor   : MK40DX256ZVLQ10
   6:../Generated_Code/Cpu.c **** **     Component   : MK40N512LQ100
   7:../Generated_Code/Cpu.c **** **     Version     : Component 01.000, Driver 01.04, CPU db: 3.00.001
   8:../Generated_Code/Cpu.c **** **     Datasheet   : K40P144M100SF2RM, Rev. 6, 6 Nov 2011
   9:../Generated_Code/Cpu.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/Cpu.c **** **     Date/Time   : 2013-04-14, 18:36, # CodeGen: 107
  11:../Generated_Code/Cpu.c **** **     Abstract    :
  12:../Generated_Code/Cpu.c **** **
  13:../Generated_Code/Cpu.c **** **     Settings    :
  14:../Generated_Code/Cpu.c **** **
  15:../Generated_Code/Cpu.c **** **     Contents    :
  16:../Generated_Code/Cpu.c **** **         No public methods
  17:../Generated_Code/Cpu.c **** **
  18:../Generated_Code/Cpu.c **** **     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
  19:../Generated_Code/Cpu.c **** **     
  20:../Generated_Code/Cpu.c **** **     http      : www.freescale.com
  21:../Generated_Code/Cpu.c **** **     mail      : support@freescale.com
  22:../Generated_Code/Cpu.c **** ** ###################################################################*/
  23:../Generated_Code/Cpu.c **** 
  24:../Generated_Code/Cpu.c **** /* MODULE Cpu. */
  25:../Generated_Code/Cpu.c **** #include "PWMMotor.h"
  26:../Generated_Code/Cpu.c **** #include "GPIO1.h"
  27:../Generated_Code/Cpu.c **** #include "OdometryTimer.h"
  28:../Generated_Code/Cpu.c **** #include "OdometryGPIO.h"
  29:../Generated_Code/Cpu.c **** #include "CsIO1.h"
  30:../Generated_Code/Cpu.c **** #include "IO1.h"
  31:../Generated_Code/Cpu.c **** #include "Period.h"
  32:../Generated_Code/Cpu.c **** #include "AD1.h"
  33:../Generated_Code/Cpu.c **** #include "AD2.h"
  34:../Generated_Code/Cpu.c **** #include "AS1.h"
  35:../Generated_Code/Cpu.c **** #include "I2C2.h"
  36:../Generated_Code/Cpu.c **** #include "GPIO2.h"
  37:../Generated_Code/Cpu.c **** #include "GPIO3.h"
  38:../Generated_Code/Cpu.c **** #include "CameraTimer.h"
  39:../Generated_Code/Cpu.c **** #include "SiPin.h"
  40:../Generated_Code/Cpu.c **** #include "ServoTimer.h"
  41:../Generated_Code/Cpu.c **** #include "PE_Types.h"
  42:../Generated_Code/Cpu.c **** #include "PE_Error.h"
  43:../Generated_Code/Cpu.c **** #include "PE_Const.h"
  44:../Generated_Code/Cpu.c **** #include "IO_Map.h"
  45:../Generated_Code/Cpu.c **** #include "Events.h"
  46:../Generated_Code/Cpu.c **** #include "Cpu.h"
  47:../Generated_Code/Cpu.c **** 
  48:../Generated_Code/Cpu.c **** /* Global variables */
  49:../Generated_Code/Cpu.c **** volatile uint8_t SR_reg;               /* Current value of the FAULTMASK register */
  50:../Generated_Code/Cpu.c **** volatile uint8_t SR_lock = 0x00U;      /* Lock */
  51:../Generated_Code/Cpu.c **** 
  52:../Generated_Code/Cpu.c **** /*
  53:../Generated_Code/Cpu.c **** ** ===================================================================
  54:../Generated_Code/Cpu.c **** **     Method      :  Cpu_SetBASEPRI (component MK40N512LQ100)
  55:../Generated_Code/Cpu.c **** **
  56:../Generated_Code/Cpu.c **** **     Description :
  57:../Generated_Code/Cpu.c **** **         This method sets the BASEPRI core register.
  58:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  59:../Generated_Code/Cpu.c **** ** ===================================================================
  60:../Generated_Code/Cpu.c **** */
  61:../Generated_Code/Cpu.c **** void Cpu_SetBASEPRI(uint32_t Level);
  62:../Generated_Code/Cpu.c **** 
  63:../Generated_Code/Cpu.c **** /*
  64:../Generated_Code/Cpu.c **** ** ===================================================================
  65:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_NMIInterrupt (component MK40N512LQ100)
  66:../Generated_Code/Cpu.c **** **
  67:../Generated_Code/Cpu.c **** **     Description :
  68:../Generated_Code/Cpu.c **** **         This ISR services the Non Maskable Interrupt interrupt.
  69:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  70:../Generated_Code/Cpu.c **** ** ===================================================================
  71:../Generated_Code/Cpu.c **** */
  72:../Generated_Code/Cpu.c **** PE_ISR(Cpu_INT_NMIInterrupt)
  73:../Generated_Code/Cpu.c **** {
  34              		.loc 1 73 0
  35              		.cfi_startproc
  36              		@ Stack Align: May be called with mis-aligned SP.
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39 0000 6846     		mov	r0, sp
  40              		.cfi_register 13, 0
  41 0002 20F00701 		bic	r1, r0, #7
  42 0006 8D46     		mov	sp, r1
  43 0008 89B5     		push	{r0, r3, r7, lr}
  44              	.LCFI0:
  45              		.cfi_def_cfa_offset 16
  46              		.cfi_offset 14, -4
  47              		.cfi_offset 7, -8
  48              		.cfi_offset 3, -12
  49              		.cfi_offset 13, -16
  50 000a 00AF     		add	r7, sp, #0
  51              	.LCFI1:
  52              		.cfi_def_cfa_register 7
  74:../Generated_Code/Cpu.c ****   Cpu_OnNMIINT0();
  53              		.loc 1 74 0
  54 000c FFF7FEFF 		bl	Cpu_OnNMIINT0
  75:../Generated_Code/Cpu.c **** }
  55              		.loc 1 75 0
  56 0010 BD46     		mov	sp, r7
  57 0012 BDE88940 		pop	{r0, r3, r7, lr}
  58 0016 8546     		mov	sp, r0
  59 0018 7047     		bx	lr
  60              		.cfi_endproc
  61              	.LFE0:
  63 001a 00BF     		.section	.text.Cpu_Interrupt,"ax",%progbits
  64              		.align	2
  65              		.global	Cpu_Interrupt
  66              		.thumb
  67              		.thumb_func
  69              	Cpu_Interrupt:
  70              	.LFB1:
  76:../Generated_Code/Cpu.c **** 
  77:../Generated_Code/Cpu.c **** /*
  78:../Generated_Code/Cpu.c **** ** ===================================================================
  79:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MK40N512LQ100)
  80:../Generated_Code/Cpu.c **** **
  81:../Generated_Code/Cpu.c **** **     Description :
  82:../Generated_Code/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
  83:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  84:../Generated_Code/Cpu.c **** ** ===================================================================
  85:../Generated_Code/Cpu.c **** */
  86:../Generated_Code/Cpu.c **** PE_ISR(Cpu_Interrupt)
  87:../Generated_Code/Cpu.c **** {
  71              		.loc 1 87 0
  72              		.cfi_startproc
  73              		@ Stack Align: May be called with mis-aligned SP.
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 1, uses_anonymous_args = 0
  76              		@ link register save eliminated.
  77 0000 6846     		mov	r0, sp
  78              		.cfi_register 13, 0
  79 0002 20F00701 		bic	r1, r0, #7
  80 0006 8D46     		mov	sp, r1
  81 0008 81B4     		push	{r0, r7}
  82              	.LCFI2:
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 7, -4
  85              		.cfi_offset 13, -8
  86 000a 00AF     		add	r7, sp, #0
  87              	.LCFI3:
  88              		.cfi_def_cfa_register 7
  88:../Generated_Code/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
  89:../Generated_Code/Cpu.c ****   PE_DEBUGHALT();
  89              		.loc 1 89 0
  90              	@ 89 "../Generated_Code/Cpu.c" 1
  91 000c FFBE     		BKPT 255
  92              	@ 0 "" 2
  90:../Generated_Code/Cpu.c **** }
  93              		.loc 1 90 0
  94              		.thumb
  95 000e BD46     		mov	sp, r7
  96 0010 81BC     		pop	{r0, r7}
  97 0012 8546     		mov	sp, r0
  98 0014 7047     		bx	lr
  99              		.cfi_endproc
 100              	.LFE1:
 102 0016 00BF     		.section	.text.__init_hardware,"ax",%progbits
 103              		.align	2
 104              		.global	__init_hardware
 105              		.thumb
 106              		.thumb_func
 108              	__init_hardware:
 109              	.LFB2:
  91:../Generated_Code/Cpu.c **** 
  92:../Generated_Code/Cpu.c **** 
  93:../Generated_Code/Cpu.c **** /*** !!! Here you can place your own code using property "User data declarations" on the build opti
  94:../Generated_Code/Cpu.c **** 
  95:../Generated_Code/Cpu.c **** /*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware).
  96:../Generated_Code/Cpu.c **** /*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
  97:../Generated_Code/Cpu.c **** void __init_hardware(void)
  98:../Generated_Code/Cpu.c **** {
 110              		.loc 1 98 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115 0000 80B4     		push	{r7}
 116              	.LCFI4:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 7, -4
 119 0002 00AF     		add	r7, sp, #0
 120              	.LCFI5:
 121              		.cfi_def_cfa_register 7
  99:../Generated_Code/Cpu.c **** 
 100:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code before PE initialization using property "User code befo
 101:../Generated_Code/Cpu.c **** 
 102:../Generated_Code/Cpu.c ****   /*** ### MK40DX256ZVLQ10 "Cpu" init code ... ***/
 103:../Generated_Code/Cpu.c ****   /*** PE initialization code after reset ***/
 104:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
 122              		.loc 1 104 0
 123 0004 4FF0E022 		mov	r2, #-536813568
 124 0008 40F20003 		movw	r3, #:lower16:__vect_table
 125 000c C0F20003 		movt	r3, #:upper16:__vect_table
 126 0010 C2F8083D 		str	r3, [r2, #3336]
 105:../Generated_Code/Cpu.c ****   /* Disable the WDOG module */
 106:../Generated_Code/Cpu.c ****   /* WDOG_UNLOCK: WDOGUNLOCK=0xC520 */
 107:../Generated_Code/Cpu.c ****   WDOG_UNLOCK = WDOG_UNLOCK_WDOGUNLOCK(0xC520); /* Key 1 */
 127              		.loc 1 107 0
 128 0014 4FF40053 		mov	r3, #8192
 129 0018 C4F20503 		movt	r3, 16389
 130 001c 4CF22052 		movw	r2, #50464
 131 0020 DA81     		strh	r2, [r3, #14]	@ movhi
 108:../Generated_Code/Cpu.c ****   /* WDOG_UNLOCK: WDOGUNLOCK=0xD928 */
 109:../Generated_Code/Cpu.c ****   WDOG_UNLOCK = WDOG_UNLOCK_WDOGUNLOCK(0xD928); /* Key 2 */
 132              		.loc 1 109 0
 133 0022 4FF40053 		mov	r3, #8192
 134 0026 C4F20503 		movt	r3, 16389
 135 002a 4DF62812 		movw	r2, #55592
 136 002e DA81     		strh	r2, [r3, #14]	@ movhi
 110:../Generated_Code/Cpu.c ****   /* WDOG_STCTRLH: ??=0,DISTESTWDOG=0,BYTESEL=0,TESTSEL=0,TESTWDOG=0,??=0,STNDBYEN=1,WAITEN=1,STOPE
 111:../Generated_Code/Cpu.c ****   WDOG_STCTRLH = WDOG_STCTRLH_STNDBYEN_MASK |
 137              		.loc 1 111 0
 138 0030 4FF40053 		mov	r3, #8192
 139 0034 C4F20503 		movt	r3, 16389
 140 0038 4FF4E972 		mov	r2, #466
 141 003c 1A80     		strh	r2, [r3, #0]	@ movhi
 112:../Generated_Code/Cpu.c ****                  WDOG_STCTRLH_WAITEN_MASK |
 113:../Generated_Code/Cpu.c ****                  WDOG_STCTRLH_STOPEN_MASK |
 114:../Generated_Code/Cpu.c ****                  WDOG_STCTRLH_ALLOWUPDATE_MASK |
 115:../Generated_Code/Cpu.c ****                  WDOG_STCTRLH_CLKSRC_MASK;                       
 116:../Generated_Code/Cpu.c ****   /* System clock initialization */
 117:../Generated_Code/Cpu.c ****   /* SIM_SCGC5: PORTE=1,PORTD=1,PORTC=1,PORTB=1,PORTA=1 */
 118:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK |
 142              		.loc 1 118 0
 143 003e 4FF4E043 		mov	r3, #28672
 144 0042 C4F20403 		movt	r3, 16388
 145 0046 4FF4E042 		mov	r2, #28672
 146 004a C4F20402 		movt	r2, 16388
 147 004e 02F58052 		add	r2, r2, #4096
 148 0052 02F13802 		add	r2, r2, #56
 149 0056 1268     		ldr	r2, [r2, #0]
 150 0058 42F47852 		orr	r2, r2, #15872
 151 005c 03F58053 		add	r3, r3, #4096
 152 0060 03F13803 		add	r3, r3, #56
 153 0064 1A60     		str	r2, [r3, #0]
 119:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTD_MASK |
 120:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTC_MASK |
 121:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTB_MASK |
 122:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
 123:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,OUTDIV2=1,OUTDIV3=1,OUTDIV4=3,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,?
 124:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV2(0x01) |
 154              		.loc 1 124 0
 155 0066 4FF4E043 		mov	r3, #28672
 156 006a C4F20403 		movt	r3, 16388
 157 006e 03F58253 		add	r3, r3, #4160
 158 0072 03F10403 		add	r3, r3, #4
 159 0076 4FF00002 		mov	r2, #0
 160 007a C0F21312 		movt	r2, 275
 161 007e 1A60     		str	r2, [r3, #0]
 125:../Generated_Code/Cpu.c ****                 SIM_CLKDIV1_OUTDIV3(0x01) |
 126:../Generated_Code/Cpu.c ****                 SIM_CLKDIV1_OUTDIV4(0x03); /* Update system prescalers */
 127:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV2: USBDIV=1,USBFRAC=0 */
 128:../Generated_Code/Cpu.c ****   SIM_CLKDIV2 = (uint32_t)((SIM_CLKDIV2 & (uint32_t)~(uint32_t)(
 162              		.loc 1 128 0
 163 0080 4FF4E043 		mov	r3, #28672
 164 0084 C4F20403 		movt	r3, 16388
 165 0088 4FF4E042 		mov	r2, #28672
 166 008c C4F20402 		movt	r2, 16388
 167 0090 02F58252 		add	r2, r2, #4160
 168 0094 02F10802 		add	r2, r2, #8
 169 0098 1268     		ldr	r2, [r2, #0]
 170 009a 22F00F02 		bic	r2, r2, #15
 171 009e 42F00202 		orr	r2, r2, #2
 172 00a2 03F58253 		add	r3, r3, #4160
 173 00a6 03F10803 		add	r3, r3, #8
 174 00aa 1A60     		str	r2, [r3, #0]
 129:../Generated_Code/Cpu.c ****                  SIM_CLKDIV2_USBDIV(0x06) |
 130:../Generated_Code/Cpu.c ****                  SIM_CLKDIV2_USBFRAC_MASK
 131:../Generated_Code/Cpu.c ****                 )) | (uint32_t)(
 132:../Generated_Code/Cpu.c ****                  SIM_CLKDIV2_USBDIV(0x01)
 133:../Generated_Code/Cpu.c ****                 ));                    /* Update USB clock prescalers */
 134:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=1 */
 135:../Generated_Code/Cpu.c ****   SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK; /* Select PLL as a clock source for various peripherals */
 175              		.loc 1 135 0
 176 00ac 4FF4E043 		mov	r3, #28672
 177 00b0 C4F20403 		movt	r3, 16388
 178 00b4 4FF4E042 		mov	r2, #28672
 179 00b8 C4F20402 		movt	r2, 16388
 180 00bc 02F58052 		add	r2, r2, #4096
 181 00c0 02F10402 		add	r2, r2, #4
 182 00c4 1268     		ldr	r2, [r2, #0]
 183 00c6 42F48032 		orr	r2, r2, #65536
 184 00ca 03F58053 		add	r3, r3, #4096
 185 00ce 03F10403 		add	r3, r3, #4
 186 00d2 1A60     		str	r2, [r3, #0]
 136:../Generated_Code/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=0 */
 137:../Generated_Code/Cpu.c ****   SIM_SOPT1 &= (uint32_t)~(uint32_t)(SIM_SOPT1_OSC32KSEL_MASK); /* System oscillator drives 32 kHz 
 187              		.loc 1 137 0
 188 00d4 4FF4E043 		mov	r3, #28672
 189 00d8 C4F20403 		movt	r3, 16388
 190 00dc 4FF4E042 		mov	r2, #28672
 191 00e0 C4F20402 		movt	r2, 16388
 192 00e4 1268     		ldr	r2, [r2, #0]
 193 00e6 22F40022 		bic	r2, r2, #524288
 194 00ea 1A60     		str	r2, [r3, #0]
 138:../Generated_Code/Cpu.c ****   /* PORTA_PCR18: ISF=0,MUX=0 */
 139:../Generated_Code/Cpu.c ****   PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));                  
 195              		.loc 1 139 0
 196 00ec 4FF41043 		mov	r3, #36864
 197 00f0 C4F20403 		movt	r3, 16388
 198 00f4 4FF41042 		mov	r2, #36864
 199 00f8 C4F20402 		movt	r2, 16388
 200 00fc 926C     		ldr	r2, [r2, #72]
 201 00fe 22F08072 		bic	r2, r2, #16777216
 202 0102 22F4E062 		bic	r2, r2, #1792
 203 0106 9A64     		str	r2, [r3, #72]
 140:../Generated_Code/Cpu.c ****   /* PORTA_PCR19: ISF=0,MUX=0 */
 141:../Generated_Code/Cpu.c ****   PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));                  
 204              		.loc 1 141 0
 205 0108 4FF41043 		mov	r3, #36864
 206 010c C4F20403 		movt	r3, 16388
 207 0110 4FF41042 		mov	r2, #36864
 208 0114 C4F20402 		movt	r2, 16388
 209 0118 D26C     		ldr	r2, [r2, #76]
 210 011a 22F08072 		bic	r2, r2, #16777216
 211 011e 22F4E062 		bic	r2, r2, #1792
 212 0122 DA64     		str	r2, [r3, #76]
 142:../Generated_Code/Cpu.c ****   /* Switch to FBE Mode */
 143:../Generated_Code/Cpu.c ****   /* MCG_C2: ??=0,??=0,RANGE=1,HGO=0,EREFS=1,LP=0,IRCS=0 */
 144:../Generated_Code/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE(0x01) | MCG_C2_EREFS_MASK);                                               
 213              		.loc 1 144 0
 214 0124 4FF48043 		mov	r3, #16384
 215 0128 C4F20603 		movt	r3, 16390
 216 012c 4FF01402 		mov	r2, #20
 217 0130 5A70     		strb	r2, [r3, #1]
 145:../Generated_Code/Cpu.c ****   /* OSC_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 146:../Generated_Code/Cpu.c ****   OSC_CR = OSC_CR_ERCLKEN_MASK;                                                   
 218              		.loc 1 146 0
 219 0132 4FF4A043 		mov	r3, #20480
 220 0136 C4F20603 		movt	r3, 16390
 221 013a 4FF08002 		mov	r2, #128
 222 013e 1A70     		strb	r2, [r3, #0]
 147:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: MCGCLKSEL=0 */
 148:../Generated_Code/Cpu.c ****   SIM_SOPT2 &= (uint32_t)~(uint32_t)(SIM_SOPT2_MCGCLKSEL_MASK);                                    
 223              		.loc 1 148 0
 224 0140 4FF4E043 		mov	r3, #28672
 225 0144 C4F20403 		movt	r3, 16388
 226 0148 4FF4E042 		mov	r2, #28672
 227 014c C4F20402 		movt	r2, 16388
 228 0150 02F58052 		add	r2, r2, #4096
 229 0154 02F10402 		add	r2, r2, #4
 230 0158 1268     		ldr	r2, [r2, #0]
 231 015a 22F00102 		bic	r2, r2, #1
 232 015e 03F58053 		add	r3, r3, #4096
 233 0162 03F10403 		add	r3, r3, #4
 234 0166 1A60     		str	r2, [r3, #0]
 149:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=2,FRDIV=2,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 150:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x02) | MCG_C1_IRCLKEN_MASK);                         
 235              		.loc 1 150 0
 236 0168 4FF48043 		mov	r3, #16384
 237 016c C4F20603 		movt	r3, 16390
 238 0170 4FF09202 		mov	r2, #146
 239 0174 1A70     		strb	r2, [r3, #0]
 151:../Generated_Code/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 152:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));                      
 240              		.loc 1 152 0
 241 0176 4FF48043 		mov	r3, #16384
 242 017a C4F20603 		movt	r3, 16390
 243 017e 4FF48042 		mov	r2, #16384
 244 0182 C4F20602 		movt	r2, 16390
 245 0186 D278     		ldrb	r2, [r2, #3]
 246 0188 D2B2     		uxtb	r2, r2
 247 018a 02F01F02 		and	r2, r2, #31
 248 018e D2B2     		uxtb	r2, r2
 249 0190 DA70     		strb	r2, [r3, #3]
 153:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN=0,PLLSTEN=0,PRDIV=0 */
 154:../Generated_Code/Cpu.c ****   MCG_C5 = 0x00U;                                                   
 250              		.loc 1 154 0
 251 0192 4FF48043 		mov	r3, #16384
 252 0196 C4F20603 		movt	r3, 16390
 253 019a 4FF00002 		mov	r2, #0
 254 019e 1A71     		strb	r2, [r3, #4]
 155:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE=0,PLLS=0,CME=0,VDIV=0 */
 156:../Generated_Code/Cpu.c ****   MCG_C6 = 0x00U;                                                   
 255              		.loc 1 156 0
 256 01a0 4FF48043 		mov	r3, #16384
 257 01a4 C4F20603 		movt	r3, 16390
 258 01a8 4FF00002 		mov	r2, #0
 259 01ac 5A71     		strb	r2, [r3, #5]
 157:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_OSCINIT_MASK) == 0x00U) { /* Check that the oscillator is running */
 260              		.loc 1 157 0
 261 01ae 00BF     		nop
 262              	.L4:
 263              		.loc 1 157 0 is_stmt 0 discriminator 1
 264 01b0 4FF48043 		mov	r3, #16384
 265 01b4 C4F20603 		movt	r3, 16390
 266 01b8 9B79     		ldrb	r3, [r3, #6]
 267 01ba DBB2     		uxtb	r3, r3
 268 01bc 03F00203 		and	r3, r3, #2
 269 01c0 002B     		cmp	r3, #0
 270 01c2 F5D0     		beq	.L4
 158:../Generated_Code/Cpu.c ****   }
 159:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock
 271              		.loc 1 159 0 is_stmt 1
 272 01c4 00BF     		nop
 273              	.L5:
 274              		.loc 1 159 0 is_stmt 0 discriminator 1
 275 01c6 4FF48043 		mov	r3, #16384
 276 01ca C4F20603 		movt	r3, 16390
 277 01ce 9B79     		ldrb	r3, [r3, #6]
 278 01d0 DBB2     		uxtb	r3, r3
 279 01d2 03F01003 		and	r3, r3, #16
 280 01d6 002B     		cmp	r3, #0
 281 01d8 F5D1     		bne	.L5
 160:../Generated_Code/Cpu.c ****   }
 161:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 282              		.loc 1 161 0 is_stmt 1
 283 01da 00BF     		nop
 284              	.L6:
 285              		.loc 1 161 0 is_stmt 0 discriminator 1
 286 01dc 4FF48043 		mov	r3, #16384
 287 01e0 C4F20603 		movt	r3, 16390
 288 01e4 9B79     		ldrb	r3, [r3, #6]
 289 01e6 DBB2     		uxtb	r3, r3
 290 01e8 03F00C03 		and	r3, r3, #12
 291 01ec 082B     		cmp	r3, #8
 292 01ee F5D1     		bne	.L6
 162:../Generated_Code/Cpu.c ****   }
 163:../Generated_Code/Cpu.c ****   /* Switch to PBE Mode */
 164:../Generated_Code/Cpu.c ****   /* OSC_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 165:../Generated_Code/Cpu.c ****   OSC_CR = OSC_CR_ERCLKEN_MASK;                                                   
 293              		.loc 1 165 0 is_stmt 1
 294 01f0 4FF4A043 		mov	r3, #20480
 295 01f4 C4F20603 		movt	r3, 16390
 296 01f8 4FF08002 		mov	r2, #128
 297 01fc 1A70     		strb	r2, [r3, #0]
 166:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: MCGCLKSEL=0 */
 167:../Generated_Code/Cpu.c ****   SIM_SOPT2 &= (uint32_t)~(uint32_t)(SIM_SOPT2_MCGCLKSEL_MASK);                                    
 298              		.loc 1 167 0
 299 01fe 4FF4E043 		mov	r3, #28672
 300 0202 C4F20403 		movt	r3, 16388
 301 0206 4FF4E042 		mov	r2, #28672
 302 020a C4F20402 		movt	r2, 16388
 303 020e 02F58052 		add	r2, r2, #4096
 304 0212 02F10402 		add	r2, r2, #4
 305 0216 1268     		ldr	r2, [r2, #0]
 306 0218 22F00102 		bic	r2, r2, #1
 307 021c 03F58053 		add	r3, r3, #4096
 308 0220 03F10403 		add	r3, r3, #4
 309 0224 1A60     		str	r2, [r3, #0]
 168:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=2,FRDIV=2,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 169:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x02) | MCG_C1_IRCLKEN_MASK);                         
 310              		.loc 1 169 0
 311 0226 4FF48043 		mov	r3, #16384
 312 022a C4F20603 		movt	r3, 16390
 313 022e 4FF09202 		mov	r2, #146
 314 0232 1A70     		strb	r2, [r3, #0]
 170:../Generated_Code/Cpu.c ****   /* MCG_C2: ??=0,??=0,RANGE=1,HGO=0,EREFS=1,LP=0,IRCS=0 */
 171:../Generated_Code/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE(0x01) | MCG_C2_EREFS_MASK);                                               
 315              		.loc 1 171 0
 316 0234 4FF48043 		mov	r3, #16384
 317 0238 C4F20603 		movt	r3, 16390
 318 023c 4FF01402 		mov	r2, #20
 319 0240 5A70     		strb	r2, [r3, #1]
 172:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN=0,PLLSTEN=0,PRDIV=0 */
 173:../Generated_Code/Cpu.c ****   MCG_C5 = 0x00U;                                                   
 320              		.loc 1 173 0
 321 0242 4FF48043 		mov	r3, #16384
 322 0246 C4F20603 		movt	r3, 16390
 323 024a 4FF00002 		mov	r2, #0
 324 024e 1A71     		strb	r2, [r3, #4]
 174:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE=0,PLLS=1,CME=0,VDIV=0 */
 175:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_PLLS_MASK;                                                   
 325              		.loc 1 175 0
 326 0250 4FF48043 		mov	r3, #16384
 327 0254 C4F20603 		movt	r3, 16390
 328 0258 4FF04002 		mov	r2, #64
 329 025c 5A71     		strb	r2, [r3, #5]
 176:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 330              		.loc 1 176 0
 331 025e 00BF     		nop
 332              	.L7:
 333              		.loc 1 176 0 is_stmt 0 discriminator 1
 334 0260 4FF48043 		mov	r3, #16384
 335 0264 C4F20603 		movt	r3, 16390
 336 0268 9B79     		ldrb	r3, [r3, #6]
 337 026a DBB2     		uxtb	r3, r3
 338 026c 03F00C03 		and	r3, r3, #12
 339 0270 082B     		cmp	r3, #8
 340 0272 F5D1     		bne	.L7
 177:../Generated_Code/Cpu.c ****   }
 178:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_LOCK_MASK) == 0x00U) { /* Wait until locked */
 341              		.loc 1 178 0 is_stmt 1
 342 0274 00BF     		nop
 343              	.L8:
 344              		.loc 1 178 0 is_stmt 0 discriminator 1
 345 0276 4FF48043 		mov	r3, #16384
 346 027a C4F20603 		movt	r3, 16390
 347 027e 9B79     		ldrb	r3, [r3, #6]
 348 0280 DBB2     		uxtb	r3, r3
 349 0282 03F04003 		and	r3, r3, #64
 350 0286 002B     		cmp	r3, #0
 351 0288 F5D0     		beq	.L8
 179:../Generated_Code/Cpu.c ****   }
 180:../Generated_Code/Cpu.c ****   /* Switch to PEE Mode */
 181:../Generated_Code/Cpu.c ****   /* OSC_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 182:../Generated_Code/Cpu.c ****   OSC_CR = OSC_CR_ERCLKEN_MASK;                                                   
 352              		.loc 1 182 0 is_stmt 1
 353 028a 4FF4A043 		mov	r3, #20480
 354 028e C4F20603 		movt	r3, 16390
 355 0292 4FF08002 		mov	r2, #128
 356 0296 1A70     		strb	r2, [r3, #0]
 183:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: MCGCLKSEL=0 */
 184:../Generated_Code/Cpu.c ****   SIM_SOPT2 &= (uint32_t)~(uint32_t)(SIM_SOPT2_MCGCLKSEL_MASK);                                    
 357              		.loc 1 184 0
 358 0298 4FF4E043 		mov	r3, #28672
 359 029c C4F20403 		movt	r3, 16388
 360 02a0 4FF4E042 		mov	r2, #28672
 361 02a4 C4F20402 		movt	r2, 16388
 362 02a8 02F58052 		add	r2, r2, #4096
 363 02ac 02F10402 		add	r2, r2, #4
 364 02b0 1268     		ldr	r2, [r2, #0]
 365 02b2 22F00102 		bic	r2, r2, #1
 366 02b6 03F58053 		add	r3, r3, #4096
 367 02ba 03F10403 		add	r3, r3, #4
 368 02be 1A60     		str	r2, [r3, #0]
 185:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=2,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 186:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_FRDIV(0x02) | MCG_C1_IRCLKEN_MASK);                                             
 369              		.loc 1 186 0
 370 02c0 4FF48043 		mov	r3, #16384
 371 02c4 C4F20603 		movt	r3, 16390
 372 02c8 4FF01202 		mov	r2, #18
 373 02cc 1A70     		strb	r2, [r3, #0]
 187:../Generated_Code/Cpu.c ****   /* MCG_C2: ??=0,??=0,RANGE=1,HGO=0,EREFS=1,LP=0,IRCS=0 */
 188:../Generated_Code/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE(0x01) | MCG_C2_EREFS_MASK);                                               
 374              		.loc 1 188 0
 375 02ce 4FF48043 		mov	r3, #16384
 376 02d2 C4F20603 		movt	r3, 16390
 377 02d6 4FF01402 		mov	r2, #20
 378 02da 5A70     		strb	r2, [r3, #1]
 189:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN=0,PLLSTEN=0,PRDIV=0 */
 190:../Generated_Code/Cpu.c ****   MCG_C5 = 0x00U;                                                   
 379              		.loc 1 190 0
 380 02dc 4FF48043 		mov	r3, #16384
 381 02e0 C4F20603 		movt	r3, 16390
 382 02e4 4FF00002 		mov	r2, #0
 383 02e8 1A71     		strb	r2, [r3, #4]
 191:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE=0,PLLS=1,CME=0,VDIV=0 */
 192:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_PLLS_MASK;                                                   
 384              		.loc 1 192 0
 385 02ea 4FF48043 		mov	r3, #16384
 386 02ee C4F20603 		movt	r3, 16390
 387 02f2 4FF04002 		mov	r2, #64
 388 02f6 5A71     		strb	r2, [r3, #5]
 193:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
 389              		.loc 1 193 0
 390 02f8 00BF     		nop
 391              	.L9:
 392              		.loc 1 193 0 is_stmt 0 discriminator 1
 393 02fa 4FF48043 		mov	r3, #16384
 394 02fe C4F20603 		movt	r3, 16390
 395 0302 9B79     		ldrb	r3, [r3, #6]
 396 0304 DBB2     		uxtb	r3, r3
 397 0306 03F00C03 		and	r3, r3, #12
 398 030a 0C2B     		cmp	r3, #12
 399 030c F5D1     		bne	.L9
 194:../Generated_Code/Cpu.c ****   }
 195:../Generated_Code/Cpu.c ****   /*** End of PE initialization code after reset ***/
 196:../Generated_Code/Cpu.c **** 
 197:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code after PE initialization using property "User code after
 198:../Generated_Code/Cpu.c **** 
 199:../Generated_Code/Cpu.c **** }
 400              		.loc 1 199 0 is_stmt 1
 401 030e BD46     		mov	sp, r7
 402 0310 80BC     		pop	{r7}
 403 0312 7047     		bx	lr
 404              		.cfi_endproc
 405              	.LFE2:
 407              		.section	.text.Cpu_SetBASEPRI,"ax",%progbits
 408              		.align	2
 409              		.global	Cpu_SetBASEPRI
 410              		.thumb
 411              		.thumb_func
 413              	Cpu_SetBASEPRI:
 414              	.LFB3:
 200:../Generated_Code/Cpu.c **** 
 201:../Generated_Code/Cpu.c **** /*
 202:../Generated_Code/Cpu.c **** ** ===================================================================
 203:../Generated_Code/Cpu.c **** **     Method      :  Cpu_SetBASEPRI (component MK40N512LQ100)
 204:../Generated_Code/Cpu.c **** **
 205:../Generated_Code/Cpu.c **** **     Description :
 206:../Generated_Code/Cpu.c **** **         This method sets the BASEPRI core register.
 207:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 208:../Generated_Code/Cpu.c **** ** ===================================================================
 209:../Generated_Code/Cpu.c **** */
 210:../Generated_Code/Cpu.c **** /*lint -save  -e586 -e950 Disable MISRA rule (2.1,1.1) checking. */
 211:../Generated_Code/Cpu.c **** #ifdef _lint
 212:../Generated_Code/Cpu.c ****   #define Cpu_SetBASEPRI(Level)  /* empty */
 213:../Generated_Code/Cpu.c **** #else
 214:../Generated_Code/Cpu.c **** void Cpu_SetBASEPRI(uint32_t Level) {
 415              		.loc 1 214 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 8
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 419              		@ link register save eliminated.
 420 0000 80B4     		push	{r7}
 421              	.LCFI6:
 422              		.cfi_def_cfa_offset 4
 423              		.cfi_offset 7, -4
 424 0002 83B0     		sub	sp, sp, #12
 425              	.LCFI7:
 426              		.cfi_def_cfa_offset 16
 427 0004 00AF     		add	r7, sp, #0
 428              	.LCFI8:
 429              		.cfi_def_cfa_register 7
 430 0006 7860     		str	r0, [r7, #4]
 215:../Generated_Code/Cpu.c ****   asm ("msr basepri, %[input]"::[input] "r" (Level):);
 431              		.loc 1 215 0
 432 0008 7B68     		ldr	r3, [r7, #4]
 433              	@ 215 "../Generated_Code/Cpu.c" 1
 434 000a 83F31188 		msr basepri, r3
 435              	@ 0 "" 2
 216:../Generated_Code/Cpu.c **** }
 436              		.loc 1 216 0
 437              		.thumb
 438 000e 07F10C07 		add	r7, r7, #12
 439 0012 BD46     		mov	sp, r7
 440 0014 80BC     		pop	{r7}
 441 0016 7047     		bx	lr
 442              		.cfi_endproc
 443              	.LFE3:
 445              		.section	.text.PE_low_level_init,"ax",%progbits
 446              		.align	2
 447              		.global	PE_low_level_init
 448              		.thumb
 449              		.thumb_func
 451              	PE_low_level_init:
 452              	.LFB4:
 217:../Generated_Code/Cpu.c **** #endif
 218:../Generated_Code/Cpu.c **** /*lint -restore Enable MISRA rule (2.1,1.1) checking. */
 219:../Generated_Code/Cpu.c **** 
 220:../Generated_Code/Cpu.c **** 
 221:../Generated_Code/Cpu.c **** /*
 222:../Generated_Code/Cpu.c **** ** ===================================================================
 223:../Generated_Code/Cpu.c **** **     Method      :  PE_low_level_init (component MK40N512LQ100)
 224:../Generated_Code/Cpu.c **** **
 225:../Generated_Code/Cpu.c **** **     Description :
 226:../Generated_Code/Cpu.c **** **         Initializes beans and provides common register initialization. 
 227:../Generated_Code/Cpu.c **** **         The method is called automatically as a part of the 
 228:../Generated_Code/Cpu.c **** **         application initialization code.
 229:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 230:../Generated_Code/Cpu.c **** ** ===================================================================
 231:../Generated_Code/Cpu.c **** */
 232:../Generated_Code/Cpu.c **** void PE_low_level_init(void)
 233:../Generated_Code/Cpu.c **** {
 453              		.loc 1 233 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 1, uses_anonymous_args = 0
 457 0000 80B5     		push	{r7, lr}
 458              	.LCFI9:
 459              		.cfi_def_cfa_offset 8
 460              		.cfi_offset 14, -4
 461              		.cfi_offset 7, -8
 462 0002 00AF     		add	r7, sp, #0
 463              	.LCFI10:
 464              		.cfi_def_cfa_register 7
 234:../Generated_Code/Cpu.c ****   #ifdef PEX_RTOS_INIT
 235:../Generated_Code/Cpu.c ****     PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by 
 236:../Generated_Code/Cpu.c ****   #endif
 237:../Generated_Code/Cpu.c ****       /* Initialization of the SIM module */
 238:../Generated_Code/Cpu.c ****   /* PORTA_PCR4: ISF=0,MUX=7 */
 239:../Generated_Code/Cpu.c ****   PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
 465              		.loc 1 239 0
 466 0004 4FF41043 		mov	r3, #36864
 467 0008 C4F20403 		movt	r3, 16388
 468 000c 4FF41042 		mov	r2, #36864
 469 0010 C4F20402 		movt	r2, 16388
 470 0014 1269     		ldr	r2, [r2, #16]
 471 0016 22F08072 		bic	r2, r2, #16777216
 472 001a 22F4E062 		bic	r2, r2, #1792
 473 001e 42F4E062 		orr	r2, r2, #1792
 474 0022 1A61     		str	r2, [r3, #16]
 240:../Generated_Code/Cpu.c ****                 PORT_PCR_ISF_MASK
 241:../Generated_Code/Cpu.c ****                )) | (uint32_t)(
 242:../Generated_Code/Cpu.c ****                 PORT_PCR_MUX(0x07)
 243:../Generated_Code/Cpu.c ****                ));                                                  
 244:../Generated_Code/Cpu.c ****   /* SIM_SOPT6: RSTFLTEN=0,RSTFLTSEL=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,
 245:../Generated_Code/Cpu.c ****   SIM_SOPT6 = 0x00U;                   /* Set reset pin filter */
 475              		.loc 1 245 0
 476 0024 4FF4E043 		mov	r3, #28672
 477 0028 C4F20403 		movt	r3, 16388
 478 002c 03F58053 		add	r3, r3, #4096
 479 0030 03F11403 		add	r3, r3, #20
 480 0034 4FF00002 		mov	r2, #0
 481 0038 1A60     		str	r2, [r3, #0]
 246:../Generated_Code/Cpu.c ****         /* Initialization of the FTFL_FlashConfig module */
 247:../Generated_Code/Cpu.c ****   /* SIM_SCGC7: MPU=1 */
 248:../Generated_Code/Cpu.c ****   SIM_SCGC7 |= SIM_SCGC7_MPU_MASK;                                                   
 482              		.loc 1 248 0
 483 003a 4FF4E043 		mov	r3, #28672
 484 003e C4F20403 		movt	r3, 16388
 485 0042 4FF4E042 		mov	r2, #28672
 486 0046 C4F20402 		movt	r2, 16388
 487 004a 02F58252 		add	r2, r2, #4160
 488 004e 1268     		ldr	r2, [r2, #0]
 489 0050 42F00402 		orr	r2, r2, #4
 490 0054 03F58253 		add	r3, r3, #4160
 491 0058 1A60     		str	r2, [r3, #0]
 249:../Generated_Code/Cpu.c ****         /* Initialization of the MPU module */
 250:../Generated_Code/Cpu.c ****   /* MPU_CESR: SPERR=0,VLD=0 */
 251:../Generated_Code/Cpu.c ****   MPU_CESR &= (uint32_t)~(uint32_t)((MPU_CESR_SPERR(0x1F) | MPU_CESR_VLD_MASK));                   
 492              		.loc 1 251 0
 493 005a 4FF45043 		mov	r3, #53248
 494 005e C4F20003 		movt	r3, 16384
 495 0062 4FF45042 		mov	r2, #53248
 496 0066 C4F20002 		movt	r2, 16384
 497 006a 1268     		ldr	r2, [r2, #0]
 498 006c 22F07842 		bic	r2, r2, #-134217728
 499 0070 22F00102 		bic	r2, r2, #1
 500 0074 1A60     		str	r2, [r3, #0]
 252:../Generated_Code/Cpu.c ****       /* Initialization of the PMC module */
 253:../Generated_Code/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 254:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 501              		.loc 1 254 0
 502 0076 4FF45043 		mov	r3, #53248
 503 007a C4F20703 		movt	r3, 16391
 504 007e 4FF45042 		mov	r2, #53248
 505 0082 C4F20702 		movt	r2, 16391
 506 0086 1278     		ldrb	r2, [r2, #0]
 507 0088 D2B2     		uxtb	r2, r2
 508 008a D2B2     		uxtb	r2, r2
 509 008c 22F07302 		bic	r2, r2, #115
 510 0090 D2B2     		uxtb	r2, r2
 511 0092 42F05002 		orr	r2, r2, #80
 512 0096 D2B2     		uxtb	r2, r2
 513 0098 D2B2     		uxtb	r2, r2
 514 009a 1A70     		strb	r2, [r3, #0]
 255:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 256:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 257:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 258:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 259:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 260:../Generated_Code/Cpu.c ****                ));                                                  
 261:../Generated_Code/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 262:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 515              		.loc 1 262 0
 516 009c 4FF45043 		mov	r3, #53248
 517 00a0 C4F20703 		movt	r3, 16391
 518 00a4 4FF45042 		mov	r2, #53248
 519 00a8 C4F20702 		movt	r2, 16391
 520 00ac 5278     		ldrb	r2, [r2, #1]
 521 00ae D2B2     		uxtb	r2, r2
 522 00b0 D2B2     		uxtb	r2, r2
 523 00b2 22F06302 		bic	r2, r2, #99
 524 00b6 D2B2     		uxtb	r2, r2
 525 00b8 42F04002 		orr	r2, r2, #64
 526 00bc D2B2     		uxtb	r2, r2
 527 00be D2B2     		uxtb	r2, r2
 528 00c0 5A70     		strb	r2, [r3, #1]
 263:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 264:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 265:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 266:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 267:../Generated_Code/Cpu.c ****                ));                                                  
 268:../Generated_Code/Cpu.c ****   /* PMC_REGSC: TRAMPO=0,??=0,BGBE=0 */
 269:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 529              		.loc 1 269 0
 530 00c2 4FF45043 		mov	r3, #53248
 531 00c6 C4F20703 		movt	r3, 16391
 532 00ca 4FF45042 		mov	r2, #53248
 533 00ce C4F20702 		movt	r2, 16391
 534 00d2 9278     		ldrb	r2, [r2, #2]
 535 00d4 D2B2     		uxtb	r2, r2
 536 00d6 22F01302 		bic	r2, r2, #19
 537 00da D2B2     		uxtb	r2, r2
 538 00dc 9A70     		strb	r2, [r3, #2]
 270:../Generated_Code/Cpu.c ****                 PMC_REGSC_TRAMPO_MASK |
 271:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGBE_MASK |
 272:../Generated_Code/Cpu.c ****                 0x02U
 273:../Generated_Code/Cpu.c ****                );                                                   
 274:../Generated_Code/Cpu.c ****   /* MC_PMPROT: ??=0,??=0,AVLP=0,ALLS=0,??=0,AVLLS3=0,AVLLS2=0,AVLLS1=0 */
 275:../Generated_Code/Cpu.c ****   MC_PMPROT = 0x00U;                   /* Setup Power mode protection register */
 539              		.loc 1 275 0
 540 00de 4FF46043 		mov	r3, #57344
 541 00e2 C4F20703 		movt	r3, 16391
 542 00e6 4FF00002 		mov	r2, #0
 543 00ea 9A70     		strb	r2, [r3, #2]
 276:../Generated_Code/Cpu.c ****   /* Common initialization of the CPU registers */
 277:../Generated_Code/Cpu.c ****   /* NVICIP20: PRI20=0 */
 278:../Generated_Code/Cpu.c ****   NVICIP20 = 0x00U;                                                   
 544              		.loc 1 278 0
 545 00ec 4FF46143 		mov	r3, #57600
 546 00f0 CEF20003 		movt	r3, 57344
 547 00f4 4FF00002 		mov	r2, #0
 548 00f8 83F81423 		strb	r2, [r3, #788]
 279:../Generated_Code/Cpu.c ****   /* ### TimerUnit_LDD "PWMMotor" component auto initialization. Auto initialization feature can be
 280:../Generated_Code/Cpu.c ****   (void)PWMMotor_Init(NULL);
 549              		.loc 1 280 0
 550 00fc 4FF00000 		mov	r0, #0
 551 0100 FFF7FEFF 		bl	PWMMotor_Init
 281:../Generated_Code/Cpu.c ****   /* ### GPIO_LDD "GPIO1" component auto initialization. Auto initialization feature can be disable
 282:../Generated_Code/Cpu.c ****   (void)GPIO1_Init(NULL);
 552              		.loc 1 282 0
 553 0104 4FF00000 		mov	r0, #0
 554 0108 FFF7FEFF 		bl	GPIO1_Init
 283:../Generated_Code/Cpu.c ****   /* ### TimerUnit_LDD "OdometryTimer" component auto initialization. Auto initialization feature c
 284:../Generated_Code/Cpu.c ****   (void)OdometryTimer_Init(NULL);
 555              		.loc 1 284 0
 556 010c 4FF00000 		mov	r0, #0
 557 0110 FFF7FEFF 		bl	OdometryTimer_Init
 285:../Generated_Code/Cpu.c ****   /* ### GPIO_LDD "OdometryGPIO" component auto initialization. Auto initialization feature can be 
 286:../Generated_Code/Cpu.c ****   (void)OdometryGPIO_Init(NULL);
 558              		.loc 1 286 0
 559 0114 4FF00000 		mov	r0, #0
 560 0118 FFF7FEFF 		bl	OdometryGPIO_Init
 287:../Generated_Code/Cpu.c ****   /* ### Serial_LDD "IO1" component auto initialization. Auto initialization feature can be disable
 288:../Generated_Code/Cpu.c ****   (void)IO1_Init(NULL);
 561              		.loc 1 288 0
 562 011c 4FF00000 		mov	r0, #0
 563 0120 FFF7FEFF 		bl	IO1_Init
 289:../Generated_Code/Cpu.c ****   /* ### TimerUnit_LDD "Period" component auto initialization. Auto initialization feature can be d
 290:../Generated_Code/Cpu.c ****   (void)Period_Init(NULL);
 564              		.loc 1 290 0
 565 0124 4FF00000 		mov	r0, #0
 566 0128 FFF7FEFF 		bl	Period_Init
 291:../Generated_Code/Cpu.c ****   /* ### TimerUnit_LDD "CameraTimer" component auto initialization. Auto initialization feature can
 292:../Generated_Code/Cpu.c ****   (void)CameraTimer_Init(NULL);
 567              		.loc 1 292 0
 568 012c 4FF00000 		mov	r0, #0
 569 0130 FFF7FEFF 		bl	CameraTimer_Init
 293:../Generated_Code/Cpu.c ****   /* ### ADC_LDD "AD1" component auto initialization. Auto initialization feature can be disabled b
 294:../Generated_Code/Cpu.c ****   (void)AD1_Init(NULL);
 570              		.loc 1 294 0
 571 0134 4FF00000 		mov	r0, #0
 572 0138 FFF7FEFF 		bl	AD1_Init
 295:../Generated_Code/Cpu.c ****   /* ### Serial_LDD "AS1" component auto initialization. Auto initialization feature can be disable
 296:../Generated_Code/Cpu.c ****   (void)AS1_Init(NULL);
 573              		.loc 1 296 0
 574 013c 4FF00000 		mov	r0, #0
 575 0140 FFF7FEFF 		bl	AS1_Init
 297:../Generated_Code/Cpu.c ****   /* ### I2C_LDD "I2C2" component auto initialization. Auto initialization feature can be disabled 
 298:../Generated_Code/Cpu.c ****   (void)I2C2_Init(NULL);
 576              		.loc 1 298 0
 577 0144 4FF00000 		mov	r0, #0
 578 0148 FFF7FEFF 		bl	I2C2_Init
 299:../Generated_Code/Cpu.c ****   /* ### GPIO_LDD "GPIO2" component auto initialization. Auto initialization feature can be disable
 300:../Generated_Code/Cpu.c ****   (void)GPIO2_Init(NULL);
 579              		.loc 1 300 0
 580 014c 4FF00000 		mov	r0, #0
 581 0150 FFF7FEFF 		bl	GPIO2_Init
 301:../Generated_Code/Cpu.c ****   /* ### GPIO_LDD "GPIO3" component auto initialization. Auto initialization feature can be disable
 302:../Generated_Code/Cpu.c ****   (void)GPIO3_Init(NULL);
 582              		.loc 1 302 0
 583 0154 4FF00000 		mov	r0, #0
 584 0158 FFF7FEFF 		bl	GPIO3_Init
 303:../Generated_Code/Cpu.c ****   /* ### GPIO_LDD "SiPin" component auto initialization. Auto initialization feature can be disable
 304:../Generated_Code/Cpu.c ****   (void)SiPin_Init(NULL);
 585              		.loc 1 304 0
 586 015c 4FF00000 		mov	r0, #0
 587 0160 FFF7FEFF 		bl	SiPin_Init
 305:../Generated_Code/Cpu.c ****   /* ### TimerUnit_LDD "ServoTimer" component auto initialization. Auto initialization feature can 
 306:../Generated_Code/Cpu.c ****   (void)ServoTimer_Init(NULL);
 588              		.loc 1 306 0
 589 0164 4FF00000 		mov	r0, #0
 590 0168 FFF7FEFF 		bl	ServoTimer_Init
 307:../Generated_Code/Cpu.c ****   /* Enable interrupts of the given priority level */
 308:../Generated_Code/Cpu.c ****   Cpu_SetBASEPRI(0U);
 591              		.loc 1 308 0
 592 016c 4FF00000 		mov	r0, #0
 593 0170 FFF7FEFF 		bl	Cpu_SetBASEPRI
 309:../Generated_Code/Cpu.c **** }
 594              		.loc 1 309 0
 595 0174 80BD     		pop	{r7, pc}
 596              		.cfi_endproc
 597              	.LFE4:
 599              		.global	_cfm
 600 0176 00BF     		.section	.cfmconfig,"a",%progbits
 601              		.align	2
 604              	_cfm:
 605 0000 FF       		.byte	-1
 606 0001 FF       		.byte	-1
 607 0002 FF       		.byte	-1
 608 0003 FF       		.byte	-1
 609 0004 FF       		.byte	-1
 610 0005 FF       		.byte	-1
 611 0006 FF       		.byte	-1
 612 0007 FF       		.byte	-1
 613 0008 FF       		.byte	-1
 614 0009 FF       		.byte	-1
 615 000a FF       		.byte	-1
 616 000b FF       		.byte	-1
 617 000c 7E       		.byte	126
 618 000d FF       		.byte	-1
 619 000e FF       		.byte	-1
 620 000f FF       		.byte	-1
 621              		.text
 622              	.Letext0:
 623              		.file 2 "C:/Freescale/CW MCU v10.3_121211/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 624              		.file 3 "../Generated_Code/IO_Map.h"
 625              		.file 4 "../Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
                            *COM*:00000001 SR_reg
C:\Users\z\AppData\Local\Temp\ccS0Of1R.s:23     .bss.SR_lock:00000000 SR_lock
C:\Users\z\AppData\Local\Temp\ccS0Of1R.s:24     .bss.SR_lock:00000000 $d
C:\Users\z\AppData\Local\Temp\ccS0Of1R.s:26     .text.Cpu_INT_NMIInterrupt:00000000 $t
C:\Users\z\AppData\Local\Temp\ccS0Of1R.s:31     .text.Cpu_INT_NMIInterrupt:00000000 Cpu_INT_NMIInterrupt
C:\Users\z\AppData\Local\Temp\ccS0Of1R.s:64     .text.Cpu_Interrupt:00000000 $t
C:\Users\z\AppData\Local\Temp\ccS0Of1R.s:69     .text.Cpu_Interrupt:00000000 Cpu_Interrupt
C:\Users\z\AppData\Local\Temp\ccS0Of1R.s:103    .text.__init_hardware:00000000 $t
C:\Users\z\AppData\Local\Temp\ccS0Of1R.s:108    .text.__init_hardware:00000000 __init_hardware
C:\Users\z\AppData\Local\Temp\ccS0Of1R.s:408    .text.Cpu_SetBASEPRI:00000000 $t
C:\Users\z\AppData\Local\Temp\ccS0Of1R.s:413    .text.Cpu_SetBASEPRI:00000000 Cpu_SetBASEPRI
C:\Users\z\AppData\Local\Temp\ccS0Of1R.s:446    .text.PE_low_level_init:00000000 $t
C:\Users\z\AppData\Local\Temp\ccS0Of1R.s:451    .text.PE_low_level_init:00000000 PE_low_level_init
C:\Users\z\AppData\Local\Temp\ccS0Of1R.s:604    .cfmconfig:00000000 _cfm
C:\Users\z\AppData\Local\Temp\ccS0Of1R.s:601    .cfmconfig:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
Cpu_OnNMIINT0
__vect_table
PWMMotor_Init
GPIO1_Init
OdometryTimer_Init
OdometryGPIO_Init
IO1_Init
Period_Init
CameraTimer_Init
AD1_Init
AS1_Init
I2C2_Init
GPIO2_Init
GPIO3_Init
SiPin_Init
ServoTimer_Init
