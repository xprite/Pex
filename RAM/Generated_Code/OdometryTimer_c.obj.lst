   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"OdometryTimer.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  19              		.align	2
  22              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  23 0000 00000000 		.space	4
  24              		.section	.bss.INT_PIT0__DEFAULT_RTOS_ISRPARAM,"aw",%nobits
  25              		.align	2
  28              	INT_PIT0__DEFAULT_RTOS_ISRPARAM:
  29 0000 00000000 		.space	4
  30              		.section	.text.OdometryTimer_Init,"ax",%progbits
  31              		.align	2
  32              		.global	OdometryTimer_Init
  33              		.thumb
  34              		.thumb_func
  36              	OdometryTimer_Init:
  37              	.LFB0:
  38              		.file 1 "../Generated_Code/OdometryTimer.c"
   1:../Generated_Code/OdometryTimer.c **** /** ###################################################################
   2:../Generated_Code/OdometryTimer.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/OdometryTimer.c **** **     Filename    : OdometryTimer.c
   4:../Generated_Code/OdometryTimer.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/OdometryTimer.c **** **     Processor   : MK40DX256ZVLQ10
   6:../Generated_Code/OdometryTimer.c **** **     Component   : TimerUnit_LDD
   7:../Generated_Code/OdometryTimer.c **** **     Version     : Component 01.139, Driver 01.09, CPU db: 3.00.001
   8:../Generated_Code/OdometryTimer.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/OdometryTimer.c **** **     Date/Time   : 2013-04-13, 22:51, # CodeGen: 106
  10:../Generated_Code/OdometryTimer.c **** **     Abstract    :
  11:../Generated_Code/OdometryTimer.c **** **          This TimerUnit component provides a low level API for unified hardware access across
  12:../Generated_Code/OdometryTimer.c **** **          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
  13:../Generated_Code/OdometryTimer.c **** **     Settings    :
  14:../Generated_Code/OdometryTimer.c **** **          Component name                                 : OdometryTimer
  15:../Generated_Code/OdometryTimer.c **** **          Module name                                    : PIT
  16:../Generated_Code/OdometryTimer.c **** **          Counter                                        : PIT_CVAL0
  17:../Generated_Code/OdometryTimer.c **** **          Counter direction                              : Down
  18:../Generated_Code/OdometryTimer.c **** **          Counter width                                  : 32 bits
  19:../Generated_Code/OdometryTimer.c **** **          Value type                                     : Optimal
  20:../Generated_Code/OdometryTimer.c **** **          Input clock source                             : Internal
  21:../Generated_Code/OdometryTimer.c **** **            Counter frequency                            : 48 MHz
  22:../Generated_Code/OdometryTimer.c **** **          Counter restart                                : On-match
  23:../Generated_Code/OdometryTimer.c **** **            Period device                                : PIT_LDVAL0
  24:../Generated_Code/OdometryTimer.c **** **            Period                                       : 30 ms
  25:../Generated_Code/OdometryTimer.c **** **            Interrupt                                    : Enabled
  26:../Generated_Code/OdometryTimer.c **** **              Interrupt                                  : INT_PIT0
  27:../Generated_Code/OdometryTimer.c **** **              Interrupt priority                         : medium priority
  28:../Generated_Code/OdometryTimer.c **** **          Channel list                                   : 0
  29:../Generated_Code/OdometryTimer.c **** **          Initialization                                 : 
  30:../Generated_Code/OdometryTimer.c **** **            Enabled in init. code                        : yes
  31:../Generated_Code/OdometryTimer.c **** **            Auto initialization                          : yes
  32:../Generated_Code/OdometryTimer.c **** **            Event mask                                   : 
  33:../Generated_Code/OdometryTimer.c **** **              OnCounterRestart                           : Enabled
  34:../Generated_Code/OdometryTimer.c **** **              OnChannel0                                 : Disabled
  35:../Generated_Code/OdometryTimer.c **** **              OnChannel1                                 : Disabled
  36:../Generated_Code/OdometryTimer.c **** **              OnChannel2                                 : Disabled
  37:../Generated_Code/OdometryTimer.c **** **              OnChannel3                                 : Disabled
  38:../Generated_Code/OdometryTimer.c **** **              OnChannel4                                 : Disabled
  39:../Generated_Code/OdometryTimer.c **** **              OnChannel5                                 : Disabled
  40:../Generated_Code/OdometryTimer.c **** **              OnChannel6                                 : Disabled
  41:../Generated_Code/OdometryTimer.c **** **              OnChannel7                                 : Disabled
  42:../Generated_Code/OdometryTimer.c **** **          CPU clock/configuration selection              : 
  43:../Generated_Code/OdometryTimer.c **** **            Clock configuration 0                        : This component enabled
  44:../Generated_Code/OdometryTimer.c **** **            Clock configuration 1                        : This component disabled
  45:../Generated_Code/OdometryTimer.c **** **            Clock configuration 2                        : This component disabled
  46:../Generated_Code/OdometryTimer.c **** **            Clock configuration 3                        : This component disabled
  47:../Generated_Code/OdometryTimer.c **** **            Clock configuration 4                        : This component disabled
  48:../Generated_Code/OdometryTimer.c **** **            Clock configuration 5                        : This component disabled
  49:../Generated_Code/OdometryTimer.c **** **            Clock configuration 6                        : This component disabled
  50:../Generated_Code/OdometryTimer.c **** **            Clock configuration 7                        : This component disabled
  51:../Generated_Code/OdometryTimer.c **** **     Contents    :
  52:../Generated_Code/OdometryTimer.c **** **         Init         - LDD_TDeviceData* OdometryTimer_Init(LDD_TUserData *UserDataPtr);
  53:../Generated_Code/OdometryTimer.c **** **         Deinit       - void OdometryTimer_Deinit(LDD_TDeviceData *DeviceDataPtr);
  54:../Generated_Code/OdometryTimer.c **** **         ResetCounter - LDD_TError OdometryTimer_ResetCounter(LDD_TDeviceData *DeviceDataPtr);
  55:../Generated_Code/OdometryTimer.c **** **
  56:../Generated_Code/OdometryTimer.c **** **     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
  57:../Generated_Code/OdometryTimer.c **** **     
  58:../Generated_Code/OdometryTimer.c **** **     http      : www.freescale.com
  59:../Generated_Code/OdometryTimer.c **** **     mail      : support@freescale.com
  60:../Generated_Code/OdometryTimer.c **** ** ###################################################################*/
  61:../Generated_Code/OdometryTimer.c **** 
  62:../Generated_Code/OdometryTimer.c **** /* MODULE OdometryTimer. */
  63:../Generated_Code/OdometryTimer.c **** 
  64:../Generated_Code/OdometryTimer.c **** #include "Events.h"
  65:../Generated_Code/OdometryTimer.c **** #include "OdometryTimer.h"
  66:../Generated_Code/OdometryTimer.c **** /* {Default RTOS Adapter} No RTOS includes */
  67:../Generated_Code/OdometryTimer.c **** #include "IO_Map.h"
  68:../Generated_Code/OdometryTimer.c **** 
  69:../Generated_Code/OdometryTimer.c **** 
  70:../Generated_Code/OdometryTimer.c **** typedef struct {
  71:../Generated_Code/OdometryTimer.c ****   LDD_TUserData *UserDataPtr;          /* RTOS device data structure */
  72:../Generated_Code/OdometryTimer.c **** } OdometryTimer_TDeviceData;
  73:../Generated_Code/OdometryTimer.c **** 
  74:../Generated_Code/OdometryTimer.c **** typedef OdometryTimer_TDeviceData *OdometryTimer_TDeviceDataPtr; /* Pointer to the device data stru
  75:../Generated_Code/OdometryTimer.c **** 
  76:../Generated_Code/OdometryTimer.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
  77:../Generated_Code/OdometryTimer.c **** static OdometryTimer_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  78:../Generated_Code/OdometryTimer.c **** /* {Default RTOS Adapter} Global variable used for passing a parameter into ISR */
  79:../Generated_Code/OdometryTimer.c **** static OdometryTimer_TDeviceDataPtr INT_PIT0__DEFAULT_RTOS_ISRPARAM;
  80:../Generated_Code/OdometryTimer.c **** 
  81:../Generated_Code/OdometryTimer.c **** #define AVAILABLE_EVENTS_MASK (LDD_TEventMask)(LDD_TIMERUNIT_ON_COUNTER_RESTART)
  82:../Generated_Code/OdometryTimer.c **** 
  83:../Generated_Code/OdometryTimer.c **** /* Internal method prototypes */
  84:../Generated_Code/OdometryTimer.c **** /*
  85:../Generated_Code/OdometryTimer.c **** ** ===================================================================
  86:../Generated_Code/OdometryTimer.c **** **     Method      :  OdometryTimer_Init (component TimerUnit_LDD)
  87:../Generated_Code/OdometryTimer.c **** **
  88:../Generated_Code/OdometryTimer.c **** **     Description :
  89:../Generated_Code/OdometryTimer.c **** **         Initializes the device. Allocates memory for the device data
  90:../Generated_Code/OdometryTimer.c **** **         structure, allocates interrupt vectors and sets interrupt
  91:../Generated_Code/OdometryTimer.c **** **         priority, sets pin routing, sets timing, etc. If the
  92:../Generated_Code/OdometryTimer.c **** **         property <"Enable in init. code"> is set to "yes" value then
  93:../Generated_Code/OdometryTimer.c **** **         the device is also enabled (see the description of the
  94:../Generated_Code/OdometryTimer.c **** **         <Enable> method). In this case the <Enable> method is not
  95:../Generated_Code/OdometryTimer.c **** **         necessary and needn't to be generated. This method can be
  96:../Generated_Code/OdometryTimer.c **** **         called only once. Before the second call of Init the <Deinit>
  97:../Generated_Code/OdometryTimer.c **** **         must be called first.
  98:../Generated_Code/OdometryTimer.c **** **     Parameters  :
  99:../Generated_Code/OdometryTimer.c **** **         NAME            - DESCRIPTION
 100:../Generated_Code/OdometryTimer.c **** **       * UserDataPtr     - Pointer to the user or
 101:../Generated_Code/OdometryTimer.c **** **                           RTOS specific data. This pointer will be
 102:../Generated_Code/OdometryTimer.c **** **                           passed as an event or callback parameter.
 103:../Generated_Code/OdometryTimer.c **** **     Returns     :
 104:../Generated_Code/OdometryTimer.c **** **         ---             - Pointer to the dynamically allocated
 105:../Generated_Code/OdometryTimer.c **** **                           private structure or NULL if there was an
 106:../Generated_Code/OdometryTimer.c **** **                           error.
 107:../Generated_Code/OdometryTimer.c **** ** ===================================================================
 108:../Generated_Code/OdometryTimer.c **** */
 109:../Generated_Code/OdometryTimer.c **** LDD_TDeviceData* OdometryTimer_Init(LDD_TUserData *UserDataPtr)
 110:../Generated_Code/OdometryTimer.c **** {
  39              		.loc 1 110 0
  40              		.cfi_startproc
  41              		@ args = 0, pretend = 0, frame = 16
  42              		@ frame_needed = 1, uses_anonymous_args = 0
  43              		@ link register save eliminated.
  44 0000 80B4     		push	{r7}
  45              	.LCFI0:
  46              		.cfi_def_cfa_offset 4
  47              		.cfi_offset 7, -4
  48 0002 85B0     		sub	sp, sp, #20
  49              	.LCFI1:
  50              		.cfi_def_cfa_offset 24
  51 0004 00AF     		add	r7, sp, #0
  52              	.LCFI2:
  53              		.cfi_def_cfa_register 7
  54 0006 7860     		str	r0, [r7, #4]
 111:../Generated_Code/OdometryTimer.c ****   /* Allocate device structure */
 112:../Generated_Code/OdometryTimer.c ****   OdometryTimer_TDeviceData *DeviceDataPrv;
 113:../Generated_Code/OdometryTimer.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 114:../Generated_Code/OdometryTimer.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  55              		.loc 1 114 0
  56 0008 40F20003 		movw	r3, #:lower16:DeviceDataPrv__DEFAULT_RTOS_ALLOC
  57 000c C0F20003 		movt	r3, #:upper16:DeviceDataPrv__DEFAULT_RTOS_ALLOC
  58 0010 FB60     		str	r3, [r7, #12]
 115:../Generated_Code/OdometryTimer.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  59              		.loc 1 115 0
  60 0012 FB68     		ldr	r3, [r7, #12]
  61 0014 7A68     		ldr	r2, [r7, #4]
  62 0016 1A60     		str	r2, [r3, #0]
 116:../Generated_Code/OdometryTimer.c ****   /* Interrupt vector(s) allocation */
 117:../Generated_Code/OdometryTimer.c ****   /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the glo
 118:../Generated_Code/OdometryTimer.c ****   INT_PIT0__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
  63              		.loc 1 118 0
  64 0018 40F20003 		movw	r3, #:lower16:INT_PIT0__DEFAULT_RTOS_ISRPARAM
  65 001c C0F20003 		movt	r3, #:upper16:INT_PIT0__DEFAULT_RTOS_ISRPARAM
  66 0020 FA68     		ldr	r2, [r7, #12]
  67 0022 1A60     		str	r2, [r3, #0]
 119:../Generated_Code/OdometryTimer.c ****   /* SIM_SCGC6: PIT=1 */
 120:../Generated_Code/OdometryTimer.c ****   SIM_SCGC6 |= SIM_SCGC6_PIT_MASK;                                                   
  68              		.loc 1 120 0
  69 0024 4FF4E043 		mov	r3, #28672
  70 0028 C4F20403 		movt	r3, 16388
  71 002c 4FF4E042 		mov	r2, #28672
  72 0030 C4F20402 		movt	r2, 16388
  73 0034 02F58052 		add	r2, r2, #4096
  74 0038 02F13C02 		add	r2, r2, #60
  75 003c 1268     		ldr	r2, [r2, #0]
  76 003e 42F40002 		orr	r2, r2, #8388608
  77 0042 03F58053 		add	r3, r3, #4096
  78 0046 03F13C03 		add	r3, r3, #60
  79 004a 1A60     		str	r2, [r3, #0]
 121:../Generated_Code/OdometryTimer.c ****   /* PIT_MCR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,
 122:../Generated_Code/OdometryTimer.c ****   PIT_MCR = 0x00U;                     /* Enable device clock */
  80              		.loc 1 122 0
  81 004c 4FF4E043 		mov	r3, #28672
  82 0050 C4F20303 		movt	r3, 16387
  83 0054 4FF00002 		mov	r2, #0
  84 0058 1A60     		str	r2, [r3, #0]
 123:../Generated_Code/OdometryTimer.c ****   /* PIT_TCTRL0: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??
 124:../Generated_Code/OdometryTimer.c ****   PIT_TCTRL0 = 0x00U;                  /* Clear control register */
  85              		.loc 1 124 0
  86 005a 4FF4E043 		mov	r3, #28672
  87 005e C4F20303 		movt	r3, 16387
  88 0062 4FF00002 		mov	r2, #0
  89 0066 C3F80821 		str	r2, [r3, #264]
 125:../Generated_Code/OdometryTimer.c ****   /* PIT_TFLG0: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 126:../Generated_Code/OdometryTimer.c ****   PIT_TFLG0 = PIT_TFLG_TIF_MASK;       /* Clear timer flag register */
  90              		.loc 1 126 0
  91 006a 4FF4E043 		mov	r3, #28672
  92 006e C4F20303 		movt	r3, 16387
  93 0072 4FF00102 		mov	r2, #1
  94 0076 C3F80C21 		str	r2, [r3, #268]
 127:../Generated_Code/OdometryTimer.c ****   /* PIT_LDVAL0: TSV=0x0015F8FF */
 128:../Generated_Code/OdometryTimer.c ****   PIT_LDVAL0 = PIT_LDVAL_TSV(0x0015F8FF); /* Set up load register */
  95              		.loc 1 128 0
  96 007a 4FF4E043 		mov	r3, #28672
  97 007e C4F20303 		movt	r3, 16387
  98 0082 4FF6FF02 		movw	r2, #63743
  99 0086 C0F21502 		movt	r2, 21
 100 008a C3F80021 		str	r2, [r3, #256]
 129:../Generated_Code/OdometryTimer.c ****   /* NVICIP68: PRI68=0x80 */
 130:../Generated_Code/OdometryTimer.c ****   NVICIP68 = NVIC_IP_PRI68(0x80);                                                   
 101              		.loc 1 130 0
 102 008e 4FF46143 		mov	r3, #57600
 103 0092 CEF20003 		movt	r3, 57344
 104 0096 4FF08002 		mov	r2, #128
 105 009a 83F84423 		strb	r2, [r3, #836]
 131:../Generated_Code/OdometryTimer.c ****   /* NVICISER2: SETENA|=0x10 */
 132:../Generated_Code/OdometryTimer.c ****   NVICISER2 |= NVIC_ISER_SETENA(0x10);                                                   
 106              		.loc 1 132 0
 107 009e 4FF46143 		mov	r3, #57600
 108 00a2 CEF20003 		movt	r3, 57344
 109 00a6 4FF46142 		mov	r2, #57600
 110 00aa CEF20002 		movt	r2, 57344
 111 00ae 9268     		ldr	r2, [r2, #8]
 112 00b0 42F01002 		orr	r2, r2, #16
 113 00b4 9A60     		str	r2, [r3, #8]
 133:../Generated_Code/OdometryTimer.c ****   /* PIT_TCTRL0: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??
 134:../Generated_Code/OdometryTimer.c ****   PIT_TCTRL0 = (PIT_TCTRL_TIE_MASK | PIT_TCTRL_TEN_MASK); /* Set up control register */
 114              		.loc 1 134 0
 115 00b6 4FF4E043 		mov	r3, #28672
 116 00ba C4F20303 		movt	r3, 16387
 117 00be 4FF00302 		mov	r2, #3
 118 00c2 C3F80821 		str	r2, [r3, #264]
 135:../Generated_Code/OdometryTimer.c ****   /* Registration of the device structure */
 136:../Generated_Code/OdometryTimer.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_OdometryTimer_ID,DeviceDataPrv);
 119              		.loc 1 136 0
 120 00c6 40F20003 		movw	r3, #:lower16:PE_LDD_DeviceDataList
 121 00ca C0F20003 		movt	r3, #:upper16:PE_LDD_DeviceDataList
 122 00ce FA68     		ldr	r2, [r7, #12]
 123 00d0 9A60     		str	r2, [r3, #8]
 137:../Generated_Code/OdometryTimer.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
 124              		.loc 1 137 0
 125 00d2 FB68     		ldr	r3, [r7, #12]
 138:../Generated_Code/OdometryTimer.c **** }
 126              		.loc 1 138 0
 127 00d4 1846     		mov	r0, r3
 128 00d6 07F11407 		add	r7, r7, #20
 129 00da BD46     		mov	sp, r7
 130 00dc 80BC     		pop	{r7}
 131 00de 7047     		bx	lr
 132              		.cfi_endproc
 133              	.LFE0:
 135              		.section	.text.OdometryTimer_Deinit,"ax",%progbits
 136              		.align	2
 137              		.global	OdometryTimer_Deinit
 138              		.thumb
 139              		.thumb_func
 141              	OdometryTimer_Deinit:
 142              	.LFB1:
 139:../Generated_Code/OdometryTimer.c **** 
 140:../Generated_Code/OdometryTimer.c **** /*
 141:../Generated_Code/OdometryTimer.c **** ** ===================================================================
 142:../Generated_Code/OdometryTimer.c **** **     Method      :  OdometryTimer_Deinit (component TimerUnit_LDD)
 143:../Generated_Code/OdometryTimer.c **** **
 144:../Generated_Code/OdometryTimer.c **** **     Description :
 145:../Generated_Code/OdometryTimer.c **** **         Deinitializes the device. Switches off the device, frees the
 146:../Generated_Code/OdometryTimer.c **** **         device data structure memory, interrupts vectors, etc.
 147:../Generated_Code/OdometryTimer.c **** **     Parameters  :
 148:../Generated_Code/OdometryTimer.c **** **         NAME            - DESCRIPTION
 149:../Generated_Code/OdometryTimer.c **** **       * DeviceDataPtr   - Device data structure
 150:../Generated_Code/OdometryTimer.c **** **                           pointer returned by Init method
 151:../Generated_Code/OdometryTimer.c **** **     Returns     : Nothing
 152:../Generated_Code/OdometryTimer.c **** ** ===================================================================
 153:../Generated_Code/OdometryTimer.c **** */
 154:../Generated_Code/OdometryTimer.c **** void OdometryTimer_Deinit(LDD_TDeviceData *DeviceDataPtr)
 155:../Generated_Code/OdometryTimer.c **** {
 143              		.loc 1 155 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 16
 146              		@ frame_needed = 1, uses_anonymous_args = 0
 147              		@ link register save eliminated.
 148 0000 80B4     		push	{r7}
 149              	.LCFI3:
 150              		.cfi_def_cfa_offset 4
 151              		.cfi_offset 7, -4
 152 0002 85B0     		sub	sp, sp, #20
 153              	.LCFI4:
 154              		.cfi_def_cfa_offset 24
 155 0004 00AF     		add	r7, sp, #0
 156              	.LCFI5:
 157              		.cfi_def_cfa_register 7
 158 0006 7860     		str	r0, [r7, #4]
 156:../Generated_Code/OdometryTimer.c ****   OdometryTimer_TDeviceData *DeviceDataPrv = (OdometryTimer_TDeviceData *)DeviceDataPtr;
 159              		.loc 1 156 0
 160 0008 7B68     		ldr	r3, [r7, #4]
 161 000a FB60     		str	r3, [r7, #12]
 157:../Generated_Code/OdometryTimer.c **** 
 158:../Generated_Code/OdometryTimer.c ****   (void)DeviceDataPrv;
 159:../Generated_Code/OdometryTimer.c ****   PIT_PDD_EnableDevice(PIT_BASE_PTR, PIT_PDD_CHANNEL_0, PDD_DISABLE);
 162              		.loc 1 159 0
 163 000c 4FF4E043 		mov	r3, #28672
 164 0010 C4F20303 		movt	r3, 16387
 165 0014 4FF4E042 		mov	r2, #28672
 166 0018 C4F20302 		movt	r2, 16387
 167 001c D2F80821 		ldr	r2, [r2, #264]
 168 0020 22F00102 		bic	r2, r2, #1
 169 0024 C3F80821 		str	r2, [r3, #264]
 160:../Generated_Code/OdometryTimer.c ****   /* Interrupt vector(s) deallocation */
 161:../Generated_Code/OdometryTimer.c ****   /* {Default RTOS Adapter} Restore interrupt vector: IVT is static, no code is generated */
 162:../Generated_Code/OdometryTimer.c ****   PIT_PDD_ModuleClock(PIT_BASE_PTR, PIT_PDD_CLOCK_DISABLED);
 170              		.loc 1 162 0
 171 0028 4FF4E043 		mov	r3, #28672
 172 002c C4F20303 		movt	r3, 16387
 173 0030 4FF4E042 		mov	r2, #28672
 174 0034 C4F20302 		movt	r2, 16387
 175 0038 1268     		ldr	r2, [r2, #0]
 176 003a 42F00202 		orr	r2, r2, #2
 177 003e 1A60     		str	r2, [r3, #0]
 163:../Generated_Code/OdometryTimer.c ****   /* Unregistration of the device structure */
 164:../Generated_Code/OdometryTimer.c ****   PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_OdometryTimer_ID);
 178              		.loc 1 164 0
 179 0040 40F20003 		movw	r3, #:lower16:PE_LDD_DeviceDataList
 180 0044 C0F20003 		movt	r3, #:upper16:PE_LDD_DeviceDataList
 181 0048 4FF00002 		mov	r2, #0
 182 004c 9A60     		str	r2, [r3, #8]
 165:../Generated_Code/OdometryTimer.c ****   /* Deallocation of the device structure */
 166:../Generated_Code/OdometryTimer.c ****   /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 167:../Generated_Code/OdometryTimer.c **** }
 183              		.loc 1 167 0
 184 004e 07F11407 		add	r7, r7, #20
 185 0052 BD46     		mov	sp, r7
 186 0054 80BC     		pop	{r7}
 187 0056 7047     		bx	lr
 188              		.cfi_endproc
 189              	.LFE1:
 191              		.section	.text.OdometryTimer_ResetCounter,"ax",%progbits
 192              		.align	2
 193              		.global	OdometryTimer_ResetCounter
 194              		.thumb
 195              		.thumb_func
 197              	OdometryTimer_ResetCounter:
 198              	.LFB2:
 168:../Generated_Code/OdometryTimer.c **** 
 169:../Generated_Code/OdometryTimer.c **** /*
 170:../Generated_Code/OdometryTimer.c **** ** ===================================================================
 171:../Generated_Code/OdometryTimer.c **** **     Method      :  OdometryTimer_ResetCounter (component TimerUnit_LDD)
 172:../Generated_Code/OdometryTimer.c **** **
 173:../Generated_Code/OdometryTimer.c **** **     Description :
 174:../Generated_Code/OdometryTimer.c **** **         Resets counter. If counter is counting up then it is set to
 175:../Generated_Code/OdometryTimer.c **** **         zero. If counter is counting down then counter is updated to
 176:../Generated_Code/OdometryTimer.c **** **         the reload value.
 177:../Generated_Code/OdometryTimer.c **** **         The method is not available if HW doesn't allow resetting of
 178:../Generated_Code/OdometryTimer.c **** **         the counter.
 179:../Generated_Code/OdometryTimer.c **** **     Parameters  :
 180:../Generated_Code/OdometryTimer.c **** **         NAME            - DESCRIPTION
 181:../Generated_Code/OdometryTimer.c **** **       * DeviceDataPtr   - Device data structure
 182:../Generated_Code/OdometryTimer.c **** **                           pointer returned by <Init> method.
 183:../Generated_Code/OdometryTimer.c **** **     Returns     :
 184:../Generated_Code/OdometryTimer.c **** **         ---             - Error code, possible codes:
 185:../Generated_Code/OdometryTimer.c **** **                           ERR_OK - OK 
 186:../Generated_Code/OdometryTimer.c **** **                           ERR_SPEED - The component does not work in
 187:../Generated_Code/OdometryTimer.c **** **                           the active clock configuration
 188:../Generated_Code/OdometryTimer.c **** ** ===================================================================
 189:../Generated_Code/OdometryTimer.c **** */
 190:../Generated_Code/OdometryTimer.c **** LDD_TError OdometryTimer_ResetCounter(LDD_TDeviceData *DeviceDataPtr)
 191:../Generated_Code/OdometryTimer.c **** {
 199              		.loc 1 191 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 8
 202              		@ frame_needed = 1, uses_anonymous_args = 0
 203              		@ link register save eliminated.
 204 0000 80B4     		push	{r7}
 205              	.LCFI6:
 206              		.cfi_def_cfa_offset 4
 207              		.cfi_offset 7, -4
 208 0002 83B0     		sub	sp, sp, #12
 209              	.LCFI7:
 210              		.cfi_def_cfa_offset 16
 211 0004 00AF     		add	r7, sp, #0
 212              	.LCFI8:
 213              		.cfi_def_cfa_register 7
 214 0006 7860     		str	r0, [r7, #4]
 192:../Generated_Code/OdometryTimer.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 193:../Generated_Code/OdometryTimer.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 194:../Generated_Code/OdometryTimer.c ****   EnterCritical();
 215              		.loc 1 194 0
 216 0008 40F20003 		movw	r3, #:lower16:SR_lock
 217 000c C0F20003 		movt	r3, #:upper16:SR_lock
 218 0010 1B78     		ldrb	r3, [r3, #0]
 219 0012 DBB2     		uxtb	r3, r3
 220 0014 03F10103 		add	r3, r3, #1
 221 0018 DBB2     		uxtb	r3, r3
 222 001a 1A46     		mov	r2, r3
 223 001c 40F20003 		movw	r3, #:lower16:SR_lock
 224 0020 C0F20003 		movt	r3, #:upper16:SR_lock
 225 0024 1146     		mov	r1, r2
 226 0026 1970     		strb	r1, [r3, #0]
 227 0028 012A     		cmp	r2, #1
 228 002a 07D1     		bne	.L4
 229              		.loc 1 194 0 is_stmt 0 discriminator 1
 230 002c 40F20003 		movw	r3, #:lower16:SR_reg
 231 0030 C0F20003 		movt	r3, #:upper16:SR_reg
 232              	@ 194 "../Generated_Code/OdometryTimer.c" 1
 233 0034 EFF31380 		MRS R0, FAULTMASK
 234 0038 71B6     		CPSID f
 235 003a 1870     		STRB R0, [r3, #0]
 236              	@ 0 "" 2
 237              		.thumb
 238              	.L4:
 195:../Generated_Code/OdometryTimer.c ****   if ((PIT_PDD_GetEnableDeviceStatus(PIT_BASE_PTR, PIT_PDD_CHANNEL_0)) != 0U) {
 239              		.loc 1 195 0 is_stmt 1
 240 003c 4FF4E043 		mov	r3, #28672
 241 0040 C4F20303 		movt	r3, 16387
 242 0044 D3F80831 		ldr	r3, [r3, #264]
 243 0048 03F00103 		and	r3, r3, #1
 244 004c DBB2     		uxtb	r3, r3
 245 004e 002B     		cmp	r3, #0
 246 0050 1BD0     		beq	.L5
 196:../Generated_Code/OdometryTimer.c ****     PIT_PDD_EnableDevice(PIT_BASE_PTR, PIT_PDD_CHANNEL_0, PDD_DISABLE);
 247              		.loc 1 196 0
 248 0052 4FF4E043 		mov	r3, #28672
 249 0056 C4F20303 		movt	r3, 16387
 250 005a 4FF4E042 		mov	r2, #28672
 251 005e C4F20302 		movt	r2, 16387
 252 0062 D2F80821 		ldr	r2, [r2, #264]
 253 0066 22F00102 		bic	r2, r2, #1
 254 006a C3F80821 		str	r2, [r3, #264]
 197:../Generated_Code/OdometryTimer.c ****     PIT_PDD_EnableDevice(PIT_BASE_PTR, PIT_PDD_CHANNEL_0, PDD_ENABLE);
 255              		.loc 1 197 0
 256 006e 4FF4E043 		mov	r3, #28672
 257 0072 C4F20303 		movt	r3, 16387
 258 0076 4FF4E042 		mov	r2, #28672
 259 007a C4F20302 		movt	r2, 16387
 260 007e D2F80821 		ldr	r2, [r2, #264]
 261 0082 42F00102 		orr	r2, r2, #1
 262 0086 C3F80821 		str	r2, [r3, #264]
 263              	.L5:
 198:../Generated_Code/OdometryTimer.c ****   }
 199:../Generated_Code/OdometryTimer.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 200:../Generated_Code/OdometryTimer.c ****   ExitCritical();
 264              		.loc 1 200 0
 265 008a 40F20003 		movw	r3, #:lower16:SR_lock
 266 008e C0F20003 		movt	r3, #:upper16:SR_lock
 267 0092 1B78     		ldrb	r3, [r3, #0]
 268 0094 DBB2     		uxtb	r3, r3
 269 0096 03F1FF33 		add	r3, r3, #-1
 270 009a DBB2     		uxtb	r3, r3
 271 009c 1A46     		mov	r2, r3
 272 009e 40F20003 		movw	r3, #:lower16:SR_lock
 273 00a2 C0F20003 		movt	r3, #:upper16:SR_lock
 274 00a6 1146     		mov	r1, r2
 275 00a8 1970     		strb	r1, [r3, #0]
 276 00aa 002A     		cmp	r2, #0
 277 00ac 06D1     		bne	.L6
 278              		.loc 1 200 0 is_stmt 0 discriminator 1
 279 00ae 40F20003 		movw	r3, #:lower16:SR_reg
 280 00b2 C0F20003 		movt	r3, #:upper16:SR_reg
 281              	@ 200 "../Generated_Code/OdometryTimer.c" 1
 282 00b6 1878     		ldrb r0, [r3, #0]
 283 00b8 80F31388 		msr FAULTMASK,r0;
 284              		
 285              	@ 0 "" 2
 286              		.thumb
 287              	.L6:
 201:../Generated_Code/OdometryTimer.c ****   return ERR_OK;                       /* OK */
 288              		.loc 1 201 0 is_stmt 1
 289 00bc 4FF00003 		mov	r3, #0
 202:../Generated_Code/OdometryTimer.c **** }
 290              		.loc 1 202 0
 291 00c0 1846     		mov	r0, r3
 292 00c2 07F10C07 		add	r7, r7, #12
 293 00c6 BD46     		mov	sp, r7
 294 00c8 80BC     		pop	{r7}
 295 00ca 7047     		bx	lr
 296              		.cfi_endproc
 297              	.LFE2:
 299              		.section	.text.OdometryTimer_Interrupt,"ax",%progbits
 300              		.align	2
 301              		.global	OdometryTimer_Interrupt
 302              		.thumb
 303              		.thumb_func
 305              	OdometryTimer_Interrupt:
 306              	.LFB3:
 203:../Generated_Code/OdometryTimer.c **** 
 204:../Generated_Code/OdometryTimer.c **** /*
 205:../Generated_Code/OdometryTimer.c **** ** ===================================================================
 206:../Generated_Code/OdometryTimer.c **** **     Method      :  OdometryTimer_Interrupt (component TimerUnit_LDD)
 207:../Generated_Code/OdometryTimer.c **** **
 208:../Generated_Code/OdometryTimer.c **** **     Description :
 209:../Generated_Code/OdometryTimer.c **** **         The method services the interrupt of the selected peripheral(s)
 210:../Generated_Code/OdometryTimer.c **** **         and eventually invokes event(s) of the component.
 211:../Generated_Code/OdometryTimer.c **** **         This method is internal. It is used by Processor Expert only.
 212:../Generated_Code/OdometryTimer.c **** ** ===================================================================
 213:../Generated_Code/OdometryTimer.c **** */
 214:../Generated_Code/OdometryTimer.c **** PE_ISR(OdometryTimer_Interrupt)
 215:../Generated_Code/OdometryTimer.c **** {
 307              		.loc 1 215 0
 308              		.cfi_startproc
 309              		@ Stack Align: May be called with mis-aligned SP.
 310              		@ args = 0, pretend = 0, frame = 8
 311              		@ frame_needed = 1, uses_anonymous_args = 0
 312 0000 6846     		mov	r0, sp
 313              		.cfi_register 13, 0
 314 0002 20F00701 		bic	r1, r0, #7
 315 0006 8D46     		mov	sp, r1
 316 0008 81B5     		push	{r0, r7, lr}
 317              	.LCFI9:
 318              		.cfi_def_cfa_offset 12
 319              		.cfi_offset 14, -4
 320              		.cfi_offset 7, -8
 321              		.cfi_offset 13, -12
 322 000a 83B0     		sub	sp, sp, #12
 323              	.LCFI10:
 324              		.cfi_def_cfa_offset 24
 325 000c 00AF     		add	r7, sp, #0
 326              	.LCFI11:
 327              		.cfi_def_cfa_register 7
 216:../Generated_Code/OdometryTimer.c ****   /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
 217:../Generated_Code/OdometryTimer.c ****   OdometryTimer_TDeviceDataPtr DeviceDataPrv = INT_PIT0__DEFAULT_RTOS_ISRPARAM;
 328              		.loc 1 217 0
 329 000e 40F20003 		movw	r3, #:lower16:INT_PIT0__DEFAULT_RTOS_ISRPARAM
 330 0012 C0F20003 		movt	r3, #:upper16:INT_PIT0__DEFAULT_RTOS_ISRPARAM
 331 0016 1B68     		ldr	r3, [r3, #0]
 332 0018 7B60     		str	r3, [r7, #4]
 218:../Generated_Code/OdometryTimer.c **** 
 219:../Generated_Code/OdometryTimer.c ****   PIT_PDD_ClearInterruptFlag(PIT_BASE_PTR, PIT_PDD_CHANNEL_0); /* Clear interrupt flag */
 333              		.loc 1 219 0
 334 001a 4FF4E043 		mov	r3, #28672
 335 001e C4F20303 		movt	r3, 16387
 336 0022 4FF00102 		mov	r2, #1
 337 0026 C3F80C21 		str	r2, [r3, #268]
 338 002a 4FF4E043 		mov	r3, #28672
 339 002e C4F20303 		movt	r3, 16387
 340 0032 D3F80031 		ldr	r3, [r3, #256]
 220:../Generated_Code/OdometryTimer.c ****   OdometryTimer_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
 341              		.loc 1 220 0
 342 0036 7B68     		ldr	r3, [r7, #4]
 343 0038 1B68     		ldr	r3, [r3, #0]
 344 003a 1846     		mov	r0, r3
 345 003c FFF7FEFF 		bl	OdometryTimer_OnCounterRestart
 221:../Generated_Code/OdometryTimer.c **** }
 346              		.loc 1 221 0
 347 0040 07F10C07 		add	r7, r7, #12
 348 0044 BD46     		mov	sp, r7
 349 0046 BDE88140 		pop	{r0, r7, lr}
 350 004a 8546     		mov	sp, r0
 351 004c 7047     		bx	lr
 352              		.cfi_endproc
 353              	.LFE3:
 355 004e 00BF     		.text
 356              	.Letext0:
 357              		.file 2 "C:/Freescale/CW MCU v10.3_121211/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 358              		.file 3 "C:/temp2/Pex/Generated_Code/IO_Map.h"
 359              		.file 4 "C:/temp2/Pex/Generated_Code/PE_LDD.h"
 360              		.file 5 "C:/temp2/Pex/Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 OdometryTimer.c
C:\Users\z\AppData\Local\Temp\ccp5ALlk.s:19     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\z\AppData\Local\Temp\ccp5ALlk.s:22     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\z\AppData\Local\Temp\ccp5ALlk.s:25     .bss.INT_PIT0__DEFAULT_RTOS_ISRPARAM:00000000 $d
C:\Users\z\AppData\Local\Temp\ccp5ALlk.s:28     .bss.INT_PIT0__DEFAULT_RTOS_ISRPARAM:00000000 INT_PIT0__DEFAULT_RTOS_ISRPARAM
C:\Users\z\AppData\Local\Temp\ccp5ALlk.s:31     .text.OdometryTimer_Init:00000000 $t
C:\Users\z\AppData\Local\Temp\ccp5ALlk.s:36     .text.OdometryTimer_Init:00000000 OdometryTimer_Init
C:\Users\z\AppData\Local\Temp\ccp5ALlk.s:136    .text.OdometryTimer_Deinit:00000000 $t
C:\Users\z\AppData\Local\Temp\ccp5ALlk.s:141    .text.OdometryTimer_Deinit:00000000 OdometryTimer_Deinit
C:\Users\z\AppData\Local\Temp\ccp5ALlk.s:192    .text.OdometryTimer_ResetCounter:00000000 $t
C:\Users\z\AppData\Local\Temp\ccp5ALlk.s:197    .text.OdometryTimer_ResetCounter:00000000 OdometryTimer_ResetCounter
C:\Users\z\AppData\Local\Temp\ccp5ALlk.s:300    .text.OdometryTimer_Interrupt:00000000 $t
C:\Users\z\AppData\Local\Temp\ccp5ALlk.s:305    .text.OdometryTimer_Interrupt:00000000 OdometryTimer_Interrupt
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
SR_lock
SR_reg
OdometryTimer_OnCounterRestart
