   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"PWMMotor.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata.ChannelDevice,"a",%progbits
  19              		.align	2
  22              	ChannelDevice:
  23 0000 00       		.byte	0
  24 0001 03       		.byte	3
  25 0002 0000     		.section	.rodata.ChannelMode,"a",%progbits
  26              		.align	2
  29              	ChannelMode:
  30 0000 0000     		.space	2
  31 0002 0000     		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  32              		.align	2
  35              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  36 0000 00000000 		.space	8
  36      00000000 
  37              		.section	.bss.INT_FTM0__DEFAULT_RTOS_ISRPARAM,"aw",%nobits
  38              		.align	2
  41              	INT_FTM0__DEFAULT_RTOS_ISRPARAM:
  42 0000 00000000 		.space	4
  43              		.section	.text.PWMMotor_Init,"ax",%progbits
  44              		.align	2
  45              		.global	PWMMotor_Init
  46              		.thumb
  47              		.thumb_func
  49              	PWMMotor_Init:
  50              	.LFB0:
  51              		.file 1 "../Generated_Code/PWMMotor.c"
   1:../Generated_Code/PWMMotor.c **** /** ###################################################################
   2:../Generated_Code/PWMMotor.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/PWMMotor.c **** **     Filename    : PWMMotor.c
   4:../Generated_Code/PWMMotor.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/PWMMotor.c **** **     Processor   : MK40DX256ZVLQ10
   6:../Generated_Code/PWMMotor.c **** **     Component   : TimerUnit_LDD
   7:../Generated_Code/PWMMotor.c **** **     Version     : Component 01.139, Driver 01.09, CPU db: 3.00.001
   8:../Generated_Code/PWMMotor.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/PWMMotor.c **** **     Date/Time   : 2013-04-11, 15:40, # CodeGen: 91
  10:../Generated_Code/PWMMotor.c **** **     Abstract    :
  11:../Generated_Code/PWMMotor.c **** **          This TimerUnit component provides a low level API for unified hardware access across
  12:../Generated_Code/PWMMotor.c **** **          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
  13:../Generated_Code/PWMMotor.c **** **     Settings    :
  14:../Generated_Code/PWMMotor.c **** **          Component name                                 : PWMMotor
  15:../Generated_Code/PWMMotor.c **** **          Module name                                    : FTM0
  16:../Generated_Code/PWMMotor.c **** **          Counter                                        : FTM0_CNT
  17:../Generated_Code/PWMMotor.c **** **          Counter direction                              : Up
  18:../Generated_Code/PWMMotor.c **** **          Counter width                                  : 16 bits
  19:../Generated_Code/PWMMotor.c **** **          Value type                                     : Optimal
  20:../Generated_Code/PWMMotor.c **** **          Input clock source                             : Internal
  21:../Generated_Code/PWMMotor.c **** **            Counter frequency                            : 48 MHz
  22:../Generated_Code/PWMMotor.c **** **          Counter restart                                : On-match
  23:../Generated_Code/PWMMotor.c **** **            Period device                                : FTM0_MOD
  24:../Generated_Code/PWMMotor.c **** **            Period                                       : 5001 timer-ticks
  25:../Generated_Code/PWMMotor.c **** **            Interrupt                                    : Enabled
  26:../Generated_Code/PWMMotor.c **** **              Interrupt                                  : INT_FTM0
  27:../Generated_Code/PWMMotor.c **** **              Interrupt priority                         : medium priority
  28:../Generated_Code/PWMMotor.c **** **          Channel list                                   : 2
  29:../Generated_Code/PWMMotor.c **** **            Channel 0                                    : 
  30:../Generated_Code/PWMMotor.c **** **              Mode                                       : Compare
  31:../Generated_Code/PWMMotor.c **** **                Compare                                  : FTM0_C0V
  32:../Generated_Code/PWMMotor.c **** **                Offset                                   : 1000 timer-ticks
  33:../Generated_Code/PWMMotor.c **** **                Output on compare                        : Set
  34:../Generated_Code/PWMMotor.c **** **                  Output on overrun                      : Clear
  35:../Generated_Code/PWMMotor.c **** **                  Initial state                          : Low
  36:../Generated_Code/PWMMotor.c **** **                  Output pin                             : PTC1/SPI0_PCS3/UART1_RTS_b/FTM0_CH0/LC
  37:../Generated_Code/PWMMotor.c **** **                  Output pin signal                      : 
  38:../Generated_Code/PWMMotor.c **** **                Interrupt                                : Disabled
  39:../Generated_Code/PWMMotor.c **** **            Channel 1                                    : 
  40:../Generated_Code/PWMMotor.c **** **              Mode                                       : Compare
  41:../Generated_Code/PWMMotor.c **** **                Compare                                  : FTM0_C3V
  42:../Generated_Code/PWMMotor.c **** **                Offset                                   : 1000 timer-ticks
  43:../Generated_Code/PWMMotor.c **** **                Output on compare                        : Set
  44:../Generated_Code/PWMMotor.c **** **                  Output on overrun                      : Clear
  45:../Generated_Code/PWMMotor.c **** **                  Initial state                          : Low
  46:../Generated_Code/PWMMotor.c **** **                  Output pin                             : PTC4/SPI0_PCS0/UART1_TX/FTM0_CH3/CMP1_
  47:../Generated_Code/PWMMotor.c **** **                  Output pin signal                      : 
  48:../Generated_Code/PWMMotor.c **** **                Interrupt                                : Disabled
  49:../Generated_Code/PWMMotor.c **** **          Initialization                                 : 
  50:../Generated_Code/PWMMotor.c **** **            Enabled in init. code                        : yes
  51:../Generated_Code/PWMMotor.c **** **            Auto initialization                          : yes
  52:../Generated_Code/PWMMotor.c **** **            Event mask                                   : 
  53:../Generated_Code/PWMMotor.c **** **              OnCounterRestart                           : Enabled
  54:../Generated_Code/PWMMotor.c **** **              OnChannel0                                 : Disabled
  55:../Generated_Code/PWMMotor.c **** **              OnChannel1                                 : Disabled
  56:../Generated_Code/PWMMotor.c **** **              OnChannel2                                 : Disabled
  57:../Generated_Code/PWMMotor.c **** **              OnChannel3                                 : Disabled
  58:../Generated_Code/PWMMotor.c **** **              OnChannel4                                 : Disabled
  59:../Generated_Code/PWMMotor.c **** **              OnChannel5                                 : Disabled
  60:../Generated_Code/PWMMotor.c **** **              OnChannel6                                 : Disabled
  61:../Generated_Code/PWMMotor.c **** **              OnChannel7                                 : Disabled
  62:../Generated_Code/PWMMotor.c **** **          CPU clock/configuration selection              : 
  63:../Generated_Code/PWMMotor.c **** **            Clock configuration 0                        : This component enabled
  64:../Generated_Code/PWMMotor.c **** **            Clock configuration 1                        : This component disabled
  65:../Generated_Code/PWMMotor.c **** **            Clock configuration 2                        : This component disabled
  66:../Generated_Code/PWMMotor.c **** **            Clock configuration 3                        : This component disabled
  67:../Generated_Code/PWMMotor.c **** **            Clock configuration 4                        : This component disabled
  68:../Generated_Code/PWMMotor.c **** **            Clock configuration 5                        : This component disabled
  69:../Generated_Code/PWMMotor.c **** **            Clock configuration 6                        : This component disabled
  70:../Generated_Code/PWMMotor.c **** **            Clock configuration 7                        : This component disabled
  71:../Generated_Code/PWMMotor.c **** **     Contents    :
  72:../Generated_Code/PWMMotor.c **** **         Init           - LDD_TDeviceData* PWMMotor_Init(LDD_TUserData *UserDataPtr);
  73:../Generated_Code/PWMMotor.c **** **         Deinit         - void PWMMotor_Deinit(LDD_TDeviceData *DeviceDataPtr);
  74:../Generated_Code/PWMMotor.c **** **         SetOffsetTicks - LDD_TError PWMMotor_SetOffsetTicks(LDD_TDeviceData *DeviceDataPtr, uint
  75:../Generated_Code/PWMMotor.c **** **
  76:../Generated_Code/PWMMotor.c **** **     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
  77:../Generated_Code/PWMMotor.c **** **     
  78:../Generated_Code/PWMMotor.c **** **     http      : www.freescale.com
  79:../Generated_Code/PWMMotor.c **** **     mail      : support@freescale.com
  80:../Generated_Code/PWMMotor.c **** ** ###################################################################*/
  81:../Generated_Code/PWMMotor.c **** 
  82:../Generated_Code/PWMMotor.c **** /* MODULE PWMMotor. */
  83:../Generated_Code/PWMMotor.c **** 
  84:../Generated_Code/PWMMotor.c **** #include "Events.h"
  85:../Generated_Code/PWMMotor.c **** #include "PWMMotor.h"
  86:../Generated_Code/PWMMotor.c **** /* {Default RTOS Adapter} No RTOS includes */
  87:../Generated_Code/PWMMotor.c **** #include "IO_Map.h"
  88:../Generated_Code/PWMMotor.c **** 
  89:../Generated_Code/PWMMotor.c **** /* List of channels used by component */
  90:../Generated_Code/PWMMotor.c **** static const uint8_t ChannelDevice[PWMMotor_NUMBER_OF_CHANNELS] = {0x00U,0x03U};
  91:../Generated_Code/PWMMotor.c **** 
  92:../Generated_Code/PWMMotor.c **** /* Table of channels mode / 0 - compare mode, 1 - capture mode */
  93:../Generated_Code/PWMMotor.c **** static const uint8_t ChannelMode[PWMMotor_NUMBER_OF_CHANNELS] = {0x00U,0x00U};
  94:../Generated_Code/PWMMotor.c **** 
  95:../Generated_Code/PWMMotor.c **** 
  96:../Generated_Code/PWMMotor.c **** typedef struct {
  97:../Generated_Code/PWMMotor.c ****   LDD_TEventMask EnEvents;             /* Enable/Disable events mask */
  98:../Generated_Code/PWMMotor.c ****   LDD_TUserData *UserDataPtr;          /* RTOS device data structure */
  99:../Generated_Code/PWMMotor.c **** } PWMMotor_TDeviceData;
 100:../Generated_Code/PWMMotor.c **** 
 101:../Generated_Code/PWMMotor.c **** typedef PWMMotor_TDeviceData *PWMMotor_TDeviceDataPtr; /* Pointer to the device data structure. */
 102:../Generated_Code/PWMMotor.c **** 
 103:../Generated_Code/PWMMotor.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
 104:../Generated_Code/PWMMotor.c **** static PWMMotor_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 105:../Generated_Code/PWMMotor.c **** /* {Default RTOS Adapter} Global variable used for passing a parameter into ISR */
 106:../Generated_Code/PWMMotor.c **** static PWMMotor_TDeviceDataPtr INT_FTM0__DEFAULT_RTOS_ISRPARAM;
 107:../Generated_Code/PWMMotor.c **** 
 108:../Generated_Code/PWMMotor.c **** #define AVAILABLE_EVENTS_MASK (LDD_TEventMask)(LDD_TIMERUNIT_ON_COUNTER_RESTART)
 109:../Generated_Code/PWMMotor.c **** #define AVAILABLE_PIN_MASK (LDD_TPinMask)(PWMMotor_CHANNEL_0_PIN | PWMMotor_CHANNEL_1_PIN)
 110:../Generated_Code/PWMMotor.c **** #define LAST_CHANNEL 0x01U
 111:../Generated_Code/PWMMotor.c **** 
 112:../Generated_Code/PWMMotor.c **** /* Internal method prototypes */
 113:../Generated_Code/PWMMotor.c **** /*
 114:../Generated_Code/PWMMotor.c **** ** ===================================================================
 115:../Generated_Code/PWMMotor.c **** **     Method      :  PWMMotor_Init (component TimerUnit_LDD)
 116:../Generated_Code/PWMMotor.c **** **
 117:../Generated_Code/PWMMotor.c **** **     Description :
 118:../Generated_Code/PWMMotor.c **** **         Initializes the device. Allocates memory for the device data
 119:../Generated_Code/PWMMotor.c **** **         structure, allocates interrupt vectors and sets interrupt
 120:../Generated_Code/PWMMotor.c **** **         priority, sets pin routing, sets timing, etc. If the
 121:../Generated_Code/PWMMotor.c **** **         property <"Enable in init. code"> is set to "yes" value then
 122:../Generated_Code/PWMMotor.c **** **         the device is also enabled (see the description of the
 123:../Generated_Code/PWMMotor.c **** **         <Enable> method). In this case the <Enable> method is not
 124:../Generated_Code/PWMMotor.c **** **         necessary and needn't to be generated. This method can be
 125:../Generated_Code/PWMMotor.c **** **         called only once. Before the second call of Init the <Deinit>
 126:../Generated_Code/PWMMotor.c **** **         must be called first.
 127:../Generated_Code/PWMMotor.c **** **     Parameters  :
 128:../Generated_Code/PWMMotor.c **** **         NAME            - DESCRIPTION
 129:../Generated_Code/PWMMotor.c **** **       * UserDataPtr     - Pointer to the user or
 130:../Generated_Code/PWMMotor.c **** **                           RTOS specific data. This pointer will be
 131:../Generated_Code/PWMMotor.c **** **                           passed as an event or callback parameter.
 132:../Generated_Code/PWMMotor.c **** **     Returns     :
 133:../Generated_Code/PWMMotor.c **** **         ---             - Pointer to the dynamically allocated
 134:../Generated_Code/PWMMotor.c **** **                           private structure or NULL if there was an
 135:../Generated_Code/PWMMotor.c **** **                           error.
 136:../Generated_Code/PWMMotor.c **** ** ===================================================================
 137:../Generated_Code/PWMMotor.c **** */
 138:../Generated_Code/PWMMotor.c **** LDD_TDeviceData* PWMMotor_Init(LDD_TUserData *UserDataPtr)
 139:../Generated_Code/PWMMotor.c **** {
  52              		.loc 1 139 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 16
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57 0000 80B4     		push	{r7}
  58              	.LCFI0:
  59              		.cfi_def_cfa_offset 4
  60              		.cfi_offset 7, -4
  61 0002 85B0     		sub	sp, sp, #20
  62              	.LCFI1:
  63              		.cfi_def_cfa_offset 24
  64 0004 00AF     		add	r7, sp, #0
  65              	.LCFI2:
  66              		.cfi_def_cfa_register 7
  67 0006 7860     		str	r0, [r7, #4]
 140:../Generated_Code/PWMMotor.c ****   /* Allocate device structure */
 141:../Generated_Code/PWMMotor.c ****   PWMMotor_TDeviceData *DeviceDataPrv;
 142:../Generated_Code/PWMMotor.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 143:../Generated_Code/PWMMotor.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  68              		.loc 1 143 0
  69 0008 40F20003 		movw	r3, #:lower16:DeviceDataPrv__DEFAULT_RTOS_ALLOC
  70 000c C0F20003 		movt	r3, #:upper16:DeviceDataPrv__DEFAULT_RTOS_ALLOC
  71 0010 FB60     		str	r3, [r7, #12]
 144:../Generated_Code/PWMMotor.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  72              		.loc 1 144 0
  73 0012 FB68     		ldr	r3, [r7, #12]
  74 0014 7A68     		ldr	r2, [r7, #4]
  75 0016 5A60     		str	r2, [r3, #4]
 145:../Generated_Code/PWMMotor.c ****   /* Interrupt vector(s) allocation */
 146:../Generated_Code/PWMMotor.c ****   /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the glo
 147:../Generated_Code/PWMMotor.c ****   INT_FTM0__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
  76              		.loc 1 147 0
  77 0018 40F20003 		movw	r3, #:lower16:INT_FTM0__DEFAULT_RTOS_ISRPARAM
  78 001c C0F20003 		movt	r3, #:upper16:INT_FTM0__DEFAULT_RTOS_ISRPARAM
  79 0020 FA68     		ldr	r2, [r7, #12]
  80 0022 1A60     		str	r2, [r3, #0]
 148:../Generated_Code/PWMMotor.c ****   /* SIM_SCGC6: FTM0=1 */
 149:../Generated_Code/PWMMotor.c ****   SIM_SCGC6 |= SIM_SCGC6_FTM0_MASK;                                                   
  81              		.loc 1 149 0
  82 0024 4FF4E043 		mov	r3, #28672
  83 0028 C4F20403 		movt	r3, 16388
  84 002c 4FF4E042 		mov	r2, #28672
  85 0030 C4F20402 		movt	r2, 16388
  86 0034 02F58052 		add	r2, r2, #4096
  87 0038 02F13C02 		add	r2, r2, #60
  88 003c 1268     		ldr	r2, [r2, #0]
  89 003e 42F08072 		orr	r2, r2, #16777216
  90 0042 03F58053 		add	r3, r3, #4096
  91 0046 03F13C03 		add	r3, r3, #60
  92 004a 1A60     		str	r2, [r3, #0]
 150:../Generated_Code/PWMMotor.c ****   /* FTM0_MODE: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 151:../Generated_Code/PWMMotor.c ****   FTM0_MODE = FTM_MODE_WPDIS_MASK;     /* Set up mode register */
  93              		.loc 1 151 0
  94 004c 4FF40043 		mov	r3, #32768
  95 0050 C4F20303 		movt	r3, 16387
  96 0054 4FF00402 		mov	r2, #4
  97 0058 5A65     		str	r2, [r3, #84]
 152:../Generated_Code/PWMMotor.c ****   /* FTM0_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,
 153:../Generated_Code/PWMMotor.c ****   FTM0_SC = 0x00U;                     /* Clear status and control register */
  98              		.loc 1 153 0
  99 005a 4FF40043 		mov	r3, #32768
 100 005e C4F20303 		movt	r3, 16387
 101 0062 4FF00002 		mov	r2, #0
 102 0066 1A60     		str	r2, [r3, #0]
 154:../Generated_Code/PWMMotor.c ****   /* FTM0_CNTIN: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,IN
 155:../Generated_Code/PWMMotor.c ****   FTM0_CNTIN = 0x00U;                  /* Clear counter initial register */
 103              		.loc 1 155 0
 104 0068 4FF40043 		mov	r3, #32768
 105 006c C4F20303 		movt	r3, 16387
 106 0070 4FF00002 		mov	r2, #0
 107 0074 DA64     		str	r2, [r3, #76]
 156:../Generated_Code/PWMMotor.c ****   /* FTM0_CNT: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUN
 157:../Generated_Code/PWMMotor.c ****   FTM0_CNT = 0x00U;                    /* Reset counter register */
 108              		.loc 1 157 0
 109 0076 4FF40043 		mov	r3, #32768
 110 007a C4F20303 		movt	r3, 16387
 111 007e 4FF00002 		mov	r2, #0
 112 0082 5A60     		str	r2, [r3, #4]
 158:../Generated_Code/PWMMotor.c ****   /* FTM0_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 159:../Generated_Code/PWMMotor.c ****   FTM0_C0SC = 0x00U;                   /* Clear channel status and control register */
 113              		.loc 1 159 0
 114 0084 4FF40043 		mov	r3, #32768
 115 0088 C4F20303 		movt	r3, 16387
 116 008c 4FF00002 		mov	r2, #0
 117 0090 DA60     		str	r2, [r3, #12]
 160:../Generated_Code/PWMMotor.c ****   /* FTM0_C1SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 161:../Generated_Code/PWMMotor.c ****   FTM0_C1SC = 0x00U;                   /* Clear channel status and control register */
 118              		.loc 1 161 0
 119 0092 4FF40043 		mov	r3, #32768
 120 0096 C4F20303 		movt	r3, 16387
 121 009a 4FF00002 		mov	r2, #0
 122 009e 5A61     		str	r2, [r3, #20]
 162:../Generated_Code/PWMMotor.c ****   /* FTM0_C2SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 163:../Generated_Code/PWMMotor.c ****   FTM0_C2SC = 0x00U;                   /* Clear channel status and control register */
 123              		.loc 1 163 0
 124 00a0 4FF40043 		mov	r3, #32768
 125 00a4 C4F20303 		movt	r3, 16387
 126 00a8 4FF00002 		mov	r2, #0
 127 00ac DA61     		str	r2, [r3, #28]
 164:../Generated_Code/PWMMotor.c ****   /* FTM0_C3SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 165:../Generated_Code/PWMMotor.c ****   FTM0_C3SC = 0x00U;                   /* Clear channel status and control register */
 128              		.loc 1 165 0
 129 00ae 4FF40043 		mov	r3, #32768
 130 00b2 C4F20303 		movt	r3, 16387
 131 00b6 4FF00002 		mov	r2, #0
 132 00ba 5A62     		str	r2, [r3, #36]
 166:../Generated_Code/PWMMotor.c ****   /* FTM0_C4SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 167:../Generated_Code/PWMMotor.c ****   FTM0_C4SC = 0x00U;                   /* Clear channel status and control register */
 133              		.loc 1 167 0
 134 00bc 4FF40043 		mov	r3, #32768
 135 00c0 C4F20303 		movt	r3, 16387
 136 00c4 4FF00002 		mov	r2, #0
 137 00c8 DA62     		str	r2, [r3, #44]
 168:../Generated_Code/PWMMotor.c ****   /* FTM0_C5SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 169:../Generated_Code/PWMMotor.c ****   FTM0_C5SC = 0x00U;                   /* Clear channel status and control register */
 138              		.loc 1 169 0
 139 00ca 4FF40043 		mov	r3, #32768
 140 00ce C4F20303 		movt	r3, 16387
 141 00d2 4FF00002 		mov	r2, #0
 142 00d6 5A63     		str	r2, [r3, #52]
 170:../Generated_Code/PWMMotor.c ****   /* FTM0_C6SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 171:../Generated_Code/PWMMotor.c ****   FTM0_C6SC = 0x00U;                   /* Clear channel status and control register */
 143              		.loc 1 171 0
 144 00d8 4FF40043 		mov	r3, #32768
 145 00dc C4F20303 		movt	r3, 16387
 146 00e0 4FF00002 		mov	r2, #0
 147 00e4 DA63     		str	r2, [r3, #60]
 172:../Generated_Code/PWMMotor.c ****   /* FTM0_C7SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 173:../Generated_Code/PWMMotor.c ****   FTM0_C7SC = 0x00U;                   /* Clear channel status and control register */
 148              		.loc 1 173 0
 149 00e6 4FF40043 		mov	r3, #32768
 150 00ea C4F20303 		movt	r3, 16387
 151 00ee 4FF00002 		mov	r2, #0
 152 00f2 5A64     		str	r2, [r3, #68]
 174:../Generated_Code/PWMMotor.c ****   /* FTM0_MOD: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,MOD=
 175:../Generated_Code/PWMMotor.c ****   FTM0_MOD = FTM_MOD_MOD(0x1388);      /* Set up modulo register */
 153              		.loc 1 175 0
 154 00f4 4FF40043 		mov	r3, #32768
 155 00f8 C4F20303 		movt	r3, 16387
 156 00fc 41F28832 		movw	r2, #5000
 157 0100 9A60     		str	r2, [r3, #8]
 176:../Generated_Code/PWMMotor.c ****   /* FTM0_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 177:../Generated_Code/PWMMotor.c ****   FTM0_C0SC = (FTM_CnSC_MSB_MASK | FTM_CnSC_ELSB_MASK | FTM_CnSC_ELSA_MASK); /* Set up channel stat
 158              		.loc 1 177 0
 159 0102 4FF40043 		mov	r3, #32768
 160 0106 C4F20303 		movt	r3, 16387
 161 010a 4FF02C02 		mov	r2, #44
 162 010e DA60     		str	r2, [r3, #12]
 178:../Generated_Code/PWMMotor.c ****   /* FTM0_C0V: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,VAL=
 179:../Generated_Code/PWMMotor.c ****   FTM0_C0V = FTM_CnV_VAL(0x03E8);      /* Set up channel value register */
 163              		.loc 1 179 0
 164 0110 4FF40043 		mov	r3, #32768
 165 0114 C4F20303 		movt	r3, 16387
 166 0118 4FF47A72 		mov	r2, #1000
 167 011c 1A61     		str	r2, [r3, #16]
 180:../Generated_Code/PWMMotor.c ****   /* FTM0_C3SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 181:../Generated_Code/PWMMotor.c ****   FTM0_C3SC = (FTM_CnSC_MSB_MASK | FTM_CnSC_ELSB_MASK | FTM_CnSC_ELSA_MASK); /* Set up channel stat
 168              		.loc 1 181 0
 169 011e 4FF40043 		mov	r3, #32768
 170 0122 C4F20303 		movt	r3, 16387
 171 0126 4FF02C02 		mov	r2, #44
 172 012a 5A62     		str	r2, [r3, #36]
 182:../Generated_Code/PWMMotor.c ****   /* FTM0_C3V: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,VAL=
 183:../Generated_Code/PWMMotor.c ****   FTM0_C3V = FTM_CnV_VAL(0x03E8);      /* Set up channel value register */
 173              		.loc 1 183 0
 174 012c 4FF40043 		mov	r3, #32768
 175 0130 C4F20303 		movt	r3, 16387
 176 0134 4FF47A72 		mov	r2, #1000
 177 0138 9A62     		str	r2, [r3, #40]
 184:../Generated_Code/PWMMotor.c ****   /* PORTC_PCR1: ISF=0,MUX=4 */
 185:../Generated_Code/PWMMotor.c ****   PORTC_PCR1 = (uint32_t)((PORTC_PCR1 & (uint32_t)~(uint32_t)(
 178              		.loc 1 185 0
 179 013a 4FF43043 		mov	r3, #45056
 180 013e C4F20403 		movt	r3, 16388
 181 0142 4FF43042 		mov	r2, #45056
 182 0146 C4F20402 		movt	r2, 16388
 183 014a 5268     		ldr	r2, [r2, #4]
 184 014c 22F08072 		bic	r2, r2, #16777216
 185 0150 22F4E062 		bic	r2, r2, #1792
 186 0154 42F48062 		orr	r2, r2, #1024
 187 0158 5A60     		str	r2, [r3, #4]
 186:../Generated_Code/PWMMotor.c ****                 PORT_PCR_ISF_MASK |
 187:../Generated_Code/PWMMotor.c ****                 PORT_PCR_MUX(0x03)
 188:../Generated_Code/PWMMotor.c ****                )) | (uint32_t)(
 189:../Generated_Code/PWMMotor.c ****                 PORT_PCR_MUX(0x04)
 190:../Generated_Code/PWMMotor.c ****                ));                                                  
 191:../Generated_Code/PWMMotor.c ****   /* PORTC_PCR4: ISF=0,MUX=4 */
 192:../Generated_Code/PWMMotor.c ****   PORTC_PCR4 = (uint32_t)((PORTC_PCR4 & (uint32_t)~(uint32_t)(
 188              		.loc 1 192 0
 189 015a 4FF43043 		mov	r3, #45056
 190 015e C4F20403 		movt	r3, 16388
 191 0162 4FF43042 		mov	r2, #45056
 192 0166 C4F20402 		movt	r2, 16388
 193 016a 1269     		ldr	r2, [r2, #16]
 194 016c 22F08072 		bic	r2, r2, #16777216
 195 0170 22F4E062 		bic	r2, r2, #1792
 196 0174 42F48062 		orr	r2, r2, #1024
 197 0178 1A61     		str	r2, [r3, #16]
 193:../Generated_Code/PWMMotor.c ****                 PORT_PCR_ISF_MASK |
 194:../Generated_Code/PWMMotor.c ****                 PORT_PCR_MUX(0x03)
 195:../Generated_Code/PWMMotor.c ****                )) | (uint32_t)(
 196:../Generated_Code/PWMMotor.c ****                 PORT_PCR_MUX(0x04)
 197:../Generated_Code/PWMMotor.c ****                ));                                                  
 198:../Generated_Code/PWMMotor.c ****   DeviceDataPrv->EnEvents = 0x0100U;   /* Enable selected events */
 198              		.loc 1 198 0
 199 017a FB68     		ldr	r3, [r7, #12]
 200 017c 4FF48072 		mov	r2, #256
 201 0180 1A60     		str	r2, [r3, #0]
 199:../Generated_Code/PWMMotor.c ****   /* NVICIP62: PRI62=0x80 */
 200:../Generated_Code/PWMMotor.c ****   NVICIP62 = NVIC_IP_PRI62(0x80);                                                   
 202              		.loc 1 200 0
 203 0182 4FF46143 		mov	r3, #57600
 204 0186 CEF20003 		movt	r3, 57344
 205 018a 4FF08002 		mov	r2, #128
 206 018e 83F83E23 		strb	r2, [r3, #830]
 201:../Generated_Code/PWMMotor.c ****   /* NVICISER1: SETENA|=0x40000000 */
 202:../Generated_Code/PWMMotor.c ****   NVICISER1 |= NVIC_ISER_SETENA(0x40000000);                                                   
 207              		.loc 1 202 0
 208 0192 4FF46143 		mov	r3, #57600
 209 0196 CEF20003 		movt	r3, 57344
 210 019a 4FF46142 		mov	r2, #57600
 211 019e CEF20002 		movt	r2, 57344
 212 01a2 5268     		ldr	r2, [r2, #4]
 213 01a4 42F08042 		orr	r2, r2, #1073741824
 214 01a8 5A60     		str	r2, [r3, #4]
 203:../Generated_Code/PWMMotor.c ****   /* FTM0_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,
 204:../Generated_Code/PWMMotor.c ****   FTM0_SC = (FTM_SC_TOIE_MASK | FTM_SC_CLKS(0x01)); /* Set up status and control register */
 215              		.loc 1 204 0
 216 01aa 4FF40043 		mov	r3, #32768
 217 01ae C4F20303 		movt	r3, 16387
 218 01b2 4FF04802 		mov	r2, #72
 219 01b6 1A60     		str	r2, [r3, #0]
 205:../Generated_Code/PWMMotor.c ****   /* Registration of the device structure */
 206:../Generated_Code/PWMMotor.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_PWMMotor_ID,DeviceDataPrv);
 220              		.loc 1 206 0
 221 01b8 40F20003 		movw	r3, #:lower16:PE_LDD_DeviceDataList
 222 01bc C0F20003 		movt	r3, #:upper16:PE_LDD_DeviceDataList
 223 01c0 FA68     		ldr	r2, [r7, #12]
 224 01c2 1A60     		str	r2, [r3, #0]
 207:../Generated_Code/PWMMotor.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
 225              		.loc 1 207 0
 226 01c4 FB68     		ldr	r3, [r7, #12]
 208:../Generated_Code/PWMMotor.c **** }
 227              		.loc 1 208 0
 228 01c6 1846     		mov	r0, r3
 229 01c8 07F11407 		add	r7, r7, #20
 230 01cc BD46     		mov	sp, r7
 231 01ce 80BC     		pop	{r7}
 232 01d0 7047     		bx	lr
 233              		.cfi_endproc
 234              	.LFE0:
 236 01d2 00BF     		.section	.text.PWMMotor_Deinit,"ax",%progbits
 237              		.align	2
 238              		.global	PWMMotor_Deinit
 239              		.thumb
 240              		.thumb_func
 242              	PWMMotor_Deinit:
 243              	.LFB1:
 209:../Generated_Code/PWMMotor.c **** 
 210:../Generated_Code/PWMMotor.c **** /*
 211:../Generated_Code/PWMMotor.c **** ** ===================================================================
 212:../Generated_Code/PWMMotor.c **** **     Method      :  PWMMotor_Deinit (component TimerUnit_LDD)
 213:../Generated_Code/PWMMotor.c **** **
 214:../Generated_Code/PWMMotor.c **** **     Description :
 215:../Generated_Code/PWMMotor.c **** **         Deinitializes the device. Switches off the device, frees the
 216:../Generated_Code/PWMMotor.c **** **         device data structure memory, interrupts vectors, etc.
 217:../Generated_Code/PWMMotor.c **** **     Parameters  :
 218:../Generated_Code/PWMMotor.c **** **         NAME            - DESCRIPTION
 219:../Generated_Code/PWMMotor.c **** **       * DeviceDataPtr   - Device data structure
 220:../Generated_Code/PWMMotor.c **** **                           pointer returned by Init method
 221:../Generated_Code/PWMMotor.c **** **     Returns     : Nothing
 222:../Generated_Code/PWMMotor.c **** ** ===================================================================
 223:../Generated_Code/PWMMotor.c **** */
 224:../Generated_Code/PWMMotor.c **** void PWMMotor_Deinit(LDD_TDeviceData *DeviceDataPtr)
 225:../Generated_Code/PWMMotor.c **** {
 244              		.loc 1 225 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 16
 247              		@ frame_needed = 1, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 249 0000 80B4     		push	{r7}
 250              	.LCFI3:
 251              		.cfi_def_cfa_offset 4
 252              		.cfi_offset 7, -4
 253 0002 85B0     		sub	sp, sp, #20
 254              	.LCFI4:
 255              		.cfi_def_cfa_offset 24
 256 0004 00AF     		add	r7, sp, #0
 257              	.LCFI5:
 258              		.cfi_def_cfa_register 7
 259 0006 7860     		str	r0, [r7, #4]
 226:../Generated_Code/PWMMotor.c ****   PWMMotor_TDeviceData *DeviceDataPrv = (PWMMotor_TDeviceData *)DeviceDataPtr;
 260              		.loc 1 226 0
 261 0008 7B68     		ldr	r3, [r7, #4]
 262 000a FB60     		str	r3, [r7, #12]
 227:../Generated_Code/PWMMotor.c **** 
 228:../Generated_Code/PWMMotor.c ****   (void)DeviceDataPrv;
 229:../Generated_Code/PWMMotor.c ****   FTM_PDD_SelectPrescalerSource(FTM0_BASE_PTR, FTM_PDD_DISABLED);
 263              		.loc 1 229 0
 264 000c 4FF40043 		mov	r3, #32768
 265 0010 C4F20303 		movt	r3, 16387
 266 0014 4FF40042 		mov	r2, #32768
 267 0018 C4F20302 		movt	r2, 16387
 268 001c 1268     		ldr	r2, [r2, #0]
 269 001e 22F09802 		bic	r2, r2, #152
 270 0022 1A60     		str	r2, [r3, #0]
 230:../Generated_Code/PWMMotor.c ****   /* Interrupt vector(s) deallocation */
 231:../Generated_Code/PWMMotor.c ****   /* {Default RTOS Adapter} Restore interrupt vector: IVT is static, no code is generated */
 232:../Generated_Code/PWMMotor.c ****   /* Unregistration of the device structure */
 233:../Generated_Code/PWMMotor.c ****   PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PWMMotor_ID);
 271              		.loc 1 233 0
 272 0024 40F20003 		movw	r3, #:lower16:PE_LDD_DeviceDataList
 273 0028 C0F20003 		movt	r3, #:upper16:PE_LDD_DeviceDataList
 274 002c 4FF00002 		mov	r2, #0
 275 0030 1A60     		str	r2, [r3, #0]
 234:../Generated_Code/PWMMotor.c ****   /* Deallocation of the device structure */
 235:../Generated_Code/PWMMotor.c ****   /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 236:../Generated_Code/PWMMotor.c **** }
 276              		.loc 1 236 0
 277 0032 07F11407 		add	r7, r7, #20
 278 0036 BD46     		mov	sp, r7
 279 0038 80BC     		pop	{r7}
 280 003a 7047     		bx	lr
 281              		.cfi_endproc
 282              	.LFE1:
 284              		.section	.text.PWMMotor_SetOffsetTicks,"ax",%progbits
 285              		.align	2
 286              		.global	PWMMotor_SetOffsetTicks
 287              		.thumb
 288              		.thumb_func
 290              	PWMMotor_SetOffsetTicks:
 291              	.LFB2:
 237:../Generated_Code/PWMMotor.c **** 
 238:../Generated_Code/PWMMotor.c **** /*
 239:../Generated_Code/PWMMotor.c **** ** ===================================================================
 240:../Generated_Code/PWMMotor.c **** **     Method      :  PWMMotor_SetOffsetTicks (component TimerUnit_LDD)
 241:../Generated_Code/PWMMotor.c **** **
 242:../Generated_Code/PWMMotor.c **** **     Description :
 243:../Generated_Code/PWMMotor.c **** **         Sets the new offset value to channel specified by the
 244:../Generated_Code/PWMMotor.c **** **         parameter ChannelIdx. It is user responsibility to use value
 245:../Generated_Code/PWMMotor.c **** **         below selected period. This method is available when at
 246:../Generated_Code/PWMMotor.c **** **         least one channel is configured.
 247:../Generated_Code/PWMMotor.c **** **     Parameters  :
 248:../Generated_Code/PWMMotor.c **** **         NAME            - DESCRIPTION
 249:../Generated_Code/PWMMotor.c **** **       * DeviceDataPtr   - Device data structure
 250:../Generated_Code/PWMMotor.c **** **                           pointer returned by <Init> method.
 251:../Generated_Code/PWMMotor.c **** **         ChannelIdx      - Index of the component
 252:../Generated_Code/PWMMotor.c **** **                           channel.
 253:../Generated_Code/PWMMotor.c **** **         Ticks           - Number of counter ticks to compare
 254:../Generated_Code/PWMMotor.c **** **                           match.
 255:../Generated_Code/PWMMotor.c **** **     Returns     :
 256:../Generated_Code/PWMMotor.c **** **         ---             - Error code, possible codes:
 257:../Generated_Code/PWMMotor.c **** **                           ERR_OK - OK 
 258:../Generated_Code/PWMMotor.c **** **                           ERR_PARAM_INDEX - ChannelIdx parameter is
 259:../Generated_Code/PWMMotor.c **** **                           out of possible range.
 260:../Generated_Code/PWMMotor.c **** **                           ERR_NOTAVAIL -  The compare mode is not
 261:../Generated_Code/PWMMotor.c **** **                           selected for selected channel
 262:../Generated_Code/PWMMotor.c **** **                           ERR_PARAM_TICKS - Ticks parameter is out of
 263:../Generated_Code/PWMMotor.c **** **                           possible range.
 264:../Generated_Code/PWMMotor.c **** **                           ERR_SPEED - The component does not work in
 265:../Generated_Code/PWMMotor.c **** **                           the active clock configuration
 266:../Generated_Code/PWMMotor.c **** ** ===================================================================
 267:../Generated_Code/PWMMotor.c **** */
 268:../Generated_Code/PWMMotor.c **** LDD_TError PWMMotor_SetOffsetTicks(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, PWMMotor_TVa
 269:../Generated_Code/PWMMotor.c **** {
 292              		.loc 1 269 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 16
 295              		@ frame_needed = 1, uses_anonymous_args = 0
 296              		@ link register save eliminated.
 297 0000 80B4     		push	{r7}
 298              	.LCFI6:
 299              		.cfi_def_cfa_offset 4
 300              		.cfi_offset 7, -4
 301 0002 85B0     		sub	sp, sp, #20
 302              	.LCFI7:
 303              		.cfi_def_cfa_offset 24
 304 0004 00AF     		add	r7, sp, #0
 305              	.LCFI8:
 306              		.cfi_def_cfa_register 7
 307 0006 F860     		str	r0, [r7, #12]
 308 0008 0B46     		mov	r3, r1
 309 000a 7A60     		str	r2, [r7, #4]
 310 000c FB72     		strb	r3, [r7, #11]
 270:../Generated_Code/PWMMotor.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 271:../Generated_Code/PWMMotor.c ****   /* Parameter test - this test can be disabled by setting the "Ignore range checking"
 272:../Generated_Code/PWMMotor.c ****      property to the "yes" value in the "Configuration inspector" */
 273:../Generated_Code/PWMMotor.c ****   if (ChannelIdx > LAST_CHANNEL) {     /* Is the channel index out of range? */
 311              		.loc 1 273 0
 312 000e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 313 0010 012B     		cmp	r3, #1
 314 0012 02D9     		bls	.L4
 274:../Generated_Code/PWMMotor.c ****     return ERR_PARAM_INDEX;            /* If yes then error */
 315              		.loc 1 274 0
 316 0014 4FF08203 		mov	r3, #130
 317 0018 26E0     		b	.L5
 318              	.L4:
 275:../Generated_Code/PWMMotor.c ****   }
 276:../Generated_Code/PWMMotor.c ****   if ((ChannelMode[ChannelIdx]) != 0U) { /* Is the channel in compare mode? */
 319              		.loc 1 276 0
 320 001a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 321 001c 40F20003 		movw	r3, #:lower16:ChannelMode
 322 0020 C0F20003 		movt	r3, #:upper16:ChannelMode
 323 0024 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 324 0026 002B     		cmp	r3, #0
 325 0028 02D0     		beq	.L6
 277:../Generated_Code/PWMMotor.c ****     return ERR_NOTAVAIL;               /* If not then error */
 326              		.loc 1 277 0
 327 002a 4FF00903 		mov	r3, #9
 328 002e 1BE0     		b	.L5
 329              	.L6:
 278:../Generated_Code/PWMMotor.c ****   }
 279:../Generated_Code/PWMMotor.c ****   FTM_PDD_WriteChannelValueReg(FTM0_BASE_PTR, ChannelDevice[ChannelIdx], (uint16_t)Ticks);
 330              		.loc 1 279 0
 331 0030 4FF40042 		mov	r2, #32768
 332 0034 C4F20302 		movt	r2, 16387
 333 0038 F97A     		ldrb	r1, [r7, #11]	@ zero_extendqisi2
 334 003a 40F20003 		movw	r3, #:lower16:ChannelDevice
 335 003e C0F20003 		movt	r3, #:upper16:ChannelDevice
 336 0042 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 337 0044 7968     		ldr	r1, [r7, #4]
 338 0046 89B2     		uxth	r1, r1
 339 0048 03F10103 		add	r3, r3, #1
 340 004c 4FEAC303 		lsl	r3, r3, #3
 341 0050 D318     		adds	r3, r2, r3
 342 0052 9960     		str	r1, [r3, #8]
 280:../Generated_Code/PWMMotor.c ****   if (Ticks > 65535U) {                /* Was the given value greater than counter width? */
 343              		.loc 1 280 0
 344 0054 7A68     		ldr	r2, [r7, #4]
 345 0056 4FF6FF73 		movw	r3, #65535
 346 005a 9A42     		cmp	r2, r3
 347 005c 02D9     		bls	.L7
 281:../Generated_Code/PWMMotor.c ****     return ERR_PARAM_TICKS;            /* If yes then truncation of user data to 16 bits is reporte
 348              		.loc 1 281 0
 349 005e 4FF09803 		mov	r3, #152
 350 0062 01E0     		b	.L5
 351              	.L7:
 282:../Generated_Code/PWMMotor.c ****   }
 283:../Generated_Code/PWMMotor.c ****   return ERR_OK;                       /* OK */
 352              		.loc 1 283 0
 353 0064 4FF00003 		mov	r3, #0
 354              	.L5:
 284:../Generated_Code/PWMMotor.c **** }
 355              		.loc 1 284 0
 356 0068 1846     		mov	r0, r3
 357 006a 07F11407 		add	r7, r7, #20
 358 006e BD46     		mov	sp, r7
 359 0070 80BC     		pop	{r7}
 360 0072 7047     		bx	lr
 361              		.cfi_endproc
 362              	.LFE2:
 364              		.section	.text.PWMMotor_Interrupt,"ax",%progbits
 365              		.align	2
 366              		.global	PWMMotor_Interrupt
 367              		.thumb
 368              		.thumb_func
 370              	PWMMotor_Interrupt:
 371              	.LFB3:
 285:../Generated_Code/PWMMotor.c **** 
 286:../Generated_Code/PWMMotor.c **** /*
 287:../Generated_Code/PWMMotor.c **** ** ===================================================================
 288:../Generated_Code/PWMMotor.c **** **     Method      :  PWMMotor_Interrupt (component TimerUnit_LDD)
 289:../Generated_Code/PWMMotor.c **** **
 290:../Generated_Code/PWMMotor.c **** **     Description :
 291:../Generated_Code/PWMMotor.c **** **         The method services the interrupt of the selected peripheral(s)
 292:../Generated_Code/PWMMotor.c **** **         and eventually invokes event(s) of the component.
 293:../Generated_Code/PWMMotor.c **** **         This method is internal. It is used by Processor Expert only.
 294:../Generated_Code/PWMMotor.c **** ** ===================================================================
 295:../Generated_Code/PWMMotor.c **** */
 296:../Generated_Code/PWMMotor.c **** PE_ISR(PWMMotor_Interrupt)
 297:../Generated_Code/PWMMotor.c **** {
 372              		.loc 1 297 0
 373              		.cfi_startproc
 374              		@ Stack Align: May be called with mis-aligned SP.
 375              		@ args = 0, pretend = 0, frame = 8
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377 0000 6846     		mov	r0, sp
 378              		.cfi_register 13, 0
 379 0002 20F00701 		bic	r1, r0, #7
 380 0006 8D46     		mov	sp, r1
 381 0008 81B5     		push	{r0, r7, lr}
 382              	.LCFI9:
 383              		.cfi_def_cfa_offset 12
 384              		.cfi_offset 14, -4
 385              		.cfi_offset 7, -8
 386              		.cfi_offset 13, -12
 387 000a 83B0     		sub	sp, sp, #12
 388              	.LCFI10:
 389              		.cfi_def_cfa_offset 24
 390 000c 00AF     		add	r7, sp, #0
 391              	.LCFI11:
 392              		.cfi_def_cfa_register 7
 298:../Generated_Code/PWMMotor.c ****   /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
 299:../Generated_Code/PWMMotor.c ****   PWMMotor_TDeviceDataPtr DeviceDataPrv = INT_FTM0__DEFAULT_RTOS_ISRPARAM;
 393              		.loc 1 299 0
 394 000e 40F20003 		movw	r3, #:lower16:INT_FTM0__DEFAULT_RTOS_ISRPARAM
 395 0012 C0F20003 		movt	r3, #:upper16:INT_FTM0__DEFAULT_RTOS_ISRPARAM
 396 0016 1B68     		ldr	r3, [r3, #0]
 397 0018 3B60     		str	r3, [r7, #0]
 300:../Generated_Code/PWMMotor.c **** 
 301:../Generated_Code/PWMMotor.c ****   LDD_TEventMask State = 0U;
 398              		.loc 1 301 0
 399 001a 4FF00003 		mov	r3, #0
 400 001e 7B60     		str	r3, [r7, #4]
 302:../Generated_Code/PWMMotor.c **** 
 303:../Generated_Code/PWMMotor.c ****   if ((FTM_PDD_GetOverflowInterruptFlag(FTM0_BASE_PTR)) != 0U) { /* Is the overflow interrupt flag 
 401              		.loc 1 303 0
 402 0020 4FF40043 		mov	r3, #32768
 403 0024 C4F20303 		movt	r3, 16387
 404 0028 1B68     		ldr	r3, [r3, #0]
 405 002a 03F08003 		and	r3, r3, #128
 406 002e 002B     		cmp	r3, #0
 407 0030 03D0     		beq	.L9
 304:../Generated_Code/PWMMotor.c ****     State |= LDD_TIMERUNIT_ON_COUNTER_RESTART; /* and set mask */
 408              		.loc 1 304 0
 409 0032 7B68     		ldr	r3, [r7, #4]
 410 0034 43F48073 		orr	r3, r3, #256
 411 0038 7B60     		str	r3, [r7, #4]
 412              	.L9:
 305:../Generated_Code/PWMMotor.c ****   }
 306:../Generated_Code/PWMMotor.c ****   State &= DeviceDataPrv->EnEvents;    /* Handle only enabled interrupts */
 413              		.loc 1 306 0
 414 003a 3B68     		ldr	r3, [r7, #0]
 415 003c 1B68     		ldr	r3, [r3, #0]
 416 003e 7A68     		ldr	r2, [r7, #4]
 417 0040 1340     		ands	r3, r3, r2
 418 0042 7B60     		str	r3, [r7, #4]
 307:../Generated_Code/PWMMotor.c ****   if (State & LDD_TIMERUNIT_ON_COUNTER_RESTART) { /* Is the overflow interrupt flag pending? */
 419              		.loc 1 307 0
 420 0044 7B68     		ldr	r3, [r7, #4]
 421 0046 03F48073 		and	r3, r3, #256
 422 004a 002B     		cmp	r3, #0
 423 004c 10D0     		beq	.L8
 308:../Generated_Code/PWMMotor.c ****     FTM_PDD_ClearOverflowInterruptFlag(FTM0_BASE_PTR); /* Clear flag */
 424              		.loc 1 308 0
 425 004e 4FF40043 		mov	r3, #32768
 426 0052 C4F20303 		movt	r3, 16387
 427 0056 4FF40042 		mov	r2, #32768
 428 005a C4F20302 		movt	r2, 16387
 429 005e 1268     		ldr	r2, [r2, #0]
 430 0060 22F08002 		bic	r2, r2, #128
 431 0064 1A60     		str	r2, [r3, #0]
 309:../Generated_Code/PWMMotor.c ****     PWMMotor_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
 432              		.loc 1 309 0
 433 0066 3B68     		ldr	r3, [r7, #0]
 434 0068 5B68     		ldr	r3, [r3, #4]
 435 006a 1846     		mov	r0, r3
 436 006c FFF7FEFF 		bl	PWMMotor_OnCounterRestart
 437              	.L8:
 310:../Generated_Code/PWMMotor.c ****   }
 311:../Generated_Code/PWMMotor.c **** }
 438              		.loc 1 311 0
 439 0070 07F10C07 		add	r7, r7, #12
 440 0074 BD46     		mov	sp, r7
 441 0076 BDE88140 		pop	{r0, r7, lr}
 442 007a 8546     		mov	sp, r0
 443 007c 7047     		bx	lr
 444              		.cfi_endproc
 445              	.LFE3:
 447 007e 00BF     		.text
 448              	.Letext0:
 449              		.file 2 "C:/Freescale/CW MCU v10.3_121211/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 450              		.file 3 "C:/temp2/Pex/Generated_Code/IO_Map.h"
 451              		.file 4 "C:/temp2/Pex/Generated_Code/PE_LDD.h"
 452              		.file 5 "C:/temp2/Pex/Generated_Code/PWMMotor.h"
DEFINED SYMBOLS
                            *ABS*:00000000 PWMMotor.c
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:19     .rodata.ChannelDevice:00000000 $d
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:22     .rodata.ChannelDevice:00000000 ChannelDevice
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:26     .rodata.ChannelMode:00000000 $d
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:29     .rodata.ChannelMode:00000000 ChannelMode
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:32     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:35     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:38     .bss.INT_FTM0__DEFAULT_RTOS_ISRPARAM:00000000 $d
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:41     .bss.INT_FTM0__DEFAULT_RTOS_ISRPARAM:00000000 INT_FTM0__DEFAULT_RTOS_ISRPARAM
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:44     .text.PWMMotor_Init:00000000 $t
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:49     .text.PWMMotor_Init:00000000 PWMMotor_Init
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:237    .text.PWMMotor_Deinit:00000000 $t
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:242    .text.PWMMotor_Deinit:00000000 PWMMotor_Deinit
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:285    .text.PWMMotor_SetOffsetTicks:00000000 $t
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:290    .text.PWMMotor_SetOffsetTicks:00000000 PWMMotor_SetOffsetTicks
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:365    .text.PWMMotor_Interrupt:00000000 $t
C:\Users\z\AppData\Local\Temp\ccqMu8Fe.s:370    .text.PWMMotor_Interrupt:00000000 PWMMotor_Interrupt
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
PWMMotor_OnCounterRestart
