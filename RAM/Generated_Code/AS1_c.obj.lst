   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"AS1.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  19              		.align	2
  22              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  23 0000 00000000 		.space	24
  23      00000000 
  23      00000000 
  23      00000000 
  23      00000000 
  24              		.section	.bss.INT_UART3_RX_TX__DEFAULT_RTOS_ISRPARAM,"aw",%nobits
  25              		.align	2
  28              	INT_UART3_RX_TX__DEFAULT_RTOS_ISRPARAM:
  29 0000 00000000 		.space	4
  30              		.section	.bss.INT_UART3_ERR__DEFAULT_RTOS_ISRPARAM,"aw",%nobits
  31              		.align	2
  34              	INT_UART3_ERR__DEFAULT_RTOS_ISRPARAM:
  35 0000 00000000 		.space	4
  36              		.section	.text.AS1_Init,"ax",%progbits
  37              		.align	2
  38              		.global	AS1_Init
  39              		.thumb
  40              		.thumb_func
  42              	AS1_Init:
  43              	.LFB0:
  44              		.file 1 "../Generated_Code/AS1.c"
   1:../Generated_Code/AS1.c **** /** ###################################################################
   2:../Generated_Code/AS1.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/AS1.c **** **     Filename    : AS1.c
   4:../Generated_Code/AS1.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/AS1.c **** **     Processor   : MK40DX256ZVLQ10
   6:../Generated_Code/AS1.c **** **     Component   : Serial_LDD
   7:../Generated_Code/AS1.c **** **     Version     : Component 01.165, Driver 01.10, CPU db: 3.00.001
   8:../Generated_Code/AS1.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/AS1.c **** **     Date/Time   : 2013-04-11, 17:31, # CodeGen: 97
  10:../Generated_Code/AS1.c **** **     Abstract    :
  11:../Generated_Code/AS1.c **** **         This component "Serial_LDD" implements an asynchronous serial
  12:../Generated_Code/AS1.c **** **         communication. The component supports different settings of
  13:../Generated_Code/AS1.c **** **         parity, word width, stop-bit and communication speed,
  14:../Generated_Code/AS1.c **** **         user can select interrupt or polling handler.
  15:../Generated_Code/AS1.c **** **         Communication speed can be changed also in runtime.
  16:../Generated_Code/AS1.c **** **         The component requires one on-chip asynchronous serial communication channel.
  17:../Generated_Code/AS1.c **** **     Settings    :
  18:../Generated_Code/AS1.c **** **          Component name                                 : AS1
  19:../Generated_Code/AS1.c **** **          Device                                         : UART3
  20:../Generated_Code/AS1.c **** **          Interrupt service/event                        : Enabled
  21:../Generated_Code/AS1.c **** **            Interrupt RxD                                : INT_UART3_RX_TX
  22:../Generated_Code/AS1.c **** **            Interrupt RxD priority                       : maximal priority
  23:../Generated_Code/AS1.c **** **            Interrupt TxD                                : INT_UART3_RX_TX
  24:../Generated_Code/AS1.c **** **            Interrupt TxD priority                       : maximal priority
  25:../Generated_Code/AS1.c **** **            Interrupt Error                              : INT_UART3_ERR
  26:../Generated_Code/AS1.c **** **            Interrupt Error priority                     : maximal priority
  27:../Generated_Code/AS1.c **** **          Settings                                       : 
  28:../Generated_Code/AS1.c **** **            Data width                                   : 8 bits
  29:../Generated_Code/AS1.c **** **            Parity                                       : None
  30:../Generated_Code/AS1.c **** **            Stop bits                                    : 1
  31:../Generated_Code/AS1.c **** **            Loop mode                                    : Normal
  32:../Generated_Code/AS1.c **** **            Baud rate                                    : 38400 baud
  33:../Generated_Code/AS1.c **** **            Wakeup condition                             : Idle line wakeup
  34:../Generated_Code/AS1.c **** **            Stop in wait mode                            : no
  35:../Generated_Code/AS1.c **** **            Idle line mode                               : Starts after start bit
  36:../Generated_Code/AS1.c **** **            Transmitter output                           : Not inverted
  37:../Generated_Code/AS1.c **** **            Receiver input                               : Not inverted
  38:../Generated_Code/AS1.c **** **            Break generation length                      : 10/11 bits
  39:../Generated_Code/AS1.c **** **            Receiver                                     : Enabled
  40:../Generated_Code/AS1.c **** **              RxD                                        : PTB10/SPI1_PCS0/UART3_RX/FTM0_FLT1/LCD
  41:../Generated_Code/AS1.c **** **              RxD pin signal                             : 
  42:../Generated_Code/AS1.c **** **            Transmitter                                  : Enabled
  43:../Generated_Code/AS1.c **** **              TxD                                        : PTB11/SPI1_SCK/UART3_TX/FTM0_FLT2/LCD_
  44:../Generated_Code/AS1.c **** **              TxD pin signal                             : 
  45:../Generated_Code/AS1.c **** **            Flow control                                 : None
  46:../Generated_Code/AS1.c **** **          Initialization                                 : 
  47:../Generated_Code/AS1.c **** **            Enabled in init. code                        : yes
  48:../Generated_Code/AS1.c **** **            Auto initialization                          : yes
  49:../Generated_Code/AS1.c **** **            Event mask                                   : 
  50:../Generated_Code/AS1.c **** **              OnBlockSent                                : Enabled
  51:../Generated_Code/AS1.c **** **              OnBlockReceived                            : Enabled
  52:../Generated_Code/AS1.c **** **              OnTxComplete                               : Disabled
  53:../Generated_Code/AS1.c **** **              OnError                                    : Disabled
  54:../Generated_Code/AS1.c **** **              OnBreak                                    : Disabled
  55:../Generated_Code/AS1.c **** **          CPU clock/configuration selection              : 
  56:../Generated_Code/AS1.c **** **            Clock configuration 0                        : This component enabled
  57:../Generated_Code/AS1.c **** **            Clock configuration 1                        : This component disabled
  58:../Generated_Code/AS1.c **** **            Clock configuration 2                        : This component disabled
  59:../Generated_Code/AS1.c **** **            Clock configuration 3                        : This component disabled
  60:../Generated_Code/AS1.c **** **            Clock configuration 4                        : This component disabled
  61:../Generated_Code/AS1.c **** **            Clock configuration 5                        : This component disabled
  62:../Generated_Code/AS1.c **** **            Clock configuration 6                        : This component disabled
  63:../Generated_Code/AS1.c **** **            Clock configuration 7                        : This component disabled
  64:../Generated_Code/AS1.c **** **     Contents    :
  65:../Generated_Code/AS1.c **** **         Init               - LDD_TDeviceData* AS1_Init(LDD_TUserData *UserDataPtr);
  66:../Generated_Code/AS1.c **** **         Deinit             - void AS1_Deinit(LDD_TDeviceData *DeviceDataPtr);
  67:../Generated_Code/AS1.c **** **         SendBlock          - LDD_TError AS1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData.
  68:../Generated_Code/AS1.c **** **         ReceiveBlock       - LDD_TError AS1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TDa
  69:../Generated_Code/AS1.c **** **         GetSentDataNum     - uint16_t AS1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr);
  70:../Generated_Code/AS1.c **** **         GetReceivedDataNum - uint16_t AS1_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr);
  71:../Generated_Code/AS1.c **** **
  72:../Generated_Code/AS1.c **** **     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
  73:../Generated_Code/AS1.c **** **     
  74:../Generated_Code/AS1.c **** **     http      : www.freescale.com
  75:../Generated_Code/AS1.c **** **     mail      : support@freescale.com
  76:../Generated_Code/AS1.c **** ** ###################################################################*/
  77:../Generated_Code/AS1.c **** 
  78:../Generated_Code/AS1.c **** /* MODULE AS1. */
  79:../Generated_Code/AS1.c **** /*lint -save  -e926 -e927 -e928 -e929 -e572 Disable MISRA rule (11.4,12.8) checking. */
  80:../Generated_Code/AS1.c **** 
  81:../Generated_Code/AS1.c **** /* {Default RTOS Adapter} No RTOS includes */
  82:../Generated_Code/AS1.c **** #include "AS1.h"
  83:../Generated_Code/AS1.c **** #include "Events.h"
  84:../Generated_Code/AS1.c **** #include "UART_PDD.h"
  85:../Generated_Code/AS1.c **** 
  86:../Generated_Code/AS1.c **** #define AVAILABLE_EVENTS_MASK (LDD_SERIAL_ON_BLOCK_RECEIVED | LDD_SERIAL_ON_BLOCK_SENT)
  87:../Generated_Code/AS1.c **** 
  88:../Generated_Code/AS1.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
  89:../Generated_Code/AS1.c **** static AS1_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  90:../Generated_Code/AS1.c **** /* {Default RTOS Adapter} Global variable used for passing a parameter into ISR */
  91:../Generated_Code/AS1.c **** static AS1_TDeviceDataPtr INT_UART3_RX_TX__DEFAULT_RTOS_ISRPARAM;
  92:../Generated_Code/AS1.c **** /* {Default RTOS Adapter} Global variable used for passing a parameter into ISR */
  93:../Generated_Code/AS1.c **** static AS1_TDeviceDataPtr INT_UART3_ERR__DEFAULT_RTOS_ISRPARAM;
  94:../Generated_Code/AS1.c **** 
  95:../Generated_Code/AS1.c **** /*
  96:../Generated_Code/AS1.c **** ** ===================================================================
  97:../Generated_Code/AS1.c **** **     Method      :  AS1_Init (component Serial_LDD)
  98:../Generated_Code/AS1.c **** **
  99:../Generated_Code/AS1.c **** **     Description :
 100:../Generated_Code/AS1.c **** **         Initializes the device. Allocates memory for the device data
 101:../Generated_Code/AS1.c **** **         structure, allocates interrupt vectors and sets interrupt
 102:../Generated_Code/AS1.c **** **         priority, sets pin routing, sets timing, etc. If the "Enable
 103:../Generated_Code/AS1.c **** **         in init. code" is set to "yes" value then the device is also
 104:../Generated_Code/AS1.c **** **         enabled(see the description of the Enable() method). In this
 105:../Generated_Code/AS1.c **** **         case the Enable() method is not necessary and needn't to be
 106:../Generated_Code/AS1.c **** **         generated. 
 107:../Generated_Code/AS1.c **** **     Parameters  :
 108:../Generated_Code/AS1.c **** **         NAME            - DESCRIPTION
 109:../Generated_Code/AS1.c **** **       * UserDataPtr     - Pointer to the user or
 110:../Generated_Code/AS1.c **** **                           RTOS specific data. This pointer will be
 111:../Generated_Code/AS1.c **** **                           passed as an event or callback parameter.
 112:../Generated_Code/AS1.c **** **     Returns     :
 113:../Generated_Code/AS1.c **** **         ---             - Device data structure pointer.
 114:../Generated_Code/AS1.c **** ** ===================================================================
 115:../Generated_Code/AS1.c **** */
 116:../Generated_Code/AS1.c **** LDD_TDeviceData* AS1_Init(LDD_TUserData *UserDataPtr)
 117:../Generated_Code/AS1.c **** {
  45              		.loc 1 117 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 16
  48              		@ frame_needed = 1, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50 0000 80B4     		push	{r7}
  51              	.LCFI0:
  52              		.cfi_def_cfa_offset 4
  53              		.cfi_offset 7, -4
  54 0002 85B0     		sub	sp, sp, #20
  55              	.LCFI1:
  56              		.cfi_def_cfa_offset 24
  57 0004 00AF     		add	r7, sp, #0
  58              	.LCFI2:
  59              		.cfi_def_cfa_register 7
  60 0006 7860     		str	r0, [r7, #4]
 118:../Generated_Code/AS1.c ****   /* Allocate device structure */
 119:../Generated_Code/AS1.c ****   AS1_TDeviceDataPtr DeviceDataPrv;
 120:../Generated_Code/AS1.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 121:../Generated_Code/AS1.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  61              		.loc 1 121 0
  62 0008 40F20003 		movw	r3, #:lower16:DeviceDataPrv__DEFAULT_RTOS_ALLOC
  63 000c C0F20003 		movt	r3, #:upper16:DeviceDataPrv__DEFAULT_RTOS_ALLOC
  64 0010 FB60     		str	r3, [r7, #12]
 122:../Generated_Code/AS1.c **** 
 123:../Generated_Code/AS1.c ****   /* Clear the receive counters and pointer */
 124:../Generated_Code/AS1.c ****   DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
  65              		.loc 1 124 0
  66 0012 FB68     		ldr	r3, [r7, #12]
  67 0014 4FF00002 		mov	r2, #0
  68 0018 5A80     		strh	r2, [r3, #2]	@ movhi
 125:../Generated_Code/AS1.c ****   DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlo
  69              		.loc 1 125 0
  70 001a FB68     		ldr	r3, [r7, #12]
  71 001c 4FF00002 		mov	r2, #0
  72 0020 1A81     		strh	r2, [r3, #8]	@ movhi
 126:../Generated_Code/AS1.c ****   DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
  73              		.loc 1 126 0
  74 0022 FB68     		ldr	r3, [r7, #12]
  75 0024 4FF00002 		mov	r2, #0
  76 0028 5A60     		str	r2, [r3, #4]
 127:../Generated_Code/AS1.c ****   /* Clear the transmit counters and pointer */
 128:../Generated_Code/AS1.c ****   DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
  77              		.loc 1 128 0
  78 002a FB68     		ldr	r3, [r7, #12]
  79 002c 4FF00002 		mov	r2, #0
  80 0030 5A81     		strh	r2, [r3, #10]	@ movhi
 129:../Generated_Code/AS1.c ****   DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock(
  81              		.loc 1 129 0
  82 0032 FB68     		ldr	r3, [r7, #12]
  83 0034 4FF00002 		mov	r2, #0
  84 0038 1A82     		strh	r2, [r3, #16]	@ movhi
 130:../Generated_Code/AS1.c ****   DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
  85              		.loc 1 130 0
  86 003a FB68     		ldr	r3, [r7, #12]
  87 003c 4FF00002 		mov	r2, #0
  88 0040 DA60     		str	r2, [r3, #12]
 131:../Generated_Code/AS1.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  89              		.loc 1 131 0
  90 0042 FB68     		ldr	r3, [r7, #12]
  91 0044 7A68     		ldr	r2, [r7, #4]
  92 0046 5A61     		str	r2, [r3, #20]
 132:../Generated_Code/AS1.c ****   /* Allocate interrupt vectors */
 133:../Generated_Code/AS1.c ****   /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the glo
 134:../Generated_Code/AS1.c ****   INT_UART3_RX_TX__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
  93              		.loc 1 134 0
  94 0048 40F20003 		movw	r3, #:lower16:INT_UART3_RX_TX__DEFAULT_RTOS_ISRPARAM
  95 004c C0F20003 		movt	r3, #:upper16:INT_UART3_RX_TX__DEFAULT_RTOS_ISRPARAM
  96 0050 FA68     		ldr	r2, [r7, #12]
  97 0052 1A60     		str	r2, [r3, #0]
 135:../Generated_Code/AS1.c ****   /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the glo
 136:../Generated_Code/AS1.c ****   INT_UART3_ERR__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
  98              		.loc 1 136 0
  99 0054 40F20003 		movw	r3, #:lower16:INT_UART3_ERR__DEFAULT_RTOS_ISRPARAM
 100 0058 C0F20003 		movt	r3, #:upper16:INT_UART3_ERR__DEFAULT_RTOS_ISRPARAM
 101 005c FA68     		ldr	r2, [r7, #12]
 102 005e 1A60     		str	r2, [r3, #0]
 137:../Generated_Code/AS1.c ****   /* SIM_SCGC4: UART3=1 */
 138:../Generated_Code/AS1.c ****   SIM_SCGC4 |= SIM_SCGC4_UART3_MASK;                                                   
 103              		.loc 1 138 0
 104 0060 4FF4E043 		mov	r3, #28672
 105 0064 C4F20403 		movt	r3, 16388
 106 0068 4FF4E042 		mov	r2, #28672
 107 006c C4F20402 		movt	r2, 16388
 108 0070 02F58052 		add	r2, r2, #4096
 109 0074 02F13402 		add	r2, r2, #52
 110 0078 1268     		ldr	r2, [r2, #0]
 111 007a 42F40052 		orr	r2, r2, #8192
 112 007e 03F58053 		add	r3, r3, #4096
 113 0082 03F13403 		add	r3, r3, #52
 114 0086 1A60     		str	r2, [r3, #0]
 139:../Generated_Code/AS1.c ****   /* PORTB_PCR10: ISF=0,MUX=3 */
 140:../Generated_Code/AS1.c ****   PORTB_PCR10 = (uint32_t)((PORTB_PCR10 & (uint32_t)~(uint32_t)(
 115              		.loc 1 140 0
 116 0088 4FF42043 		mov	r3, #40960
 117 008c C4F20403 		movt	r3, 16388
 118 0090 4FF42042 		mov	r2, #40960
 119 0094 C4F20402 		movt	r2, 16388
 120 0098 926A     		ldr	r2, [r2, #40]
 121 009a 22F08072 		bic	r2, r2, #16777216
 122 009e 22F4E062 		bic	r2, r2, #1792
 123 00a2 42F44072 		orr	r2, r2, #768
 124 00a6 9A62     		str	r2, [r3, #40]
 141:../Generated_Code/AS1.c ****                  PORT_PCR_ISF_MASK |
 142:../Generated_Code/AS1.c ****                  PORT_PCR_MUX(0x04)
 143:../Generated_Code/AS1.c ****                 )) | (uint32_t)(
 144:../Generated_Code/AS1.c ****                  PORT_PCR_MUX(0x03)
 145:../Generated_Code/AS1.c ****                 ));                                                  
 146:../Generated_Code/AS1.c ****   /* PORTB_PCR11: ISF=0,MUX=3 */
 147:../Generated_Code/AS1.c ****   PORTB_PCR11 = (uint32_t)((PORTB_PCR11 & (uint32_t)~(uint32_t)(
 125              		.loc 1 147 0
 126 00a8 4FF42043 		mov	r3, #40960
 127 00ac C4F20403 		movt	r3, 16388
 128 00b0 4FF42042 		mov	r2, #40960
 129 00b4 C4F20402 		movt	r2, 16388
 130 00b8 D26A     		ldr	r2, [r2, #44]
 131 00ba 22F08072 		bic	r2, r2, #16777216
 132 00be 22F4E062 		bic	r2, r2, #1792
 133 00c2 42F44072 		orr	r2, r2, #768
 134 00c6 DA62     		str	r2, [r3, #44]
 148:../Generated_Code/AS1.c ****                  PORT_PCR_ISF_MASK |
 149:../Generated_Code/AS1.c ****                  PORT_PCR_MUX(0x04)
 150:../Generated_Code/AS1.c ****                 )) | (uint32_t)(
 151:../Generated_Code/AS1.c ****                  PORT_PCR_MUX(0x03)
 152:../Generated_Code/AS1.c ****                 ));                                                  
 153:../Generated_Code/AS1.c ****   /* NVICIP51: PRI51=0 */
 154:../Generated_Code/AS1.c ****   NVICIP51 = 0x00U;                                                   
 135              		.loc 1 154 0
 136 00c8 4FF46143 		mov	r3, #57600
 137 00cc CEF20003 		movt	r3, 57344
 138 00d0 4FF00002 		mov	r2, #0
 139 00d4 83F83323 		strb	r2, [r3, #819]
 155:../Generated_Code/AS1.c ****   /* NVICISER1: SETENA|=0x00080000 */
 156:../Generated_Code/AS1.c ****   NVICISER1 |= NVIC_ISER_SETENA(0x00080000);                                                   
 140              		.loc 1 156 0
 141 00d8 4FF46143 		mov	r3, #57600
 142 00dc CEF20003 		movt	r3, 57344
 143 00e0 4FF46142 		mov	r2, #57600
 144 00e4 CEF20002 		movt	r2, 57344
 145 00e8 5268     		ldr	r2, [r2, #4]
 146 00ea 42F40022 		orr	r2, r2, #524288
 147 00ee 5A60     		str	r2, [r3, #4]
 157:../Generated_Code/AS1.c ****   /* NVICIP52: PRI52=0 */
 158:../Generated_Code/AS1.c ****   NVICIP52 = 0x00U;                                                   
 148              		.loc 1 158 0
 149 00f0 4FF46143 		mov	r3, #57600
 150 00f4 CEF20003 		movt	r3, 57344
 151 00f8 4FF00002 		mov	r2, #0
 152 00fc 83F83423 		strb	r2, [r3, #820]
 159:../Generated_Code/AS1.c ****   /* NVICISER1: SETENA|=0x00100000 */
 160:../Generated_Code/AS1.c ****   NVICISER1 |= NVIC_ISER_SETENA(0x00100000);                                                   
 153              		.loc 1 160 0
 154 0100 4FF46143 		mov	r3, #57600
 155 0104 CEF20003 		movt	r3, 57344
 156 0108 4FF46142 		mov	r2, #57600
 157 010c CEF20002 		movt	r2, 57344
 158 0110 5268     		ldr	r2, [r2, #4]
 159 0112 42F48012 		orr	r2, r2, #1048576
 160 0116 5A60     		str	r2, [r3, #4]
 161:../Generated_Code/AS1.c ****   UART_PDD_EnableTransmitter(UART3_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
 161              		.loc 1 161 0
 162 0118 4FF45043 		mov	r3, #53248
 163 011c C4F20603 		movt	r3, 16390
 164 0120 4FF45042 		mov	r2, #53248
 165 0124 C4F20602 		movt	r2, 16390
 166 0128 D278     		ldrb	r2, [r2, #3]
 167 012a D2B2     		uxtb	r2, r2
 168 012c 22F00802 		bic	r2, r2, #8
 169 0130 D2B2     		uxtb	r2, r2
 170 0132 DA70     		strb	r2, [r3, #3]
 162:../Generated_Code/AS1.c ****   UART_PDD_EnableReceiver(UART3_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
 171              		.loc 1 162 0
 172 0134 4FF45043 		mov	r3, #53248
 173 0138 C4F20603 		movt	r3, 16390
 174 013c 4FF45042 		mov	r2, #53248
 175 0140 C4F20602 		movt	r2, 16390
 176 0144 D278     		ldrb	r2, [r2, #3]
 177 0146 D2B2     		uxtb	r2, r2
 178 0148 22F00402 		bic	r2, r2, #4
 179 014c D2B2     		uxtb	r2, r2
 180 014e DA70     		strb	r2, [r3, #3]
 163:../Generated_Code/AS1.c ****   DeviceDataPrv->SerFlag = 0x00U;      /* Reset flags */
 181              		.loc 1 163 0
 182 0150 FB68     		ldr	r3, [r7, #12]
 183 0152 4FF00002 		mov	r2, #0
 184 0156 1A80     		strh	r2, [r3, #0]	@ movhi
 164:../Generated_Code/AS1.c ****   /* UART3_C1: LOOPS=0,UARTSWAI=0,RSRC=0,M=0,WAKE=0,ILT=0,PE=0,PT=0 */
 165:../Generated_Code/AS1.c ****   UART3_C1 = 0x00U;                    /*  Set the C1 register */
 185              		.loc 1 165 0
 186 0158 4FF45043 		mov	r3, #53248
 187 015c C4F20603 		movt	r3, 16390
 188 0160 4FF00002 		mov	r2, #0
 189 0164 9A70     		strb	r2, [r3, #2]
 166:../Generated_Code/AS1.c ****   /* UART3_C3: R8=0,T8=0,TXDIR=0,TXINV=0,ORIE=0,NEIE=0,FEIE=0,PEIE=0 */
 167:../Generated_Code/AS1.c ****   UART3_C3 = 0x00U;                    /*  Set the C3 register */
 190              		.loc 1 167 0
 191 0166 4FF45043 		mov	r3, #53248
 192 016a C4F20603 		movt	r3, 16390
 193 016e 4FF00002 		mov	r2, #0
 194 0172 9A71     		strb	r2, [r3, #6]
 168:../Generated_Code/AS1.c ****   /* UART3_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
 169:../Generated_Code/AS1.c ****   UART3_S2 = 0x00U;                    /*  Set the S2 register */
 195              		.loc 1 169 0
 196 0174 4FF45043 		mov	r3, #53248
 197 0178 C4F20603 		movt	r3, 16390
 198 017c 4FF00002 		mov	r2, #0
 199 0180 5A71     		strb	r2, [r3, #5]
 170:../Generated_Code/AS1.c ****   /* UART3_MODEM: ??=0,??=0,??=0,??=0,RXRTSE=0,TXRTSPOL=0,TXRTSE=0,TXCTSE=0 */
 171:../Generated_Code/AS1.c ****   UART3_MODEM = 0x00U;                 /*  Set the MODEM register */
 200              		.loc 1 171 0
 201 0182 4FF45043 		mov	r3, #53248
 202 0186 C4F20603 		movt	r3, 16390
 203 018a 4FF00002 		mov	r2, #0
 204 018e 5A73     		strb	r2, [r3, #13]
 172:../Generated_Code/AS1.c ****   UART_PDD_SetBaudRateFineAdjust(UART3_BASE_PTR, 4u); /* Set baud rate fine adjust */
 205              		.loc 1 172 0
 206 0190 4FF45043 		mov	r3, #53248
 207 0194 C4F20603 		movt	r3, 16390
 208 0198 4FF45042 		mov	r2, #53248
 209 019c C4F20602 		movt	r2, 16390
 210 01a0 927A     		ldrb	r2, [r2, #10]
 211 01a2 D2B2     		uxtb	r2, r2
 212 01a4 D2B2     		uxtb	r2, r2
 213 01a6 22F01F02 		bic	r2, r2, #31
 214 01aa D2B2     		uxtb	r2, r2
 215 01ac 42F00402 		orr	r2, r2, #4
 216 01b0 D2B2     		uxtb	r2, r2
 217 01b2 D2B2     		uxtb	r2, r2
 218 01b4 9A72     		strb	r2, [r3, #10]
 173:../Generated_Code/AS1.c ****   UART_PDD_SetBaudRate(UART3_BASE_PTR, 78U); /* Set the baud rate register. */
 219              		.loc 1 173 0
 220 01b6 4FF45043 		mov	r3, #53248
 221 01ba C4F20603 		movt	r3, 16390
 222 01be 4FF45042 		mov	r2, #53248
 223 01c2 C4F20602 		movt	r2, 16390
 224 01c6 1278     		ldrb	r2, [r2, #0]
 225 01c8 D2B2     		uxtb	r2, r2
 226 01ca 22F01F02 		bic	r2, r2, #31
 227 01ce D2B2     		uxtb	r2, r2
 228 01d0 1A70     		strb	r2, [r3, #0]
 229 01d2 4FF45043 		mov	r3, #53248
 230 01d6 C4F20603 		movt	r3, 16390
 231 01da 4FF04E02 		mov	r2, #78
 232 01de 5A70     		strb	r2, [r3, #1]
 174:../Generated_Code/AS1.c ****   UART_PDD_EnableFifo(UART3_BASE_PTR, (UART_PDD_TX_FIFO_ENABLE | UART_PDD_RX_FIFO_ENABLE)); /* Enab
 233              		.loc 1 174 0
 234 01e0 4FF45043 		mov	r3, #53248
 235 01e4 C4F20603 		movt	r3, 16390
 236 01e8 4FF45042 		mov	r2, #53248
 237 01ec C4F20602 		movt	r2, 16390
 238 01f0 127C     		ldrb	r2, [r2, #16]
 239 01f2 D2B2     		uxtb	r2, r2
 240 01f4 62F07702 		orn	r2, r2, #119
 241 01f8 D2B2     		uxtb	r2, r2
 242 01fa 1A74     		strb	r2, [r3, #16]
 175:../Generated_Code/AS1.c ****   UART_PDD_FlushFifo(UART3_BASE_PTR, (UART_PDD_TX_FIFO_FLUSH | UART_PDD_RX_FIFO_FLUSH)); /* Flush R
 243              		.loc 1 175 0
 244 01fc 4FF45043 		mov	r3, #53248
 245 0200 C4F20603 		movt	r3, 16390
 246 0204 4FF45042 		mov	r2, #53248
 247 0208 C4F20602 		movt	r2, 16390
 248 020c 527C     		ldrb	r2, [r2, #17]
 249 020e D2B2     		uxtb	r2, r2
 250 0210 62F03F02 		orn	r2, r2, #63
 251 0214 D2B2     		uxtb	r2, r2
 252 0216 5A74     		strb	r2, [r3, #17]
 176:../Generated_Code/AS1.c ****   UART_PDD_EnableTransmitter(UART3_BASE_PTR, PDD_ENABLE); /* Enable transmitter */
 253              		.loc 1 176 0
 254 0218 4FF45043 		mov	r3, #53248
 255 021c C4F20603 		movt	r3, 16390
 256 0220 4FF45042 		mov	r2, #53248
 257 0224 C4F20602 		movt	r2, 16390
 258 0228 D278     		ldrb	r2, [r2, #3]
 259 022a D2B2     		uxtb	r2, r2
 260 022c D2B2     		uxtb	r2, r2
 261 022e 42F00802 		orr	r2, r2, #8
 262 0232 D2B2     		uxtb	r2, r2
 263 0234 D2B2     		uxtb	r2, r2
 264 0236 DA70     		strb	r2, [r3, #3]
 177:../Generated_Code/AS1.c ****   UART_PDD_EnableReceiver(UART3_BASE_PTR, PDD_ENABLE); /* Enable receiver */
 265              		.loc 1 177 0
 266 0238 4FF45043 		mov	r3, #53248
 267 023c C4F20603 		movt	r3, 16390
 268 0240 4FF45042 		mov	r2, #53248
 269 0244 C4F20602 		movt	r2, 16390
 270 0248 D278     		ldrb	r2, [r2, #3]
 271 024a D2B2     		uxtb	r2, r2
 272 024c D2B2     		uxtb	r2, r2
 273 024e 42F00402 		orr	r2, r2, #4
 274 0252 D2B2     		uxtb	r2, r2
 275 0254 D2B2     		uxtb	r2, r2
 276 0256 DA70     		strb	r2, [r3, #3]
 178:../Generated_Code/AS1.c ****   UART_PDD_EnableInterrupt(UART3_BASE_PTR, ( UART_PDD_INTERRUPT_RECEIVER )); /* Enable interrupts *
 277              		.loc 1 178 0
 278 0258 4FF45043 		mov	r3, #53248
 279 025c C4F20603 		movt	r3, 16390
 280 0260 4FF45042 		mov	r2, #53248
 281 0264 C4F20602 		movt	r2, 16390
 282 0268 D278     		ldrb	r2, [r2, #3]
 283 026a D2B2     		uxtb	r2, r2
 284 026c 42F02002 		orr	r2, r2, #32
 285 0270 D2B2     		uxtb	r2, r2
 286 0272 DA70     		strb	r2, [r3, #3]
 287 0274 4FF45043 		mov	r3, #53248
 288 0278 C4F20603 		movt	r3, 16390
 289 027c 4FF45042 		mov	r2, #53248
 290 0280 C4F20602 		movt	r2, 16390
 291 0284 9279     		ldrb	r2, [r2, #6]
 292 0286 D2B2     		uxtb	r2, r2
 293 0288 9A71     		strb	r2, [r3, #6]
 179:../Generated_Code/AS1.c ****   /* Registration of the device structure */
 180:../Generated_Code/AS1.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_AS1_ID,DeviceDataPrv);
 294              		.loc 1 180 0
 295 028a 40F20003 		movw	r3, #:lower16:PE_LDD_DeviceDataList
 296 028e C0F20003 		movt	r3, #:upper16:PE_LDD_DeviceDataList
 297 0292 FA68     		ldr	r2, [r7, #12]
 298 0294 5A62     		str	r2, [r3, #36]
 181:../Generated_Code/AS1.c ****   return ((LDD_TDeviceData *)DeviceDataPrv);
 299              		.loc 1 181 0
 300 0296 FB68     		ldr	r3, [r7, #12]
 182:../Generated_Code/AS1.c **** }
 301              		.loc 1 182 0
 302 0298 1846     		mov	r0, r3
 303 029a 07F11407 		add	r7, r7, #20
 304 029e BD46     		mov	sp, r7
 305 02a0 80BC     		pop	{r7}
 306 02a2 7047     		bx	lr
 307              		.cfi_endproc
 308              	.LFE0:
 310              		.section	.text.AS1_Deinit,"ax",%progbits
 311              		.align	2
 312              		.global	AS1_Deinit
 313              		.thumb
 314              		.thumb_func
 316              	AS1_Deinit:
 317              	.LFB1:
 183:../Generated_Code/AS1.c **** 
 184:../Generated_Code/AS1.c **** /*
 185:../Generated_Code/AS1.c **** ** ===================================================================
 186:../Generated_Code/AS1.c **** **     Method      :  AS1_Deinit (component Serial_LDD)
 187:../Generated_Code/AS1.c **** **
 188:../Generated_Code/AS1.c **** **     Description :
 189:../Generated_Code/AS1.c **** **          Deinitializes the device. Switches off the device, frees
 190:../Generated_Code/AS1.c **** **         the device data structure memory, interrupts vectors, etc.
 191:../Generated_Code/AS1.c **** **     Parameters  :
 192:../Generated_Code/AS1.c **** **         NAME            - DESCRIPTION
 193:../Generated_Code/AS1.c **** **       * DeviceDataPtr   - Device data structure
 194:../Generated_Code/AS1.c **** **                           pointer returned by <Init> method.
 195:../Generated_Code/AS1.c **** **     Returns     : Nothing
 196:../Generated_Code/AS1.c **** ** ===================================================================
 197:../Generated_Code/AS1.c **** */
 198:../Generated_Code/AS1.c **** void AS1_Deinit(LDD_TDeviceData *DeviceDataPtr)
 199:../Generated_Code/AS1.c **** {
 318              		.loc 1 199 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 16
 321              		@ frame_needed = 1, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 323 0000 80B4     		push	{r7}
 324              	.LCFI3:
 325              		.cfi_def_cfa_offset 4
 326              		.cfi_offset 7, -4
 327 0002 85B0     		sub	sp, sp, #20
 328              	.LCFI4:
 329              		.cfi_def_cfa_offset 24
 330 0004 00AF     		add	r7, sp, #0
 331              	.LCFI5:
 332              		.cfi_def_cfa_register 7
 333 0006 7860     		str	r0, [r7, #4]
 200:../Generated_Code/AS1.c ****   AS1_TDeviceDataPtr DeviceDataPrv = (AS1_TDeviceDataPtr)DeviceDataPtr;
 334              		.loc 1 200 0
 335 0008 7B68     		ldr	r3, [r7, #4]
 336 000a FB60     		str	r3, [r7, #12]
 201:../Generated_Code/AS1.c **** 
 202:../Generated_Code/AS1.c ****   (void)DeviceDataPrv;
 203:../Generated_Code/AS1.c ****   UART_PDD_DisableInterrupt(UART3_BASE_PTR, ( UART_PDD_INTERRUPT_RECEIVER | UART_PDD_INTERRUPT_TRAN
 337              		.loc 1 203 0
 338 000c 4FF45043 		mov	r3, #53248
 339 0010 C4F20603 		movt	r3, 16390
 340 0014 4FF45042 		mov	r2, #53248
 341 0018 C4F20602 		movt	r2, 16390
 342 001c D278     		ldrb	r2, [r2, #3]
 343 001e D2B2     		uxtb	r2, r2
 344 0020 02F05F02 		and	r2, r2, #95
 345 0024 D2B2     		uxtb	r2, r2
 346 0026 DA70     		strb	r2, [r3, #3]
 347 0028 4FF45043 		mov	r3, #53248
 348 002c C4F20603 		movt	r3, 16390
 349 0030 4FF45042 		mov	r2, #53248
 350 0034 C4F20602 		movt	r2, 16390
 351 0038 9279     		ldrb	r2, [r2, #6]
 352 003a D2B2     		uxtb	r2, r2
 353 003c 9A71     		strb	r2, [r3, #6]
 204:../Generated_Code/AS1.c ****   UART_PDD_EnableTransmitter(UART3_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
 354              		.loc 1 204 0
 355 003e 4FF45043 		mov	r3, #53248
 356 0042 C4F20603 		movt	r3, 16390
 357 0046 4FF45042 		mov	r2, #53248
 358 004a C4F20602 		movt	r2, 16390
 359 004e D278     		ldrb	r2, [r2, #3]
 360 0050 D2B2     		uxtb	r2, r2
 361 0052 22F00802 		bic	r2, r2, #8
 362 0056 D2B2     		uxtb	r2, r2
 363 0058 DA70     		strb	r2, [r3, #3]
 205:../Generated_Code/AS1.c ****   UART_PDD_EnableReceiver(UART3_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
 364              		.loc 1 205 0
 365 005a 4FF45043 		mov	r3, #53248
 366 005e C4F20603 		movt	r3, 16390
 367 0062 4FF45042 		mov	r2, #53248
 368 0066 C4F20602 		movt	r2, 16390
 369 006a D278     		ldrb	r2, [r2, #3]
 370 006c D2B2     		uxtb	r2, r2
 371 006e 22F00402 		bic	r2, r2, #4
 372 0072 D2B2     		uxtb	r2, r2
 373 0074 DA70     		strb	r2, [r3, #3]
 206:../Generated_Code/AS1.c ****   /* {Default RTOS Adapter} Restore interrupt vector: IVT is static, no code is generated */
 207:../Generated_Code/AS1.c ****   /* {Default RTOS Adapter} Restore interrupt vector: IVT is static, no code is generated */
 208:../Generated_Code/AS1.c ****   /* Disable clock gate */
 209:../Generated_Code/AS1.c ****   /* SIM_SCGC4: UART3=0 */
 210:../Generated_Code/AS1.c ****   SIM_SCGC4 &= (uint32_t)~(uint32_t)(SIM_SCGC4_UART3_MASK);                                        
 374              		.loc 1 210 0
 375 0076 4FF4E043 		mov	r3, #28672
 376 007a C4F20403 		movt	r3, 16388
 377 007e 4FF4E042 		mov	r2, #28672
 378 0082 C4F20402 		movt	r2, 16388
 379 0086 02F58052 		add	r2, r2, #4096
 380 008a 02F13402 		add	r2, r2, #52
 381 008e 1268     		ldr	r2, [r2, #0]
 382 0090 22F40052 		bic	r2, r2, #8192
 383 0094 03F58053 		add	r3, r3, #4096
 384 0098 03F13403 		add	r3, r3, #52
 385 009c 1A60     		str	r2, [r3, #0]
 211:../Generated_Code/AS1.c ****   /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 212:../Generated_Code/AS1.c **** }
 386              		.loc 1 212 0
 387 009e 07F11407 		add	r7, r7, #20
 388 00a2 BD46     		mov	sp, r7
 389 00a4 80BC     		pop	{r7}
 390 00a6 7047     		bx	lr
 391              		.cfi_endproc
 392              	.LFE1:
 394              		.section	.text.AS1_ReceiveBlock,"ax",%progbits
 395              		.align	2
 396              		.global	AS1_ReceiveBlock
 397              		.thumb
 398              		.thumb_func
 400              	AS1_ReceiveBlock:
 401              	.LFB2:
 213:../Generated_Code/AS1.c **** 
 214:../Generated_Code/AS1.c **** /*
 215:../Generated_Code/AS1.c **** ** ===================================================================
 216:../Generated_Code/AS1.c **** **     Method      :  AS1_ReceiveBlock (component Serial_LDD)
 217:../Generated_Code/AS1.c **** **
 218:../Generated_Code/AS1.c **** **     Description :
 219:../Generated_Code/AS1.c **** **         Specifies the number of data to receive. The method returns
 220:../Generated_Code/AS1.c **** **         ERR_BUSY until the specified number of characters is
 221:../Generated_Code/AS1.c **** **         received. Method <CancelBlockReception> can be used to
 222:../Generated_Code/AS1.c **** **         cancel a running receive operation.
 223:../Generated_Code/AS1.c **** **     Parameters  :
 224:../Generated_Code/AS1.c **** **         NAME            - DESCRIPTION
 225:../Generated_Code/AS1.c **** **       * DeviceDataPtr   - Device data structure
 226:../Generated_Code/AS1.c **** **                           pointer returned by <Init> method.
 227:../Generated_Code/AS1.c **** **       * BufferPtr       - Pointer to a buffer where
 228:../Generated_Code/AS1.c **** **                           received characters will be stored.
 229:../Generated_Code/AS1.c **** **         Size            - Number of characters to receive
 230:../Generated_Code/AS1.c **** **     Returns     :
 231:../Generated_Code/AS1.c **** **         ---             - Error code, possible codes:
 232:../Generated_Code/AS1.c **** **                           ERR_OK - OK
 233:../Generated_Code/AS1.c **** **                           ERR_SPEED - The component does not work in
 234:../Generated_Code/AS1.c **** **                           the active clock configuration.
 235:../Generated_Code/AS1.c **** **                           ERR_DISABLED - The component or device is
 236:../Generated_Code/AS1.c **** **                           disabled.
 237:../Generated_Code/AS1.c **** **                           ERR_BUSY - The previous receive request is
 238:../Generated_Code/AS1.c **** **                           pending.
 239:../Generated_Code/AS1.c **** ** ===================================================================
 240:../Generated_Code/AS1.c **** */
 241:../Generated_Code/AS1.c **** LDD_TError AS1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
 242:../Generated_Code/AS1.c **** {
 402              		.loc 1 242 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 24
 405              		@ frame_needed = 1, uses_anonymous_args = 0
 406              		@ link register save eliminated.
 407 0000 80B4     		push	{r7}
 408              	.LCFI6:
 409              		.cfi_def_cfa_offset 4
 410              		.cfi_offset 7, -4
 411 0002 87B0     		sub	sp, sp, #28
 412              	.LCFI7:
 413              		.cfi_def_cfa_offset 32
 414 0004 00AF     		add	r7, sp, #0
 415              	.LCFI8:
 416              		.cfi_def_cfa_register 7
 417 0006 F860     		str	r0, [r7, #12]
 418 0008 B960     		str	r1, [r7, #8]
 419 000a 1346     		mov	r3, r2
 420 000c FB80     		strh	r3, [r7, #6]	@ movhi
 243:../Generated_Code/AS1.c ****   AS1_TDeviceDataPtr DeviceDataPrv = (AS1_TDeviceDataPtr)DeviceDataPtr;
 421              		.loc 1 243 0
 422 000e FB68     		ldr	r3, [r7, #12]
 423 0010 7B61     		str	r3, [r7, #20]
 244:../Generated_Code/AS1.c **** 
 245:../Generated_Code/AS1.c ****   if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
 424              		.loc 1 245 0
 425 0012 FB88     		ldrh	r3, [r7, #6]
 426 0014 002B     		cmp	r3, #0
 427 0016 02D1     		bne	.L4
 246:../Generated_Code/AS1.c ****     return ERR_PARAM_SIZE;             /* If no then error */
 428              		.loc 1 246 0
 429 0018 4FF08403 		mov	r3, #132
 430 001c 45E0     		b	.L5
 431              	.L4:
 247:../Generated_Code/AS1.c ****   }
 248:../Generated_Code/AS1.c ****   if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the previous receive operation pending? */
 432              		.loc 1 248 0
 433 001e 7B69     		ldr	r3, [r7, #20]
 434 0020 1B89     		ldrh	r3, [r3, #8]
 435 0022 002B     		cmp	r3, #0
 436 0024 02D0     		beq	.L6
 249:../Generated_Code/AS1.c ****     return ERR_BUSY;                   /* If yes then error */
 437              		.loc 1 249 0
 438 0026 4FF00803 		mov	r3, #8
 439 002a 3EE0     		b	.L5
 440              	.L6:
 250:../Generated_Code/AS1.c ****   }
 251:../Generated_Code/AS1.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 252:../Generated_Code/AS1.c ****   EnterCritical();
 441              		.loc 1 252 0
 442 002c 40F20003 		movw	r3, #:lower16:SR_lock
 443 0030 C0F20003 		movt	r3, #:upper16:SR_lock
 444 0034 1B78     		ldrb	r3, [r3, #0]
 445 0036 DBB2     		uxtb	r3, r3
 446 0038 03F10103 		add	r3, r3, #1
 447 003c DBB2     		uxtb	r3, r3
 448 003e 1A46     		mov	r2, r3
 449 0040 40F20003 		movw	r3, #:lower16:SR_lock
 450 0044 C0F20003 		movt	r3, #:upper16:SR_lock
 451 0048 1146     		mov	r1, r2
 452 004a 1970     		strb	r1, [r3, #0]
 453 004c 012A     		cmp	r2, #1
 454 004e 07D1     		bne	.L7
 455              		.loc 1 252 0 is_stmt 0 discriminator 1
 456 0050 40F20003 		movw	r3, #:lower16:SR_reg
 457 0054 C0F20003 		movt	r3, #:upper16:SR_reg
 458              	@ 252 "../Generated_Code/AS1.c" 1
 459 0058 EFF31380 		MRS R0, FAULTMASK
 460 005c 71B6     		CPSID f
 461 005e 1870     		STRB R0, [r3, #0]
 462              	@ 0 "" 2
 463              		.thumb
 464              	.L7:
 253:../Generated_Code/AS1.c ****   DeviceDataPrv->InpDataPtr = BufferPtr; /* Store a pointer to the input data. */
 465              		.loc 1 253 0 is_stmt 1
 466 0060 7B69     		ldr	r3, [r7, #20]
 467 0062 BA68     		ldr	r2, [r7, #8]
 468 0064 5A60     		str	r2, [r3, #4]
 254:../Generated_Code/AS1.c ****   DeviceDataPrv->InpDataNumReq = Size; /* Store a number of characters to be received. */
 469              		.loc 1 254 0
 470 0066 7B69     		ldr	r3, [r7, #20]
 471 0068 FA88     		ldrh	r2, [r7, #6]	@ movhi
 472 006a 1A81     		strh	r2, [r3, #8]	@ movhi
 255:../Generated_Code/AS1.c ****   DeviceDataPrv->InpRecvDataNum = 0x00U; /* Set number of received characters to zero. */
 473              		.loc 1 255 0
 474 006c 7B69     		ldr	r3, [r7, #20]
 475 006e 4FF00002 		mov	r2, #0
 476 0072 5A80     		strh	r2, [r3, #2]	@ movhi
 256:../Generated_Code/AS1.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 257:../Generated_Code/AS1.c ****   ExitCritical();
 477              		.loc 1 257 0
 478 0074 40F20003 		movw	r3, #:lower16:SR_lock
 479 0078 C0F20003 		movt	r3, #:upper16:SR_lock
 480 007c 1B78     		ldrb	r3, [r3, #0]
 481 007e DBB2     		uxtb	r3, r3
 482 0080 03F1FF33 		add	r3, r3, #-1
 483 0084 DBB2     		uxtb	r3, r3
 484 0086 1A46     		mov	r2, r3
 485 0088 40F20003 		movw	r3, #:lower16:SR_lock
 486 008c C0F20003 		movt	r3, #:upper16:SR_lock
 487 0090 1146     		mov	r1, r2
 488 0092 1970     		strb	r1, [r3, #0]
 489 0094 002A     		cmp	r2, #0
 490 0096 06D1     		bne	.L8
 491              		.loc 1 257 0 is_stmt 0 discriminator 1
 492 0098 40F20003 		movw	r3, #:lower16:SR_reg
 493 009c C0F20003 		movt	r3, #:upper16:SR_reg
 494              	@ 257 "../Generated_Code/AS1.c" 1
 495 00a0 1878     		ldrb r0, [r3, #0]
 496 00a2 80F31388 		msr FAULTMASK,r0;
 497              		
 498              	@ 0 "" 2
 499              		.thumb
 500              	.L8:
 258:../Generated_Code/AS1.c ****   return ERR_OK;                       /* OK */
 501              		.loc 1 258 0 is_stmt 1
 502 00a6 4FF00003 		mov	r3, #0
 503              	.L5:
 259:../Generated_Code/AS1.c **** }
 504              		.loc 1 259 0
 505 00aa 1846     		mov	r0, r3
 506 00ac 07F11C07 		add	r7, r7, #28
 507 00b0 BD46     		mov	sp, r7
 508 00b2 80BC     		pop	{r7}
 509 00b4 7047     		bx	lr
 510              		.cfi_endproc
 511              	.LFE2:
 513 00b6 00BF     		.section	.text.AS1_SendBlock,"ax",%progbits
 514              		.align	2
 515              		.global	AS1_SendBlock
 516              		.thumb
 517              		.thumb_func
 519              	AS1_SendBlock:
 520              	.LFB3:
 260:../Generated_Code/AS1.c **** 
 261:../Generated_Code/AS1.c **** /*
 262:../Generated_Code/AS1.c **** ** ===================================================================
 263:../Generated_Code/AS1.c **** **     Method      :  AS1_SendBlock (component Serial_LDD)
 264:../Generated_Code/AS1.c **** **
 265:../Generated_Code/AS1.c **** **     Description :
 266:../Generated_Code/AS1.c **** **         Sends a block of characters. The method returns ERR_BUSY
 267:../Generated_Code/AS1.c **** **         when the previous block transmission is not completed.
 268:../Generated_Code/AS1.c **** **         Method <CancelBlockTransmission> can be used to cancel a
 269:../Generated_Code/AS1.c **** **         transmit operation. This method is available only if the
 270:../Generated_Code/AS1.c **** **         transmitter property is enabled.
 271:../Generated_Code/AS1.c **** **     Parameters  :
 272:../Generated_Code/AS1.c **** **         NAME            - DESCRIPTION
 273:../Generated_Code/AS1.c **** **       * DeviceDataPtr   - Device data structure
 274:../Generated_Code/AS1.c **** **                           pointer returned by <Init> method.
 275:../Generated_Code/AS1.c **** **       * BufferPtr       - Pointer to a buffer from where
 276:../Generated_Code/AS1.c **** **                           data will be sent.
 277:../Generated_Code/AS1.c **** **         Size            - Number of characters in the buffer.
 278:../Generated_Code/AS1.c **** **     Returns     :
 279:../Generated_Code/AS1.c **** **         ---             - Error code, possible codes:
 280:../Generated_Code/AS1.c **** **                           ERR_OK - OK
 281:../Generated_Code/AS1.c **** **                           ERR_SPEED - The component does not work in
 282:../Generated_Code/AS1.c **** **                           the active clock configuration.
 283:../Generated_Code/AS1.c **** **                           ERR_DISABLED - The component or device is
 284:../Generated_Code/AS1.c **** **                           disabled.
 285:../Generated_Code/AS1.c **** **                           ERR_BUSY - The previous transmit request is
 286:../Generated_Code/AS1.c **** **                           pending.
 287:../Generated_Code/AS1.c **** ** ===================================================================
 288:../Generated_Code/AS1.c **** */
 289:../Generated_Code/AS1.c **** LDD_TError AS1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
 290:../Generated_Code/AS1.c **** {
 521              		.loc 1 290 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 24
 524              		@ frame_needed = 1, uses_anonymous_args = 0
 525              		@ link register save eliminated.
 526 0000 80B4     		push	{r7}
 527              	.LCFI9:
 528              		.cfi_def_cfa_offset 4
 529              		.cfi_offset 7, -4
 530 0002 87B0     		sub	sp, sp, #28
 531              	.LCFI10:
 532              		.cfi_def_cfa_offset 32
 533 0004 00AF     		add	r7, sp, #0
 534              	.LCFI11:
 535              		.cfi_def_cfa_register 7
 536 0006 F860     		str	r0, [r7, #12]
 537 0008 B960     		str	r1, [r7, #8]
 538 000a 1346     		mov	r3, r2
 539 000c FB80     		strh	r3, [r7, #6]	@ movhi
 291:../Generated_Code/AS1.c ****   AS1_TDeviceDataPtr DeviceDataPrv = (AS1_TDeviceDataPtr)DeviceDataPtr;
 540              		.loc 1 291 0
 541 000e FB68     		ldr	r3, [r7, #12]
 542 0010 7B61     		str	r3, [r7, #20]
 292:../Generated_Code/AS1.c **** 
 293:../Generated_Code/AS1.c ****   if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
 543              		.loc 1 293 0
 544 0012 FB88     		ldrh	r3, [r7, #6]
 545 0014 002B     		cmp	r3, #0
 546 0016 02D1     		bne	.L10
 294:../Generated_Code/AS1.c ****     return ERR_PARAM_SIZE;             /* If no then error */
 547              		.loc 1 294 0
 548 0018 4FF08403 		mov	r3, #132
 549 001c 65E0     		b	.L11
 550              	.L10:
 295:../Generated_Code/AS1.c ****   }
 296:../Generated_Code/AS1.c ****   if (DeviceDataPrv->OutDataNumReq != 0x00U) { /* Is the previous transmit operation pending? */
 551              		.loc 1 296 0
 552 001e 7B69     		ldr	r3, [r7, #20]
 553 0020 1B8A     		ldrh	r3, [r3, #16]
 554 0022 002B     		cmp	r3, #0
 555 0024 02D0     		beq	.L12
 297:../Generated_Code/AS1.c ****     return ERR_BUSY;                   /* If yes then error */
 556              		.loc 1 297 0
 557 0026 4FF00803 		mov	r3, #8
 558 002a 5EE0     		b	.L11
 559              	.L12:
 298:../Generated_Code/AS1.c ****   }
 299:../Generated_Code/AS1.c ****   /* {Default RTOS Adapter} Critical section begin, general PE function is used */
 300:../Generated_Code/AS1.c ****   EnterCritical();
 560              		.loc 1 300 0
 561 002c 40F20003 		movw	r3, #:lower16:SR_lock
 562 0030 C0F20003 		movt	r3, #:upper16:SR_lock
 563 0034 1B78     		ldrb	r3, [r3, #0]
 564 0036 DBB2     		uxtb	r3, r3
 565 0038 03F10103 		add	r3, r3, #1
 566 003c DBB2     		uxtb	r3, r3
 567 003e 1A46     		mov	r2, r3
 568 0040 40F20003 		movw	r3, #:lower16:SR_lock
 569 0044 C0F20003 		movt	r3, #:upper16:SR_lock
 570 0048 1146     		mov	r1, r2
 571 004a 1970     		strb	r1, [r3, #0]
 572 004c 012A     		cmp	r2, #1
 573 004e 07D1     		bne	.L13
 574              		.loc 1 300 0 is_stmt 0 discriminator 1
 575 0050 40F20003 		movw	r3, #:lower16:SR_reg
 576 0054 C0F20003 		movt	r3, #:upper16:SR_reg
 577              	@ 300 "../Generated_Code/AS1.c" 1
 578 0058 EFF31380 		MRS R0, FAULTMASK
 579 005c 71B6     		CPSID f
 580 005e 1870     		STRB R0, [r3, #0]
 581              	@ 0 "" 2
 582              		.thumb
 583              	.L13:
 301:../Generated_Code/AS1.c ****   DeviceDataPrv->OutDataPtr = BufferPtr; /* Set a pointer to the output data. */
 584              		.loc 1 301 0 is_stmt 1
 585 0060 7B69     		ldr	r3, [r7, #20]
 586 0062 BA68     		ldr	r2, [r7, #8]
 587 0064 DA60     		str	r2, [r3, #12]
 302:../Generated_Code/AS1.c ****   DeviceDataPrv->OutDataNumReq = Size; /* Set the counter of characters to be sent. */
 588              		.loc 1 302 0
 589 0066 7B69     		ldr	r3, [r7, #20]
 590 0068 FA88     		ldrh	r2, [r7, #6]	@ movhi
 591 006a 1A82     		strh	r2, [r3, #16]	@ movhi
 303:../Generated_Code/AS1.c ****   DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters. */
 592              		.loc 1 303 0
 593 006c 7B69     		ldr	r3, [r7, #20]
 594 006e 4FF00002 		mov	r2, #0
 595 0072 5A81     		strh	r2, [r3, #10]	@ movhi
 304:../Generated_Code/AS1.c ****   DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
 596              		.loc 1 304 0
 597 0074 7B69     		ldr	r3, [r7, #20]
 598 0076 1B88     		ldrh	r3, [r3, #0]
 599 0078 43F00103 		orr	r3, r3, #1
 600 007c 9AB2     		uxth	r2, r3
 601 007e 7B69     		ldr	r3, [r7, #20]
 602 0080 1A80     		strh	r2, [r3, #0]	@ movhi
 305:../Generated_Code/AS1.c ****   UART_PDD_EnableInterrupt(UART3_BASE_PTR, UART_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt 
 603              		.loc 1 305 0
 604 0082 4FF45043 		mov	r3, #53248
 605 0086 C4F20603 		movt	r3, 16390
 606 008a 4FF45042 		mov	r2, #53248
 607 008e C4F20602 		movt	r2, 16390
 608 0092 D278     		ldrb	r2, [r2, #3]
 609 0094 D2B2     		uxtb	r2, r2
 610 0096 62F07F02 		orn	r2, r2, #127
 611 009a D2B2     		uxtb	r2, r2
 612 009c DA70     		strb	r2, [r3, #3]
 613 009e 4FF45043 		mov	r3, #53248
 614 00a2 C4F20603 		movt	r3, 16390
 615 00a6 4FF45042 		mov	r2, #53248
 616 00aa C4F20602 		movt	r2, 16390
 617 00ae 9279     		ldrb	r2, [r2, #6]
 618 00b0 D2B2     		uxtb	r2, r2
 619 00b2 9A71     		strb	r2, [r3, #6]
 306:../Generated_Code/AS1.c ****   /* {Default RTOS Adapter} Critical section end, general PE function is used */
 307:../Generated_Code/AS1.c ****   ExitCritical();
 620              		.loc 1 307 0
 621 00b4 40F20003 		movw	r3, #:lower16:SR_lock
 622 00b8 C0F20003 		movt	r3, #:upper16:SR_lock
 623 00bc 1B78     		ldrb	r3, [r3, #0]
 624 00be DBB2     		uxtb	r3, r3
 625 00c0 03F1FF33 		add	r3, r3, #-1
 626 00c4 DBB2     		uxtb	r3, r3
 627 00c6 1A46     		mov	r2, r3
 628 00c8 40F20003 		movw	r3, #:lower16:SR_lock
 629 00cc C0F20003 		movt	r3, #:upper16:SR_lock
 630 00d0 1146     		mov	r1, r2
 631 00d2 1970     		strb	r1, [r3, #0]
 632 00d4 002A     		cmp	r2, #0
 633 00d6 06D1     		bne	.L14
 634              		.loc 1 307 0 is_stmt 0 discriminator 1
 635 00d8 40F20003 		movw	r3, #:lower16:SR_reg
 636 00dc C0F20003 		movt	r3, #:upper16:SR_reg
 637              	@ 307 "../Generated_Code/AS1.c" 1
 638 00e0 1878     		ldrb r0, [r3, #0]
 639 00e2 80F31388 		msr FAULTMASK,r0;
 640              		
 641              	@ 0 "" 2
 642              		.thumb
 643              	.L14:
 308:../Generated_Code/AS1.c ****   return ERR_OK;                       /* OK */
 644              		.loc 1 308 0 is_stmt 1
 645 00e6 4FF00003 		mov	r3, #0
 646              	.L11:
 309:../Generated_Code/AS1.c **** }
 647              		.loc 1 309 0
 648 00ea 1846     		mov	r0, r3
 649 00ec 07F11C07 		add	r7, r7, #28
 650 00f0 BD46     		mov	sp, r7
 651 00f2 80BC     		pop	{r7}
 652 00f4 7047     		bx	lr
 653              		.cfi_endproc
 654              	.LFE3:
 656 00f6 00BF     		.section	.text.AS1_GetReceivedDataNum,"ax",%progbits
 657              		.align	2
 658              		.global	AS1_GetReceivedDataNum
 659              		.thumb
 660              		.thumb_func
 662              	AS1_GetReceivedDataNum:
 663              	.LFB4:
 310:../Generated_Code/AS1.c **** 
 311:../Generated_Code/AS1.c **** /*
 312:../Generated_Code/AS1.c **** ** ===================================================================
 313:../Generated_Code/AS1.c **** **     Method      :  AS1_GetReceivedDataNum (component Serial_LDD)
 314:../Generated_Code/AS1.c **** **
 315:../Generated_Code/AS1.c **** **     Description :
 316:../Generated_Code/AS1.c **** **         Returns the number of received characters in the receive
 317:../Generated_Code/AS1.c **** **         buffer. 
 318:../Generated_Code/AS1.c **** **     Parameters  :
 319:../Generated_Code/AS1.c **** **         NAME            - DESCRIPTION
 320:../Generated_Code/AS1.c **** **       * DeviceDataPtr   - Device data structure
 321:../Generated_Code/AS1.c **** **                           pointer returned by <Init> method.
 322:../Generated_Code/AS1.c **** **     Returns     :
 323:../Generated_Code/AS1.c **** **         ---             - Number of received characters in the
 324:../Generated_Code/AS1.c **** **                           receive buffer.
 325:../Generated_Code/AS1.c **** ** ===================================================================
 326:../Generated_Code/AS1.c **** */
 327:../Generated_Code/AS1.c **** uint16_t AS1_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr)
 328:../Generated_Code/AS1.c **** {
 664              		.loc 1 328 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 16
 667              		@ frame_needed = 1, uses_anonymous_args = 0
 668              		@ link register save eliminated.
 669 0000 80B4     		push	{r7}
 670              	.LCFI12:
 671              		.cfi_def_cfa_offset 4
 672              		.cfi_offset 7, -4
 673 0002 85B0     		sub	sp, sp, #20
 674              	.LCFI13:
 675              		.cfi_def_cfa_offset 24
 676 0004 00AF     		add	r7, sp, #0
 677              	.LCFI14:
 678              		.cfi_def_cfa_register 7
 679 0006 7860     		str	r0, [r7, #4]
 329:../Generated_Code/AS1.c ****   AS1_TDeviceDataPtr DeviceDataPrv = (AS1_TDeviceDataPtr)DeviceDataPtr;
 680              		.loc 1 329 0
 681 0008 7B68     		ldr	r3, [r7, #4]
 682 000a FB60     		str	r3, [r7, #12]
 330:../Generated_Code/AS1.c **** 
 331:../Generated_Code/AS1.c ****   return (DeviceDataPrv->InpRecvDataNum); /* Return the number of received characters. */
 683              		.loc 1 331 0
 684 000c FB68     		ldr	r3, [r7, #12]
 685 000e 5B88     		ldrh	r3, [r3, #2]
 332:../Generated_Code/AS1.c **** }
 686              		.loc 1 332 0
 687 0010 1846     		mov	r0, r3
 688 0012 07F11407 		add	r7, r7, #20
 689 0016 BD46     		mov	sp, r7
 690 0018 80BC     		pop	{r7}
 691 001a 7047     		bx	lr
 692              		.cfi_endproc
 693              	.LFE4:
 695              		.section	.text.AS1_GetSentDataNum,"ax",%progbits
 696              		.align	2
 697              		.global	AS1_GetSentDataNum
 698              		.thumb
 699              		.thumb_func
 701              	AS1_GetSentDataNum:
 702              	.LFB5:
 333:../Generated_Code/AS1.c **** 
 334:../Generated_Code/AS1.c **** /*
 335:../Generated_Code/AS1.c **** ** ===================================================================
 336:../Generated_Code/AS1.c **** **     Method      :  AS1_GetSentDataNum (component Serial_LDD)
 337:../Generated_Code/AS1.c **** **
 338:../Generated_Code/AS1.c **** **     Description :
 339:../Generated_Code/AS1.c **** **         Returns the number of sent characters.
 340:../Generated_Code/AS1.c **** **     Parameters  :
 341:../Generated_Code/AS1.c **** **         NAME            - DESCRIPTION
 342:../Generated_Code/AS1.c **** **       * DeviceDataPtr   - Device data structure
 343:../Generated_Code/AS1.c **** **                           pointer returned by <Init> method.
 344:../Generated_Code/AS1.c **** **     Returns     :
 345:../Generated_Code/AS1.c **** **         ---             - The number of sent characters.
 346:../Generated_Code/AS1.c **** ** ===================================================================
 347:../Generated_Code/AS1.c **** */
 348:../Generated_Code/AS1.c **** uint16_t AS1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr)
 349:../Generated_Code/AS1.c **** {
 703              		.loc 1 349 0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 16
 706              		@ frame_needed = 1, uses_anonymous_args = 0
 707              		@ link register save eliminated.
 708 0000 80B4     		push	{r7}
 709              	.LCFI15:
 710              		.cfi_def_cfa_offset 4
 711              		.cfi_offset 7, -4
 712 0002 85B0     		sub	sp, sp, #20
 713              	.LCFI16:
 714              		.cfi_def_cfa_offset 24
 715 0004 00AF     		add	r7, sp, #0
 716              	.LCFI17:
 717              		.cfi_def_cfa_register 7
 718 0006 7860     		str	r0, [r7, #4]
 350:../Generated_Code/AS1.c ****   AS1_TDeviceDataPtr DeviceDataPrv = (AS1_TDeviceDataPtr)DeviceDataPtr;
 719              		.loc 1 350 0
 720 0008 7B68     		ldr	r3, [r7, #4]
 721 000a FB60     		str	r3, [r7, #12]
 351:../Generated_Code/AS1.c **** 
 352:../Generated_Code/AS1.c ****   return (DeviceDataPrv->OutSentDataNum); /* Return the number of sent characters. */
 722              		.loc 1 352 0
 723 000c FB68     		ldr	r3, [r7, #12]
 724 000e 5B89     		ldrh	r3, [r3, #10]
 353:../Generated_Code/AS1.c **** }
 725              		.loc 1 353 0
 726 0010 1846     		mov	r0, r3
 727 0012 07F11407 		add	r7, r7, #20
 728 0016 BD46     		mov	sp, r7
 729 0018 80BC     		pop	{r7}
 730 001a 7047     		bx	lr
 731              		.cfi_endproc
 732              	.LFE5:
 734              		.section	.text.InterruptRx,"ax",%progbits
 735              		.align	2
 736              		.thumb
 737              		.thumb_func
 739              	InterruptRx:
 740              	.LFB6:
 354:../Generated_Code/AS1.c **** 
 355:../Generated_Code/AS1.c **** /*
 356:../Generated_Code/AS1.c **** ** ===================================================================
 357:../Generated_Code/AS1.c **** **     Method      :  InterruptRx (component Serial_LDD)
 358:../Generated_Code/AS1.c **** **
 359:../Generated_Code/AS1.c **** **     Description :
 360:../Generated_Code/AS1.c **** **         The method services the receive interrupt of the selected 
 361:../Generated_Code/AS1.c **** **         peripheral(s) and eventually invokes the bean's event(s).
 362:../Generated_Code/AS1.c **** **         This method is internal. It is used by Processor Expert only.
 363:../Generated_Code/AS1.c **** ** ===================================================================
 364:../Generated_Code/AS1.c **** */
 365:../Generated_Code/AS1.c **** static void InterruptRx(AS1_TDeviceDataPtr DeviceDataPrv)
 366:../Generated_Code/AS1.c **** {
 741              		.loc 1 366 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 8
 744              		@ frame_needed = 1, uses_anonymous_args = 0
 745 0000 90B5     		push	{r4, r7, lr}
 746              	.LCFI18:
 747              		.cfi_def_cfa_offset 12
 748              		.cfi_offset 14, -4
 749              		.cfi_offset 7, -8
 750              		.cfi_offset 4, -12
 751 0002 83B0     		sub	sp, sp, #12
 752              	.LCFI19:
 753              		.cfi_def_cfa_offset 24
 754 0004 00AF     		add	r7, sp, #0
 755              	.LCFI20:
 756              		.cfi_def_cfa_register 7
 757 0006 7860     		str	r0, [r7, #4]
 367:../Generated_Code/AS1.c ****   register uint16_t Data;              /* Temporary variable for data */
 368:../Generated_Code/AS1.c **** 
 369:../Generated_Code/AS1.c ****   Data = (uint16_t)UART_PDD_GetChar8(UART3_BASE_PTR); /* Read an 8-bit character from the receiver 
 758              		.loc 1 369 0
 759 0008 4FF45043 		mov	r3, #53248
 760 000c C4F20603 		movt	r3, 16390
 761 0010 DB79     		ldrb	r3, [r3, #7]
 762 0012 DBB2     		uxtb	r3, r3
 763 0014 1C46     		mov	r4, r3
 370:../Generated_Code/AS1.c ****   if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
 764              		.loc 1 370 0
 765 0016 7B68     		ldr	r3, [r7, #4]
 766 0018 1B89     		ldrh	r3, [r3, #8]
 767 001a 002B     		cmp	r3, #0
 768 001c 1DD0     		beq	.L17
 371:../Generated_Code/AS1.c ****     *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer
 769              		.loc 1 371 0
 770 001e 7B68     		ldr	r3, [r7, #4]
 771 0020 5B68     		ldr	r3, [r3, #4]
 772 0022 E2B2     		uxtb	r2, r4
 773 0024 1A70     		strb	r2, [r3, #0]
 774 0026 03F10102 		add	r2, r3, #1
 775 002a 7B68     		ldr	r3, [r7, #4]
 776 002c 5A60     		str	r2, [r3, #4]
 372:../Generated_Code/AS1.c ****     DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
 777              		.loc 1 372 0
 778 002e 7B68     		ldr	r3, [r7, #4]
 779 0030 5B88     		ldrh	r3, [r3, #2]
 780 0032 03F10103 		add	r3, r3, #1
 781 0036 9AB2     		uxth	r2, r3
 782 0038 7B68     		ldr	r3, [r7, #4]
 783 003a 5A80     		strh	r2, [r3, #2]	@ movhi
 373:../Generated_Code/AS1.c ****     if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number
 784              		.loc 1 373 0
 785 003c 7B68     		ldr	r3, [r7, #4]
 786 003e 5A88     		ldrh	r2, [r3, #2]
 787 0040 7B68     		ldr	r3, [r7, #4]
 788 0042 1B89     		ldrh	r3, [r3, #8]
 789 0044 9A42     		cmp	r2, r3
 790 0046 08D1     		bne	.L17
 374:../Generated_Code/AS1.c ****       DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters to 
 791              		.loc 1 374 0
 792 0048 7B68     		ldr	r3, [r7, #4]
 793 004a 4FF00002 		mov	r2, #0
 794 004e 1A81     		strh	r2, [r3, #8]	@ movhi
 375:../Generated_Code/AS1.c ****       AS1_OnBlockReceived(DeviceDataPrv->UserDataPtr);
 795              		.loc 1 375 0
 796 0050 7B68     		ldr	r3, [r7, #4]
 797 0052 5B69     		ldr	r3, [r3, #20]
 798 0054 1846     		mov	r0, r3
 799 0056 FFF7FEFF 		bl	AS1_OnBlockReceived
 800              	.L17:
 376:../Generated_Code/AS1.c ****     }
 377:../Generated_Code/AS1.c ****   }
 378:../Generated_Code/AS1.c **** }
 801              		.loc 1 378 0
 802 005a 07F10C07 		add	r7, r7, #12
 803 005e BD46     		mov	sp, r7
 804 0060 90BD     		pop	{r4, r7, pc}
 805              		.cfi_endproc
 806              	.LFE6:
 808 0062 00BF     		.section	.text.InterruptTx,"ax",%progbits
 809              		.align	2
 810              		.thumb
 811              		.thumb_func
 813              	InterruptTx:
 814              	.LFB7:
 379:../Generated_Code/AS1.c **** 
 380:../Generated_Code/AS1.c **** /*
 381:../Generated_Code/AS1.c **** ** ===================================================================
 382:../Generated_Code/AS1.c **** **     Method      :  InterruptTx (component Serial_LDD)
 383:../Generated_Code/AS1.c **** **
 384:../Generated_Code/AS1.c **** **     Description :
 385:../Generated_Code/AS1.c **** **         The method services the receive interrupt of the selected 
 386:../Generated_Code/AS1.c **** **         peripheral(s) and eventually invokes the bean's event(s).
 387:../Generated_Code/AS1.c **** **         This method is internal. It is used by Processor Expert only.
 388:../Generated_Code/AS1.c **** ** ===================================================================
 389:../Generated_Code/AS1.c **** */
 390:../Generated_Code/AS1.c **** static void InterruptTx(AS1_TDeviceDataPtr DeviceDataPrv)
 391:../Generated_Code/AS1.c **** {
 815              		.loc 1 391 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 8
 818              		@ frame_needed = 1, uses_anonymous_args = 0
 819 0000 80B5     		push	{r7, lr}
 820              	.LCFI21:
 821              		.cfi_def_cfa_offset 8
 822              		.cfi_offset 14, -4
 823              		.cfi_offset 7, -8
 824 0002 82B0     		sub	sp, sp, #8
 825              	.LCFI22:
 826              		.cfi_def_cfa_offset 16
 827 0004 00AF     		add	r7, sp, #0
 828              	.LCFI23:
 829              		.cfi_def_cfa_register 7
 830 0006 7860     		str	r0, [r7, #4]
 392:../Generated_Code/AS1.c **** 
 393:../Generated_Code/AS1.c ****   if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characte
 831              		.loc 1 393 0
 832 0008 7B68     		ldr	r3, [r7, #4]
 833 000a 5A89     		ldrh	r2, [r3, #10]
 834 000c 7B68     		ldr	r3, [r7, #4]
 835 000e 1B8A     		ldrh	r3, [r3, #16]
 836 0010 9A42     		cmp	r2, r3
 837 0012 22D2     		bcs	.L20
 394:../Generated_Code/AS1.c ****     UART_PDD_PutChar8(UART3_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to 
 838              		.loc 1 394 0
 839 0014 4FF45043 		mov	r3, #53248
 840 0018 C4F20603 		movt	r3, 16390
 841 001c 7A68     		ldr	r2, [r7, #4]
 842 001e D268     		ldr	r2, [r2, #12]
 843 0020 1178     		ldrb	r1, [r2, #0]	@ zero_extendqisi2
 844 0022 D971     		strb	r1, [r3, #7]
 845 0024 02F10102 		add	r2, r2, #1
 846 0028 7B68     		ldr	r3, [r7, #4]
 847 002a DA60     		str	r2, [r3, #12]
 395:../Generated_Code/AS1.c ****     DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
 848              		.loc 1 395 0
 849 002c 7B68     		ldr	r3, [r7, #4]
 850 002e 5B89     		ldrh	r3, [r3, #10]
 851 0030 03F10103 		add	r3, r3, #1
 852 0034 9AB2     		uxth	r2, r3
 853 0036 7B68     		ldr	r3, [r7, #4]
 854 0038 5A81     		strh	r2, [r3, #10]	@ movhi
 396:../Generated_Code/AS1.c ****     if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
 855              		.loc 1 396 0
 856 003a 7B68     		ldr	r3, [r7, #4]
 857 003c 5A89     		ldrh	r2, [r3, #10]
 858 003e 7B68     		ldr	r3, [r7, #4]
 859 0040 1B8A     		ldrh	r3, [r3, #16]
 860 0042 9A42     		cmp	r2, r3
 861 0044 29D1     		bne	.L19
 397:../Generated_Code/AS1.c ****       DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBl
 862              		.loc 1 397 0
 863 0046 7B68     		ldr	r3, [r7, #4]
 864 0048 4FF00002 		mov	r2, #0
 865 004c 1A82     		strh	r2, [r3, #16]	@ movhi
 398:../Generated_Code/AS1.c ****       AS1_OnBlockSent(DeviceDataPrv->UserDataPtr);
 866              		.loc 1 398 0
 867 004e 7B68     		ldr	r3, [r7, #4]
 868 0050 5B69     		ldr	r3, [r3, #20]
 869 0052 1846     		mov	r0, r3
 870 0054 FFF7FEFF 		bl	AS1_OnBlockSent
 871 0058 1FE0     		b	.L19
 872              	.L20:
 399:../Generated_Code/AS1.c ****     }
 400:../Generated_Code/AS1.c ****   } else {
 401:../Generated_Code/AS1.c ****     UART_PDD_DisableInterrupt(UART3_BASE_PTR, UART_PDD_INTERRUPT_TRANSMITTER); /* Disable TX interr
 873              		.loc 1 401 0
 874 005a 4FF45043 		mov	r3, #53248
 875 005e C4F20603 		movt	r3, 16390
 876 0062 4FF45042 		mov	r2, #53248
 877 0066 C4F20602 		movt	r2, 16390
 878 006a D278     		ldrb	r2, [r2, #3]
 879 006c D2B2     		uxtb	r2, r2
 880 006e 02F07F02 		and	r2, r2, #127
 881 0072 D2B2     		uxtb	r2, r2
 882 0074 DA70     		strb	r2, [r3, #3]
 883 0076 4FF45043 		mov	r3, #53248
 884 007a C4F20603 		movt	r3, 16390
 885 007e 4FF45042 		mov	r2, #53248
 886 0082 C4F20602 		movt	r2, 16390
 887 0086 9279     		ldrb	r2, [r2, #6]
 888 0088 D2B2     		uxtb	r2, r2
 889 008a 9A71     		strb	r2, [r3, #6]
 402:../Generated_Code/AS1.c ****     DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)ENABLED_TX_INT); /* Clear the flag ENABLED_TX_I
 890              		.loc 1 402 0
 891 008c 7B68     		ldr	r3, [r7, #4]
 892 008e 1B88     		ldrh	r3, [r3, #0]
 893 0090 23F00103 		bic	r3, r3, #1
 894 0094 9AB2     		uxth	r2, r3
 895 0096 7B68     		ldr	r3, [r7, #4]
 896 0098 1A80     		strh	r2, [r3, #0]	@ movhi
 897              	.L19:
 403:../Generated_Code/AS1.c ****   }
 404:../Generated_Code/AS1.c **** }
 898              		.loc 1 404 0
 899 009a 07F10807 		add	r7, r7, #8
 900 009e BD46     		mov	sp, r7
 901 00a0 80BD     		pop	{r7, pc}
 902              		.cfi_endproc
 903              	.LFE7:
 905 00a2 00BF     		.section	.text.AS1_Interrupt,"ax",%progbits
 906              		.align	2
 907              		.global	AS1_Interrupt
 908              		.thumb
 909              		.thumb_func
 911              	AS1_Interrupt:
 912              	.LFB8:
 405:../Generated_Code/AS1.c **** 
 406:../Generated_Code/AS1.c **** /*
 407:../Generated_Code/AS1.c **** ** ===================================================================
 408:../Generated_Code/AS1.c **** **     Method      :  AS1_Interrupt (component Serial_LDD)
 409:../Generated_Code/AS1.c **** **
 410:../Generated_Code/AS1.c **** **     Description :
 411:../Generated_Code/AS1.c **** **         The ISR function handling the device receive/transmit 
 412:../Generated_Code/AS1.c **** **         interrupt. Calls InterruptTX/InterruptRX methods.
 413:../Generated_Code/AS1.c **** **         This method is internal. It is used by Processor Expert only.
 414:../Generated_Code/AS1.c **** ** ===================================================================
 415:../Generated_Code/AS1.c **** */
 416:../Generated_Code/AS1.c **** PE_ISR(AS1_Interrupt)
 417:../Generated_Code/AS1.c **** {
 913              		.loc 1 417 0
 914              		.cfi_startproc
 915              		@ Stack Align: May be called with mis-aligned SP.
 916              		@ args = 0, pretend = 0, frame = 8
 917              		@ frame_needed = 1, uses_anonymous_args = 0
 918 0000 6846     		mov	r0, sp
 919              		.cfi_register 13, 0
 920 0002 20F00701 		bic	r1, r0, #7
 921 0006 8D46     		mov	sp, r1
 922 0008 91B5     		push	{r0, r4, r7, lr}
 923              	.LCFI24:
 924              		.cfi_def_cfa_offset 16
 925              		.cfi_offset 14, -4
 926              		.cfi_offset 7, -8
 927              		.cfi_offset 4, -12
 928              		.cfi_offset 13, -16
 929 000a 82B0     		sub	sp, sp, #8
 930              	.LCFI25:
 931              		.cfi_def_cfa_offset 24
 932 000c 00AF     		add	r7, sp, #0
 933              	.LCFI26:
 934              		.cfi_def_cfa_register 7
 418:../Generated_Code/AS1.c ****   /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
 419:../Generated_Code/AS1.c ****   AS1_TDeviceDataPtr DeviceDataPrv = INT_UART3_RX_TX__DEFAULT_RTOS_ISRPARAM;
 935              		.loc 1 419 0
 936 000e 40F20003 		movw	r3, #:lower16:INT_UART3_RX_TX__DEFAULT_RTOS_ISRPARAM
 937 0012 C0F20003 		movt	r3, #:upper16:INT_UART3_RX_TX__DEFAULT_RTOS_ISRPARAM
 938 0016 1B68     		ldr	r3, [r3, #0]
 939 0018 7B60     		str	r3, [r7, #4]
 420:../Generated_Code/AS1.c ****   register uint16_t StatReg = UART_PDD_ReadInterruptStatusReg(UART3_BASE_PTR); /* Read status regis
 940              		.loc 1 420 0
 941 001a 4FF45043 		mov	r3, #53248
 942 001e C4F20603 		movt	r3, 16390
 943 0022 1B79     		ldrb	r3, [r3, #4]
 944 0024 DBB2     		uxtb	r3, r3
 945 0026 1C46     		mov	r4, r3
 421:../Generated_Code/AS1.c **** 
 422:../Generated_Code/AS1.c ****   if (StatReg & (UART_S1_NF_MASK | UART_S1_OR_MASK | UART_S1_FE_MASK | UART_S1_PF_MASK)) { /* Is an
 946              		.loc 1 422 0
 947 0028 2346     		mov	r3, r4
 948 002a 03F00F03 		and	r3, r3, #15
 949 002e 002B     		cmp	r3, #0
 950 0030 07D0     		beq	.L23
 423:../Generated_Code/AS1.c ****     (void)UART_PDD_GetChar8(UART3_BASE_PTR); /* Dummy read 8-bit character from receiver */
 951              		.loc 1 423 0
 952 0032 4FF45043 		mov	r3, #53248
 953 0036 C4F20603 		movt	r3, 16390
 954 003a DB79     		ldrb	r3, [r3, #7]
 424:../Generated_Code/AS1.c ****     StatReg &= (uint16_t)(~(uint16_t)UART_S1_RDRF_MASK); /* Clear the receive data flag to discard 
 955              		.loc 1 424 0
 956 003c 24F02003 		bic	r3, r4, #32
 957 0040 9CB2     		uxth	r4, r3
 958              	.L23:
 425:../Generated_Code/AS1.c ****   }
 426:../Generated_Code/AS1.c ****   if (StatReg & UART_S1_RDRF_MASK) {   /* Is the receiver's interrupt flag set? */
 959              		.loc 1 426 0
 960 0042 2346     		mov	r3, r4
 961 0044 03F02003 		and	r3, r3, #32
 962 0048 002B     		cmp	r3, #0
 963 004a 02D0     		beq	.L24
 427:../Generated_Code/AS1.c ****     InterruptRx(DeviceDataPrv);        /* If yes, then invoke the internal service routine. This ro
 964              		.loc 1 427 0
 965 004c 7868     		ldr	r0, [r7, #4]
 966 004e FFF7FEFF 		bl	InterruptRx
 967              	.L24:
 428:../Generated_Code/AS1.c ****   }
 429:../Generated_Code/AS1.c ****   if (DeviceDataPrv->SerFlag & ENABLED_TX_INT) { /* Is the transmitter interrupt enabled? */
 968              		.loc 1 429 0
 969 0052 7B68     		ldr	r3, [r7, #4]
 970 0054 1B88     		ldrh	r3, [r3, #0]
 971 0056 03F00103 		and	r3, r3, #1
 972 005a DBB2     		uxtb	r3, r3
 973 005c 002B     		cmp	r3, #0
 974 005e 07D0     		beq	.L22
 430:../Generated_Code/AS1.c ****     if (StatReg & UART_S1_TDRE_MASK) { /* Is the transmitter empty? */
 975              		.loc 1 430 0
 976 0060 2346     		mov	r3, r4
 977 0062 03F08003 		and	r3, r3, #128
 978 0066 002B     		cmp	r3, #0
 979 0068 02D0     		beq	.L22
 431:../Generated_Code/AS1.c ****       InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This ro
 980              		.loc 1 431 0
 981 006a 7868     		ldr	r0, [r7, #4]
 982 006c FFF7FEFF 		bl	InterruptTx
 983              	.L22:
 432:../Generated_Code/AS1.c ****     }
 433:../Generated_Code/AS1.c ****   }
 434:../Generated_Code/AS1.c **** }
 984              		.loc 1 434 0
 985 0070 07F10807 		add	r7, r7, #8
 986 0074 BD46     		mov	sp, r7
 987 0076 BDE89140 		pop	{r0, r4, r7, lr}
 988 007a 8546     		mov	sp, r0
 989 007c 7047     		bx	lr
 990              		.cfi_endproc
 991              	.LFE8:
 993 007e 00BF     		.text
 994              	.Letext0:
 995              		.file 2 "C:/Freescale/CW MCU v10.3_NOBETA/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 996              		.file 3 "../Generated_Code/PE_LDD.h"
 997              		.file 4 "../Generated_Code/IO_Map.h"
 998              		.file 5 "../Generated_Code/AS1.h"
 999              		.file 6 "../Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 AS1.c
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:19     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:22     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:25     .bss.INT_UART3_RX_TX__DEFAULT_RTOS_ISRPARAM:00000000 $d
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:28     .bss.INT_UART3_RX_TX__DEFAULT_RTOS_ISRPARAM:00000000 INT_UART3_RX_TX__DEFAULT_RTOS_ISRPARAM
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:31     .bss.INT_UART3_ERR__DEFAULT_RTOS_ISRPARAM:00000000 $d
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:34     .bss.INT_UART3_ERR__DEFAULT_RTOS_ISRPARAM:00000000 INT_UART3_ERR__DEFAULT_RTOS_ISRPARAM
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:37     .text.AS1_Init:00000000 $t
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:42     .text.AS1_Init:00000000 AS1_Init
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:311    .text.AS1_Deinit:00000000 $t
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:316    .text.AS1_Deinit:00000000 AS1_Deinit
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:395    .text.AS1_ReceiveBlock:00000000 $t
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:400    .text.AS1_ReceiveBlock:00000000 AS1_ReceiveBlock
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:514    .text.AS1_SendBlock:00000000 $t
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:519    .text.AS1_SendBlock:00000000 AS1_SendBlock
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:657    .text.AS1_GetReceivedDataNum:00000000 $t
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:662    .text.AS1_GetReceivedDataNum:00000000 AS1_GetReceivedDataNum
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:696    .text.AS1_GetSentDataNum:00000000 $t
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:701    .text.AS1_GetSentDataNum:00000000 AS1_GetSentDataNum
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:735    .text.InterruptRx:00000000 $t
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:739    .text.InterruptRx:00000000 InterruptRx
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:809    .text.InterruptTx:00000000 $t
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:813    .text.InterruptTx:00000000 InterruptTx
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:906    .text.AS1_Interrupt:00000000 $t
C:\Users\x\AppData\Local\Temp\ccVDppMt.s:911    .text.AS1_Interrupt:00000000 AS1_Interrupt
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
SR_lock
SR_reg
AS1_OnBlockReceived
AS1_OnBlockSent
