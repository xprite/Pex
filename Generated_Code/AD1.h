/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : AD1.h
**     Project     : ProcessorExpert
**     Processor   : MK40DX256ZVLQ10
**     Component   : ADC_LDD
**     Version     : Component 01.115, Driver 01.07, CPU db: 3.00.001
**     Compiler    : GNU C Compiler
**     Date/Time   : 2013-04-11, 15:40, # CodeGen: 91
**     Abstract    :
**         This device "ADC_LDD" implements an A/D converter,
**         its control methods and interrupt/event handling procedure.
**     Settings    :
**          Component name                                 : AD1
**          A/D converter                                  : ADC0
**          Discontinuous mode                             : no
**          Converter mode                                 : Sequential
**          Interrupt service/event                        : Enabled
**            A/D interrupt                                : INT_ADC0
**            A/D interrupt priority                       : 3
**          A/D channel list                               : 1
**            Channel 0                                    : 
**              Channel mode                               : Single Ended
**                Input                                    : 
**                  A/D channel (pin)                      : PTB3/I2C0_SDA/UART0_CTS_b/FTM0_FLT0/LCD_P3/ADC0_SE13/TSI0_CH8
**                  A/D channel (pin) signal               : 
**          Static sample groups                           : Enabled
**            Sample group list                            : 1
**              Group 0                                    : 
**                Sample list                              : 1
**                  Sample 0                               : Enabled
**                    Channel index                        : 0
**          A/D resolution                                 : 8 bits
**          Low-power mode                                 : Disabled
**          High-speed conversion mode                     : Disabled
**          Asynchro clock output                          : Disabled
**          Sample time                                    : 4 clock periods
**          Number of conversions                          : 1
**          Conversion time                                : 4.25 µs
**          ADC clock                                      : 4 MHz (250 ns)
**          Single conversion time - Single-ended          : 5.604 us
**          Single conversion time - Differential          : 8.104 us
**          Additional conversion time - Single-ended      : 4.25 us
**          Additional conversion time - Differential      : 6.75 us
**          Result type                                    : unsigned 8 bits, right justified
**          Trigger                                        : Enabled
**            Trigger signal list                          : 1
**              Trigger signal 0                           : Enabled
**                Trigger input                            : Flex_timer_1
**                Trigger input signal                     : 
**                Trigger type                             : Internal
**                  Source component                       : CameraTimer
**            Trigger active state                         : Rising edge
**          Voltage reference                              : 
**            High voltage reference                       : 
**              Volt. ref. pin                             : VREFH
**              Volt. ref pin signal                       : 
**            Low voltage reference                        : 
**              Volt. ref. pin                             : VREFL
**              Volt. ref pin signal                       : 
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : yes
**            Event mask                                   : 
**              OnMeasurementComplete                      : Enabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init                          - LDD_TDeviceData* AD1_Init(LDD_TUserData *UserDataPtr);
**         Deinit                        - void AD1_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         StartSingleMeasurement        - LDD_TError AD1_StartSingleMeasurement(LDD_TDeviceData *DeviceDataPtr);
**         StartLoopMeasurement          - LDD_TError AD1_StartLoopMeasurement(LDD_TDeviceData *DeviceDataPtr);
**         StartLoopTriggeredMeasurement - LDD_TError AD1_StartLoopTriggeredMeasurement(LDD_TDeviceData *DeviceDataPtr);
**         SelectSampleGroup             - LDD_TError AD1_SelectSampleGroup(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**         CreateSampleGroup             - LDD_TError AD1_CreateSampleGroup(LDD_TDeviceData *DeviceDataPtr,...
**         GetMeasuredValues             - LDD_TError AD1_GetMeasuredValues(LDD_TDeviceData *DeviceDataPtr, LDD_TData...
**
**     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __AD1_H
#define __AD1_H

/* MODULE AD1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "CameraTimer.h"

#include "IO_Map.h"
#include "Cpu.h"
#include "ADC_PDD.h"
#include "PE_LDD.h"


/* Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define AD1_PRPH_BASE_ADDRESS  0x4003B000U
  
/* Device data structure pointer used when auto initialization property is enabled. This constant can be passed as a first parameter to all component's methods. */
#define AD1_DeviceData  ((LDD_TDeviceData *)PE_LDD_GetDeviceStructure(PE_LDD_COMPONENT_AD1_ID))

/* Methods configuration constants - generated for all enabled component's methods */
#define AD1_Init_METHOD_ENABLED
#define AD1_Deinit_METHOD_ENABLED
#define AD1_StartSingleMeasurement_METHOD_ENABLED
#define AD1_StartLoopMeasurement_METHOD_ENABLED
#define AD1_StartLoopTriggeredMeasurement_METHOD_ENABLED
#define AD1_SelectSampleGroup_METHOD_ENABLED
#define AD1_CreateSampleGroup_METHOD_ENABLED
#define AD1_GetMeasuredValues_METHOD_ENABLED

/* Events configuration constants - generated for all enabled component's events */
#define AD1_OnMeasurementComplete_EVENT_ENABLED


/* Component specific public constants */

/* Driver mode */

/* A/D resolution of the component (the count of bits) */
#define AD1_ADC_RESOLUTION              8

/* Name of AD channel. If the "A/D channel (pin) signal" property in the channel
   pin group is not empty the constant "ComponentName_Signal" with the value of the channel
   index is generated, where the ComponentName = value of the "Component name" property
   and "Signal" is the value of the " A/D channel (pin) signal" property. This constant
   can be used in the method CreateSampleGroup() to specify required channel.
   (See ComponentName_TSample struct) */

/* This constant contains the number of channels in the "A/D channel list"
   group */
#define AD1_CHANNEL_COUNT               1u

/* This constant can be used in the sample array to create a gap in sample group.
   It is intended to disable a measurement of a sample */
#define AD1_NO_CHANNEL                  0x1FU

/* This constant contains the number of static sample groups */
#define AD1_STATIC_GROUP_COUNT          1U

/* These constants contain the number of samples in each static sample group. */
#define AD1_STATIC_GROUP_0_SAMPLE_COUNT 1U

/* This constant contains the maximal size through all static sample groups */
#define AD1_MAX_STATIC_GROUP_SAMPLE_COUNT 1U


/* HW specific public constants */

/* Maximal number of samples in one sample group. This constant is HW specific.
   The CreateSampleGroup() method returns ERR_PARAM_SAMPLE_COUNT if the SampleCount parameter
   is greater then this constant. The value of this constant depends on the number
   of samples the HW is capable to measure in one measurement cycle. */
#define AD1_MAX_HW_SAMPLE_COUNT         1U

/* This constant informs about the actual width of results. */
#define AD1_RESULT_WIDTH                8U

/* This parameter informs about the type of results. */
#define AD1_RESULT_TYPE_UNSIGNED

/* Measurement result data type. Definition of the type depends
   on "Result type" property value. */
typedef uint8_t AD1_TResultData;


LDD_TDeviceData* AD1_Init(LDD_TUserData *UserDataPtr);
/*
** ===================================================================
**     Method      :  AD1_Init (component ADC_LDD)
**
**     Description :
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc.
**         If the "Enable in init. code" is set to "yes" value then the
**         device is also enabled(see the description of the Enable()
**         method). In this case the Enable() method is not necessary
**         and needn't to be generated. 
**         This method can be called only once. Before the second call
**         of Init() the Deinit() must be called first.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     Returns     :
**         ---             - Device data structure pointer.
** ===================================================================
*/

void AD1_Deinit(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  AD1_Deinit (component ADC_LDD)
**
**     Description :
**         Deinitializes the device. Switches off the device, frees the
**         device data structure memory, interrupts vectors, etc.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     : Nothing
** ===================================================================
*/

LDD_TError AD1_StartSingleMeasurement(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  AD1_StartSingleMeasurement (component ADC_LDD)
**
**     Description :
**         This method starts one measurement of the selected group of
**         samples and exits immediately. The group of samples for
**         measurement is specified by preceding call to
**         <SelectSampleGroup()> or <SelectSampleGroup()> method. The
**         <OnMeasurementComplete() > event is invoked after the
**         measurement is done and the event is enabled. The state of
**         the measurement can be also polled by the
**         <GetMeasurementCompleteStatus()> method. Results of the
**         measurement can be read by the <GetMeasuredValues()> method.
**         The <Discontinuous mode> doesn't support this method.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
**                           ERR_DISABLED - Component is disabled
**                           ERR_BUSY - A measurement is in progress 
** ===================================================================
*/

LDD_TError AD1_StartLoopMeasurement(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  AD1_StartLoopMeasurement (component ADC_LDD)
**
**     Description :
**         This method starts periodic measurement of the selected
**         group of and exits immediately. The group of samples for
**         measurement is specified by preceding call to
**         <SelectSampleGroup()> or <SelectSampleGroup()> method. The
**         <OnMeasurementComplete()> event is invoked after the each
**         measurement is done and the event is enabled. The state of
**         the measurement can be also polled by the
**         <GetMeasurementCompleteStatus()> method. Results of the
**         measurement can be read by the <GetMeasuredValues()> method.
**         This method is available only if HW supports loop
**         measurement. The <Discontinuous mode> doesn't support this
**         method.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
**                           ERR_DISABLED - Component is disabled
**                           ERR_BUSY - Measurement is in progress 
** ===================================================================
*/

LDD_TError AD1_StartLoopTriggeredMeasurement(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  AD1_StartLoopTriggeredMeasurement (component ADC_LDD)
**
**     Description :
**         This method prepares periodic measurement of the selected
**         group of samples and exits immediately. The measurement is
**         started each time the trigger is activated. The group of
**         samples for measurement is specified by preceding call to
**         <SelectSampleGroup()> or <SelectSampleGroup()> method. The
**         <OnMeasurementComplete()> event is invoked after the each
**         measurement is done and the event is enabled. The state of
**         the measurement can be also polled by the
**         <GetMeasurementCompleteStatus()> method. Results of the
**         measurement can be read by the <GetMeasuredValues()> method.
**         This method is available only if HW supports triggered
**         measurement and <Trigger> is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
**                           ERR_DISABLED - Component is disabled
**                           ERR_BUSY - Measurement is in progress 
** ===================================================================
*/

LDD_TError AD1_SelectSampleGroup(LDD_TDeviceData *DeviceDataPtr, uint8_t GroupIndex);
/*
** ===================================================================
**     Method      :  AD1_SelectSampleGroup (component ADC_LDD)
**
**     Description :
**         This method selects one of the (design-time) predefined
**         <Static sample groups> for the next measurement. Each call
**         rewrites the preceding setting. Once any group is selected,
**         the measurement can be started multiple times. Note: This
**         method works only with the sample groups defined at design
**         time. For run-time defined groups use <CreateSampleGroup()>
**         method.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         GroupIndex      - Group index.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
**                           ERR_DISABLED - Component is disabled
**                           ERR_PARAM_GROUP - SampleGroup parameter
**                           value is out of range
**                           ERR_BUSY - Measurement is in progress 
** ===================================================================
*/

LDD_TError AD1_CreateSampleGroup(LDD_TDeviceData *DeviceDataPtr, LDD_ADC_TSample *SampleGroupPtr, uint8_t SampleCount);
/*
** ===================================================================
**     Method      :  AD1_CreateSampleGroup (component ADC_LDD)
**
**     Description :
**         This method prepares HW for next measurement according to
**         array of samples defined during run-time. The array of
**         samples should be prepared prior to calling this method.
**         Pointer to the array is passed into this method in parameter
**         SampleGroupPtr. The number of samples is defined by
**         parameter SampleCount. Once any group is prepared, the
**         measurement can be started multiple times. Note: This method
**         works only with the sample groups defined during run-time.
**         For design-time defined groups use <SelectSampleGroup()>
**         method.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * SampleGroupPtr  - Pointer to the
**                           sample definition array. This array can be
**                           released as soon as the method ends.
**         SampleCount     - Number of items in the
**                           sample definition array. Must be less than
**                           or equal to
**                           ComponentName_MAX_HW_SAMPLE_COUNT.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
**                           ERR_DISABLED - Component is disabled
**                           ERR_PARAM_INDEX - Channel index in
**                           SampleGroup structure is out of range
**                           ERR_PARAM_SAMPLE_COUNT - SampleCount
**                           variable value is out of range
**                           ERR_BUSY - Measurement is in progress 
** ===================================================================
*/

LDD_TError AD1_GetMeasuredValues(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr);
/*
** ===================================================================
**     Method      :  AD1_GetMeasuredValues (component ADC_LDD)
**
**     Description :
**         This method copies results of the last measurement to the
**         user supplied buffer. Data size depends on the size of
**         measured sample group (see <SelectSampleGroup()> or
**         <CreateSampleGroup()> method). Data representation is
**         defined by the <Result type> property. Typically this method
**         is called from <OnMeasurementComplete> event to get results
**         of the last measurement.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * BufferPtr       - Pointer to the start of the
**                           buffer for new results. Count of stored
**                           measured values equals to the count of the
**                           samples in the active sample group. It is
**                           in the user responsibility to provide
**                           buffer with appropriate size.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
**                           ERR_DISABLED - Component is disabled
** ===================================================================
*/

/* {Default RTOS Adapter} ISR function prototype */
PE_ISR(AD1_MeasurementCompleteInterrupt);
/*
** ===================================================================
**     Method      :  AD1_MeasurementCompleteInterrupt (component ADC_LDD)
**
**     Description :
**         Measurement complete interrupt handler
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* END AD1. */

#endif
/* ifndef __AD1_H */
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0 [05.03]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
