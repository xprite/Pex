/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : ServoTimer.h
**     Project     : ProcessorExpert
**     Processor   : MK40DX256ZVLQ10
**     Component   : TimerUnit_LDD
**     Version     : Component 01.139, Driver 01.09, CPU db: 3.00.001
**     Compiler    : GNU C Compiler
**     Date/Time   : 2013-04-11, 17:04, # CodeGen: 95
**     Abstract    :
**          This TimerUnit component provides a low level API for unified hardware access across
**          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
**     Settings    :
**          Component name                                 : ServoTimer
**          Module name                                    : FTM2
**          Counter                                        : FTM2_CNT
**          Counter direction                              : Up
**          Counter width                                  : 16 bits
**          Value type                                     : Optimal
**          Input clock source                             : Internal
**            Counter frequency                            : 3 MHz
**          Counter restart                                : On-match
**            Period device                                : FTM2_MOD
**            Period                                       : 50 Hz
**            Interrupt                                    : Disabled
**          Channel list                                   : 1
**            Channel 0                                    : 
**              Mode                                       : Compare
**                Compare                                  : FTM2_C0V
**                Offset                                   : 1.5 ms
**                Output on compare                        : Clear
**                  Output on overrun                      : Set
**                  Initial state                          : Low
**                  Output pin                             : PTB18/CAN0_TX/FTM2_CH0/I2S0_TX_BCLK/FTM2_QD_PHA/LCD_P14/TSI0_CH11
**                  Output pin signal                      : 
**                Interrupt                                : Disabled
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : yes
**            Event mask                                   : 
**              OnCounterRestart                           : Disabled
**              OnChannel0                                 : Disabled
**              OnChannel1                                 : Disabled
**              OnChannel2                                 : Disabled
**              OnChannel3                                 : Disabled
**              OnChannel4                                 : Disabled
**              OnChannel5                                 : Disabled
**              OnChannel6                                 : Disabled
**              OnChannel7                                 : Disabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init           - LDD_TDeviceData* ServoTimer_Init(LDD_TUserData *UserDataPtr);
**         Deinit         - void ServoTimer_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         SetOffsetTicks - LDD_TError ServoTimer_SetOffsetTicks(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**
**     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __ServoTimer_H
#define __ServoTimer_H

/* MODULE ServoTimer. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "PE_LDD.h"
#include "FTM_PDD.h"
#include "Cpu.h"


#ifndef __BWUserType_ServoTimer_TValueType
#define __BWUserType_ServoTimer_TValueType
  typedef uint32_t ServoTimer_TValueType ; /* Type for data parameters of methods */
#endif
#define ServoTimer_CNT_INP_FREQ_U_0 0x002DC6C0UL /* Counter input frequency in Hz */
#define ServoTimer_CNT_INP_FREQ_R_0 3000003.000003F /* Counter input frequency in Hz */
#define ServoTimer_CNT_INP_FREQ_COUNT 0U /* Count of predefined counter input frequencies */
#define ServoTimer_PERIOD_TICKS 0xEA60UL /* Initialization value of period in 'counter ticks' */
#define ServoTimer_NUMBER_OF_CHANNELS 0x01U /* Count of predefined channels */
#define ServoTimer_COUNTER_WIDTH 0x10U /* Counter width in bits  */
#define ServoTimer_COUNTER_DIR DIR_UP  /* Direction of counting */
#define ServoTimer_OFFSET_0_TICKS 0x1194ul /* Initialization value of offset as 'counter ticks' for channel 0 */
/* Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define ServoTimer_PRPH_BASE_ADDRESS  0x400B8000U
  
/* Device data structure pointer used when auto initialization property is enabled. This constant can be passed as a first parameter to all component's methods. */
#define ServoTimer_DeviceData  ((LDD_TDeviceData *)PE_LDD_GetDeviceStructure(PE_LDD_COMPONENT_ServoTimer_ID))

/* Methods configuration constants - generated for all enabled component's methods */
#define ServoTimer_Init_METHOD_ENABLED
#define ServoTimer_Deinit_METHOD_ENABLED
#define ServoTimer_SetOffsetTicks_METHOD_ENABLED

/* Events configuration constants - generated for all enabled component's events */



LDD_TDeviceData* ServoTimer_Init(LDD_TUserData *UserDataPtr);
/*
** ===================================================================
**     Method      :  ServoTimer_Init (component TimerUnit_LDD)
**
**     Description :
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc. If the
**         property <"Enable in init. code"> is set to "yes" value then
**         the device is also enabled (see the description of the
**         <Enable> method). In this case the <Enable> method is not
**         necessary and needn't to be generated. This method can be
**         called only once. Before the second call of Init the <Deinit>
**         must be called first.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     Returns     :
**         ---             - Pointer to the dynamically allocated
**                           private structure or NULL if there was an
**                           error.
** ===================================================================
*/

void ServoTimer_Deinit(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  ServoTimer_Deinit (component TimerUnit_LDD)
**
**     Description :
**         Deinitializes the device. Switches off the device, frees the
**         device data structure memory, interrupts vectors, etc.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by Init method
**     Returns     : Nothing
** ===================================================================
*/

LDD_TError ServoTimer_SetOffsetTicks(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, ServoTimer_TValueType Ticks);
/*
** ===================================================================
**     Method      :  ServoTimer_SetOffsetTicks (component TimerUnit_LDD)
**
**     Description :
**         Sets the new offset value to channel specified by the
**         parameter ChannelIdx. It is user responsibility to use value
**         below selected period. This method is available when at
**         least one channel is configured.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         ChannelIdx      - Index of the component
**                           channel.
**         Ticks           - Number of counter ticks to compare
**                           match.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK 
**                           ERR_PARAM_INDEX - ChannelIdx parameter is
**                           out of possible range.
**                           ERR_NOTAVAIL -  The compare mode is not
**                           selected for selected channel
**                           ERR_PARAM_TICKS - Ticks parameter is out of
**                           possible range.
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/

/* END ServoTimer. */

#endif
/* ifndef __ServoTimer_H */
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0 [05.03]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
