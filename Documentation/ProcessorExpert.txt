=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "PWMMotor"  (component TimerUnit_LDD)
   - PWMMotor_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - PWMMotor_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - PWMMotor_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user 
                responsibility to use value below selected period. This method is available when at least one channel is 
                configured.

Module "GPIO1"     (component GPIO_LDD)
   - GPIO1_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - GPIO1_Deinit -This method disables the device and frees the device data structure memory.
   - GPIO1_SetFieldValue -This method sets the output data value of the specified bit field.
   - GPIO1_GetFieldValue -This method returns the current input data of the specified field.
   - GPIO1_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - GPIO1_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - GPIO1_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.
   - GPIO1_SetFieldInputDirection -This method sets all pins of the field to the input direction.
   - GPIO1_SetFieldOutputDirection -This method sets all pins of the field to the output direction.
   - GPIO1_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this component. This 
                method is only available for CPU derivatives and peripherals that support the runtime pin sharing with other 
                internal on-chip peripherals.

Module "OdometryTimer" (component TimerUnit_LDD)
   - OdometryTimer_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors 
                and sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is 
                set to "yes" value then the device is also enabled (see the description of the <Enable> method). In this case 
                the <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before 
                the second call of Init the <Deinit> must be called first.
   - OdometryTimer_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, 
                interrupts vectors, etc.
   - OdometryTimer_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down 
                then counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.

Module "OdometryGPIO" (component GPIO_LDD)
   - OdometryGPIO_Init -This method initializes the associated peripheral(s) and the component internal variables. The method 
                is called automatically as a part of the application initialization code.
   - OdometryGPIO_Deinit -This method disables the device and frees the device data structure memory.
   - OdometryGPIO_SetFieldValue -This method sets the output data value of the specified bit field.
   - OdometryGPIO_GetFieldValue -This method returns the current input data of the specified field.
   - OdometryGPIO_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - OdometryGPIO_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - OdometryGPIO_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.
   - OdometryGPIO_SetFieldInputDirection -This method sets all pins of the field to the input direction.
   - OdometryGPIO_SetFieldOutputDirection -This method sets all pins of the field to the output direction.
   - OdometryGPIO_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this 
                component. This method is only available for CPU derivatives and peripherals that support the runtime pin 
                sharing with other internal on-chip peripherals.

Module "CsIO1"     (component ConsoleIO)

Module "Period"    (component TimerUnit_LDD)
   - Period_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - Period_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.

Module "AD1"       (component ADC_LDD)
   - AD1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - AD1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors, 
                etc.
   - AD1_StartSingleMeasurement -This method starts one measurement of the selected group of samples and exits immediately. The 
                group of samples for measurement is specified by preceding call to <SelectSampleGroup()> or 
                <SelectSampleGroup()> method. The <OnMeasurementComplete() > event is invoked after the measurement is done and 
                the event is enabled. The state of the measurement can be also polled by the <GetMeasurementCompleteStatus()> 
                method. Results of the measurement can be read by the <GetMeasuredValues()> method. The <Discontinuous mode> 
                doesn't support this method.
   - AD1_StartLoopMeasurement -This method starts periodic measurement of the selected group of and exits immediately. The 
                group of samples for measurement is specified by preceding call to <SelectSampleGroup()> or 
                <SelectSampleGroup()> method. The <OnMeasurementComplete()> event is invoked after the each measurement is done 
                and the event is enabled. The state of the measurement can be also polled by the 
                <GetMeasurementCompleteStatus()> method. Results of the measurement can be read by the <GetMeasuredValues()> 
                method. This method is available only if HW supports loop measurement. The <Discontinuous mode> doesn't support 
                this method.
   - AD1_StartLoopTriggeredMeasurement -This method prepares periodic measurement of the selected group of samples and exits 
                immediately. The measurement is started each time the trigger is activated. The group of samples for 
                measurement is specified by preceding call to <SelectSampleGroup()> or <SelectSampleGroup()> method. The 
                <OnMeasurementComplete()> event is invoked after the each measurement is done and the event is enabled. The 
                state of the measurement can be also polled by the <GetMeasurementCompleteStatus()> method. Results of the 
                measurement can be read by the <GetMeasuredValues()> method. This method is available only if HW supports 
                triggered measurement and <Trigger> is enabled.
   - AD1_SelectSampleGroup -This method selects one of the (design-time) predefined <Static sample groups> for the next 
                measurement. Each call rewrites the preceding setting. Once any group is selected, the measurement can be 
                started multiple times. Note: This method works only with the sample groups defined at design time. For 
                run-time defined groups use <CreateSampleGroup()> method.
   - AD1_CreateSampleGroup -This method prepares HW for next measurement according to array of samples defined during run-time. 
                The array of samples should be prepared prior to calling this method. Pointer to the array is passed into this 
                method in parameter SampleGroupPtr. The number of samples is defined by parameter SampleCount. Once any group 
                is prepared, the measurement can be started multiple times. Note: This method works only with the sample groups 
                defined during run-time. For design-time defined groups use <SelectSampleGroup()> method.
   - AD1_GetMeasuredValues -This method copies results of the last measurement to the user supplied buffer. Data size depends 
                on the size of measured sample group (see <SelectSampleGroup()> or <CreateSampleGroup()> method). Data 
                representation is defined by the <Result type> property. Typically this method is called from 
                <OnMeasurementComplete> event to get results of the last measurement.

Module "AD2"       (component ADC_LDD)
   - AD2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - AD2_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors, 
                etc.
   - AD2_StartSingleMeasurement -This method starts one measurement of the selected group of samples and exits immediately. The 
                group of samples for measurement is specified by preceding call to <SelectSampleGroup()> or 
                <SelectSampleGroup()> method. The <OnMeasurementComplete() > event is invoked after the measurement is done and 
                the event is enabled. The state of the measurement can be also polled by the <GetMeasurementCompleteStatus()> 
                method. Results of the measurement can be read by the <GetMeasuredValues()> method. The <Discontinuous mode> 
                doesn't support this method.
   - AD2_CreateSampleGroup -This method prepares HW for next measurement according to array of samples defined during run-time. 
                The array of samples should be prepared prior to calling this method. Pointer to the array is passed into this 
                method in parameter SampleGroupPtr. The number of samples is defined by parameter SampleCount. Once any group 
                is prepared, the measurement can be started multiple times. Note: This method works only with the sample groups 
                defined during run-time. For design-time defined groups use <SelectSampleGroup()> method.
   - AD2_GetMeasuredValues -This method copies results of the last measurement to the user supplied buffer. Data size depends 
                on the size of measured sample group (see <SelectSampleGroup()> or <CreateSampleGroup()> method). Data 
                representation is defined by the <Result type> property. Typically this method is called from 
                <OnMeasurementComplete> event to get results of the last measurement.

Module "AS1"       (component Serial_LDD)
   - AS1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - AS1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors, 
                etc.
   - AS1_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled.
   - AS1_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number of 
                characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation.
   - AS1_GetSentDataNum -Returns the number of sent characters.
   - AS1_GetReceivedDataNum -Returns the number of received characters in the receive buffer.

Module "I2C2"      (component I2C_LDD)
   - I2C2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - I2C2_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors,
                etc.
   - I2C2_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes inclusive 
                of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address must be 
                specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target slave 
                address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. The 
                state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent are 
                not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2C2_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2C2_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or general 
                call value. Any send or receive method directs to or from selected device, until a new slave device is selected 
                by this method. This method is available for the MASTER mode.
   - I2C2_GetError -Returns value of error mask, e.g. LDD_I2C_ARBIT_LOST.
   - I2C2_CheckBus -This method returns the status of the bus. If the START condition has been detected, the method returns 
                LDD_I2C_BUSY. If the STOP condition has been detected, the method returns LDD_I2C_IDLE.

Module "GPIO2"     (component GPIO_LDD)
   - GPIO2_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - GPIO2_Deinit -This method disables the device and frees the device data structure memory.
   - GPIO2_SetFieldValue -This method sets the output data value of the specified bit field.
   - GPIO2_GetFieldValue -This method returns the current input data of the specified field.
   - GPIO2_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - GPIO2_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - GPIO2_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.
   - GPIO2_SetFieldInputDirection -This method sets all pins of the field to the input direction.
   - GPIO2_SetFieldOutputDirection -This method sets all pins of the field to the output direction.
   - GPIO2_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this component. This 
                method is only available for CPU derivatives and peripherals that support the runtime pin sharing with other 
                internal on-chip peripherals.

Module "GPIO3"     (component GPIO_LDD)
   - GPIO3_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - GPIO3_Deinit -This method disables the device and frees the device data structure memory.
   - GPIO3_SetFieldValue -This method sets the output data value of the specified bit field.
   - GPIO3_GetFieldValue -This method returns the current input data of the specified field.
   - GPIO3_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - GPIO3_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - GPIO3_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.
   - GPIO3_SetFieldInputDirection -This method sets all pins of the field to the input direction.
   - GPIO3_SetFieldOutputDirection -This method sets all pins of the field to the output direction.
   - GPIO3_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this component. This 
                method is only available for CPU derivatives and peripherals that support the runtime pin sharing with other 
                internal on-chip peripherals.

Module "CameraTimer" (component TimerUnit_LDD)
   - CameraTimer_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - CameraTimer_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.

Module "SiPin"     (component GPIO_LDD)
   - SiPin_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - SiPin_Deinit -This method disables the device and frees the device data structure memory.
   - SiPin_SetFieldValue -This method sets the output data value of the specified bit field.
   - SiPin_GetFieldValue -This method returns the current input data of the specified field.
   - SiPin_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - SiPin_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - SiPin_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.
   - SiPin_SetFieldInputDirection -This method sets all pins of the field to the input direction.
   - SiPin_SetFieldOutputDirection -This method sets all pins of the field to the output direction.
   - SiPin_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this component. This 
                method is only available for CPU derivatives and peripherals that support the runtime pin sharing with other 
                internal on-chip peripherals.

Module "ServoTimer" (component TimerUnit_LDD)
   - ServoTimer_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - ServoTimer_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - ServoTimer_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user 
                responsibility to use value below selected period. This method is available when at least one channel is 
                configured.

Module "Cpu"       (component MK40N512LQ100)

===================================================================================
